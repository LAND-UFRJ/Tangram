/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

/******************************************************************************
 This class makes use of the generic AVL tree and node. Those structures 
store the numbers generated by a generic function hash, which converts a 
number represented at a generic base to a exclusive value and vice-versa. 
 To make the conversion the following formulation is associated with the
functions ( vec_to_num, num_to_vec):
 Let V1,V2, ... Vn be the set of values of the state vector.
 Let B1,B2, ... Bn be the base of these set of state variables.

 Let N be the resultant number after the conversion has been applied. Then
  N = V1 + V2*B1 + V3*B1*B2 + ... Vn*B1*B2*...*Bn-1. 

  To get the original values again, then:
  V1 = N module B1;
  V2 = ( N / B1 ) module B2;
  V3 = ( N / B1 * B2 ) module B3;
  ..
  Vn = ( N / B1 * B2 *...* Bn-1) module Bn;
  
******************************************************************************/
#ifndef __HASH_H__
#define __HASH_H__

#include "node.h"
#include "tree_avl.h"


class Hash{

private:
  TreeAVL<Node>  *tree;      // Tree AVL
  Node           *node_aux;   
  uint           *max_vec;   // Vector base of maximum values at each state
  uint           count;      // Counter of insert order
  u_longlong_t   max_value;  // Max values of the product of state variables
  uint           num_elem;   // Number of state variables
  u_longlong_t   *mapp_vec ; // Mapping vector of insert order and hash numbers
  uint           mem_size;   // Memory size allocated to mapping vector

  boolean vec_to_hash_num( u_longlong_t*, uint* );
  boolean hash_num_to_vec( u_longlong_t , uint* );

public:
  Hash( uint* , uint ); 
  ~Hash() ;
  
  boolean init( void );
  uint    show_no_states( void ) ;
  boolean vec_to_num ( uint* , uint* );
  boolean num_to_vec ( uint  , uint* );
  boolean find( uint );
  boolean find( uint* );
  boolean insert( uint* );
  void print();
};

#endif



