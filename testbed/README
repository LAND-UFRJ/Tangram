---------------------------------------------------------------------------
                               TANGRAM-II
---------------------------------------------------------------------------

    TANGRAM-II is a modeling environment developed for research and
    educational purpose that provides a flexible user  interface  to
    describe computer and communication system models.

    The interface is built on  java 2  language and the  models  are
    described  based on  an  object  oriented  description  language
    suported by the public domain software  package  TGIF  ( TANGRAM
    Graphic Interface Facility ).

    The tools are implemented in C / C++ and has several solvers for
    transient and steady state analysis of performance and availabi-
    lity metrics. Furthermore you can use  the  powerful  simulation
    tool to get the measures of interest.

    Please, for a detailed description of TANGRAM-II see the tutorial.
    Also visit, http://www.land.ufrj.br for updated information.

---------------------------------------------------------------------------

    This file describe briefly how the automatic testbed works. 

--------------------------------------------------------------------------


Simple Usage
------------
    
    The simplest way to test Tangram-II is to call 'testall.sh'.

Test Description
----------------

    Models and tests:

    1 - Model: MM1k     Method/Test: Gauss-Siedel

        Command: solv <model name> 1 <precision> <max iterations>

        <model name>: MM1k
        <precision>: 1e-06
        <max_iterations>: 10000

        diff file:MM1k.SS.gauss

    2 - Model: MM1k     Method/Test: Jacobi

        Command: solv <model name> 2 <precision> <max iterations>

        <model name>: MM1k
        <precision>: 1e-06
        <max_iterations>: 10000

        diff file: MM1k.SS.jacobi

    3 - Model: MM1k     Method/Test: SOR

        Command: solv <model name> 3 <precision> <max iterations> 

        <model name>: MM1k
        <precision>: 1e-06
        <max_iterations>: 10000

        diff file:MM1k.SS.sor    

    4 - Model: MM1k     Method/Test: Power Method

        Command: solv <model name> 4 <precision> <max iterations> 

        <model name>: MM1k
        <precision>: 1e-06
        <max_iterations>: 10000

        diff file: MM1k.SS.power


    5 - Model:Outputqueueing    Method/Test: GTH

        Command: solv <model name> 5

        <model name>: outputqueueing

        diff file: outputqueueing.SS.gth          

    6 - Model: Availability     Method/Test: GTH no block

        Command: solv <model name> 6

        <model name>: availability

        diff file:availability.SS.gthb

        necessary files (generated by GUI):
            * availability.partitions

    7 - Model: Database     Method/Test: Uniformization

        Command: solv <model name> 7 <precision>

        <model name>: database
        <precision>: 1e-06

        diff file:database.TS.pp.1.00000e+01

        necessary files (generated by GUI):
            * database.init_prob
            * database.intervals

    8 - Model:Bounded Reward    Method/Test: Bounded Cumulative Reward  

        Command: solv <model name> 8 <object name>.<reward name> precision

        <model name>: bounded_reward
        <object name>.<reward name>: birth_death.buffer
        <precision>: 1e-06

        diff file:bounded_reward.TS.brew.cumulat_distrib.1.00000e+00

        necessary files (generated by GUI):    
            * bounded_reward.init_prob
            * bounded_reward.intervals

    9 - Model:Bounded Reward    Method/Test: Fraction of time the accumulated reward is 
                                        above a level

        Command: solv <model name> 9 <reward> <precision>

        <model name>: bounded_reward.
        <reward>: birth_death.buffer
        <precision>: 1e-06

        diff file: bounded_reward.TS.brew.expected_period.1.00000e+00   

        necessary files (generated by GUI):    
            * bounded_reward.init_prob
            * bounded_reward.intervals
            * bounded_reward.reward_levels.birth_death.buffer

    10 - Model:operationaltime  Method/Test: Operational time and related measures

         Command: solv <model name> 10 [reward] <precision>

         <model name>: operationaltime
         <precision>: 1e-06
         [reward]:Dispatcher_CPUS.reliabiliy

         diff file:operationaltime.TS.operational_time

         necessary files (generated by GUI):         
            * operationaltime.init_prob
            * operationaltime.intervals
            * operationaltime.reward_levels.Dispatcher_CPUS.reliabiliy

    11 - Model: Deterministic_Server    Method/Test: Non-Markovian Models (deterministic events)

         Command: solv <model name> 11 <precision> <solution> [max iterations]

         <model name>: server_det
         <precision>: 1e-06

         diff arquivos:server_det.SS.NM.expected_cycle_length
                       server_det.SS.NM.marginal_probs

         necessary files (generated by GUI):         
            * server_det.NM.chns_betw_embed_pnts
            * server_det.NM.embedded_chain_mapping
            * server_det.NM.embedded_points
            * server_det.NM.embedded_points.expr
            * server_det.NM.interest_measures

    12 - Model: MM1k        Method/Test: Expected cumulative reward

         Command:solv <model name> 12 [reward] <precision>

         <model name>:MM1k
         [reward]:Server_Queue.q_size
         <precision>: 1e-06

         diff file: MM1k.TS.exptr

         necessary files (generated by GUI):         
            * MM1k.init_prob;MM1k.intervals

    13 - Model: RateRewardaprox     Method/Test: Cumulative Rate Reward - Direct Technique

         Command: solv <model name> 13 <erlang stages> <reward> <measure_opt>     

         <model name>: raterewardaprox
         <erlang stages>: 50
         <reward>: Database.database_availability
         <measure_option>: 2

         diff file:raterewardaprox.TS.DIRECT.Cumulative_SET_Reward

         necessary files (generated by GUI):
            * raterewardaprox.init_prob
            * raterewardaprox.int_rewd
            * raterewardaprox.partition

    14 - Model: RateRewardaprox     Method/Test: Cumulative Rate Reward - Iterative Technique  

         Command: solv <model name> 14 <reward> <measure_opt> <solution>
                  <precision> <max iterations>

         <model name>: raterewardaprox
         <reward>: Database.database_availability
         <measure_option>: 2
         <solution>: 3 (Jacobi)
         <precision>: 1e-06
         <max_iterations>: 10000

         diff file: raterewardaprox.TS.ITERATIVE.Cumulative_SET_Reward

         necessary files (generated by GUI):
            * raterewardaprox.int_rewi,raterewardaprox.init_prob

    15 - Model: RateRewardaprox     Method/Test: Efficient Transient State Prob Approximation 
                                                 - Direct  

         Command: solv <model name> 15 <erlang stages> <measure_opt> [state_var]

         <model_name>:raterewardaprox
         <erlang stages>:50
         <measure_opt>:1
         [state_var]: - 

         diff file: raterewardaprox.TS.espa_dir.STATE_PROB.1.000000e+00

         necessary files (generated by GUI):
            * raterewardaprox.init_prob,raterewardaprox.int_direct

    16 - Model: RateRewardaprox     Method/Test: Efficient Transient State Prob Approximation 
                                                 - Iterative 

         Command:solv <model name> 16 <measure_opt> [state_var]
                      <solution> <precision> <max iterations>

         <model name>:raterewardaprox
         <measure_opt>:1
         [state_var]:-
         <solution>: 3 (jacobi)
         <precision>:1e-06
         <max iterations>:10000

         diff file: raterewardaprox.TS.espa_iterative.STATE_PROB.1.000000e+00

         necessary files (generated by GUI):
            * raterewardaprox.init_prob
            * raterewardaprox.int_iterative

    17 - Model: Go_Back_N            Method/Test: Expected  Impulse Reward

         Command: solv <model name> 17 [reward] <precision>

         <model name>:go_back_n
         [reward]:Channel.packet_accepted
         <precision>:1e-06

         diff arquivos:go_back_n.TS.expected_imp_reward.Channel.packet_accepted

         necessary files (generated by GUI):
            * go_back_n.init_prob
            * go_back_n.intervals


    In all cases, the <model_name>.generator_mtx must be in the directory where the tests will
    be performed. Therefore, the generated results will be in this same directory.

<EOT>
