/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2Analytical_Transient_EV_ECR_ESRA_Iterative extends javax.swing.JPanel {

  /** Initializes the Form */
  public T2Analytical_Transient_EV_ECR_ESRA_Iterative(T2modelenv ModelEnv) {
    modelenv = ModelEnv;
    initComponents ();
    initComponentsManual ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
private void initComponents () {//GEN-BEGIN:initComponents
    jPanel1 = new javax.swing.JPanel ();
    jLabel1 = new javax.swing.JLabel ();
    jTB_State_Reward = new javax.swing.JToggleButton ();
    jLabel2 = new javax.swing.JLabel ();
    jTB_Set_Reward = new javax.swing.JToggleButton ();
    jLabel3 = new javax.swing.JLabel ();
    jB_File_Chooser = new javax.swing.JButton ();
    jLabel4 = new javax.swing.JLabel ();
    jTF_Reward_Name = new javax.swing.JTextField ();
    jPanel2 = new javax.swing.JPanel ();
    setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());

    jPanel1.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());

      jLabel1.setText ("Measures of Interest");
      jLabel1.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jPanel1.add (jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 10, -1, -1));
  
      jTB_State_Reward.setSelected (true);
  
      jPanel1.add (jTB_State_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints (37, 30, 15, 15));
  
      jLabel2.setText ("State Reward");
      jLabel2.setForeground (java.awt.Color.black);
      jLabel2.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jPanel1.add (jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints (57, 30, -1, 15));
  
  
      jPanel1.add (jTB_Set_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints (37, 55, 15, 15));
  
      jLabel3.setText ("Set Reward");
      jLabel3.setForeground (java.awt.Color.black);
      jLabel3.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jPanel1.add (jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints (57, 55, -1, 15));
  

    add (jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 350, 520, 80));

    jB_File_Chooser.setText ("...");
    jB_File_Chooser.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jB_File_ChooserActionPerformed (evt);
        }
    }
    );


    add (jB_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints (500, 440, 22, 20));

    jLabel4.setText ("Reward Name");
    jLabel4.setFont (new java.awt.Font ("Dialog", 1, 10));


    add (jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints (20, 440, -1, 20));



    add (jTF_Reward_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints (120, 440, 370, 20));



    add (jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints (510, 470, 20, 10));

}//GEN-END:initComponents

  private void jB_File_ChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_File_ChooserActionPerformed
    if ( fchooser.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION )
      jTF_Reward_Name.setText( fchooser.getSelectedFile().getName().substring(new String(modelenv.curmodel).length()+13) );
  }//GEN-LAST:event_jB_File_ChooserActionPerformed

  private void initComponentsManual ()
  {
    fchooser  = new javax.swing.JFileChooser();
    objFilter = new ExampleFileFilterEx(0, modelenv.curmodel, new String[] {".rate_reward."}, ".expr", "Rate reward files");
    fchooser.addChoosableFileFilter(objFilter);
    fchooser.setFileFilter( objFilter );
    fchooser.setDialogTitle("Choose Reward File");
    fchooser.setCurrentDirectory( new java.io.File (modelenv.curdir));
    probint = new T2Analytical_Transient_Probability_and_Intervals(1);
    add(probint, new org.netbeans.lib.awtextra.AbsoluteConstraints (1, 1, 528, 230));

    method = new T2Analytical_Iterative_Methods();
    add(method, new org.netbeans.lib.awtextra.AbsoluteConstraints (1, 231, -1, -1));

    javax.swing.ButtonGroup group = new javax.swing.ButtonGroup();
    group.add(jTB_State_Reward);
    group.add(jTB_Set_Reward);
  }

  public String Get_Method_Name()
  {
    return "Iterative";
  }

  public void Evaluate()
  {

     String last_token;

     String reward_name, precision, max_num_of_iterations;
     int  solution;


     int measure = 0;

     try {
      java.io.FileWriter     file   = new java.io.FileWriter( modelenv.curdir + "/" +modelenv.curmodel+".int_rewi" );
      java.io.BufferedWriter buffer = new java.io.BufferedWriter( file);

      java.util.Vector lines_vect = new java.util.Vector();
      int number_of_lines =0;


      if (jTB_State_Reward.isSelected()) measure = 1;
      else if (jTB_Set_Reward.isSelected()) measure = 2;

      // System.out.println("Evaluating ESRA Iterative!");
      int n_tot_subinterv = 0;
      int n_subinterv =  0;

      if (probint.Is_some_field_missing_and_get_precision( modelenv.curmodel, false ) == "999")
      {
        return;
      }

      reward_name =  jTF_Reward_Name.getText();
      precision = method.Get_Precision();
      max_num_of_iterations = method.Get_Max_Number_Of_Iterations();

      solution = method.GetSelectedIterativeMethod();

      if (max_num_of_iterations.trim().compareTo("") == 0 )
      {
        javax.swing.JOptionPane.showMessageDialog(this,"Max number of iterations is empty!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }

      if (precision.trim().compareTo("") == 0 )
      {
        javax.swing.JOptionPane.showMessageDialog(this,"Precision is empty!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }


      if (reward_name.trim().compareTo("") == 0)
      {
         javax.swing.JOptionPane.showMessageDialog(this,"Reward name not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         return;
      }
      else
      {
        /* Now, we must verify if the file indicated by "state variable" exists. */

       java.io.File state_var_file = new java.io.File(modelenv.curmodel + ".rate_reward."+ reward_name);
       if (!(state_var_file.exists())) {
         javax.swing.JOptionPane.showMessageDialog(this,"File " + modelenv.curmodel + ".rate_reward." + reward_name + " doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         return;
       }
      }



     java.util.StringTokenizer st_tokens = new java.util.StringTokenizer(probint.Get_Intervals(),";");

     number_of_lines = st_tokens.countTokens();

     while (st_tokens.hasMoreTokens()) {

       last_token  = st_tokens.nextToken();
       java.util.StringTokenizer st_aux_tokens = new java.util.StringTokenizer(last_token," ");

       st_aux_tokens.nextToken();

       for (int j=0; j<3;j++)
       {

            n_subinterv = Integer.parseInt (st_aux_tokens.nextToken());

       }

       n_tot_subinterv +=  n_subinterv;

       lines_vect.add ( last_token.trim() + "\n" );
     }


     buffer.write(String.valueOf(n_tot_subinterv) + "\n");
     buffer.write(String.valueOf(number_of_lines) + "\n" );


     for (int k=0; k<number_of_lines;k++)
     {
        buffer.write( (String)lines_vect.get(k) );
     }

     buffer.close();

    }
    catch (Exception e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Can't create the file "+ modelenv.curmodel+".int_rewi"+ "\nError -- "+e.toString(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    String command = "solv " + modelenv.curmodel + " 14 " + reward_name + " " + measure + " " + solution + " " + precision + " " + max_num_of_iterations ;

    // System.out.println(command);

    modelenv.analytical.setEnabled(false);
    status = new T2status(modelenv.analytical, "Solver Status", "Solv is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
    status.show();
    status.start();

/*
    try {
      Process solv = Runtime.getRuntime().exec( command );
      threadCapOut.takeoutput_process(solv, (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), Get_Method_Name(), modelenv.analytical );
      new threadCapOut( solv.getErrorStream(), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) ).start();
      solv.waitFor();
      T2functions.Print_Error_Message(solv.exitValue(),this);
    }
    catch (Exception e) {
      T2functions.Print_Error_Message(290,this);
    }
*/


  }

// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel jPanel1;
private javax.swing.JLabel jLabel1;
private javax.swing.JToggleButton jTB_State_Reward;
private javax.swing.JLabel jLabel2;
private javax.swing.JToggleButton jTB_Set_Reward;
private javax.swing.JLabel jLabel3;
private javax.swing.JButton jB_File_Chooser;
private javax.swing.JLabel jLabel4;
private javax.swing.JTextField jTF_Reward_Name;
private javax.swing.JPanel jPanel2;
// End of variables declaration//GEN-END:variables
  private T2modelenv modelenv;
  private javax.swing.JFileChooser fchooser;
  private ExampleFileFilterEx objFilter;

  private T2Analytical_Transient_Probability_and_Intervals probint;
  private T2Analytical_Iterative_Methods method;
  private T2status status;

}
