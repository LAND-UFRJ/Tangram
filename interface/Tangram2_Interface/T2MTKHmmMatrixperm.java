/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * T2MTKHmmMatrixperm.java
 *
 * Created on Jul 14, 2009, 11:24:50 AM
 */

package Tangram2;

/**
 *
 * @author balves
 */
public class T2MTKHmmMatrixperm extends javax.swing.JFrame {

    /** Creates new form T2MTKHmmMatrixperm */
    public T2MTKHmmMatrixperm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tangram II");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hidden States Transition Probability Matrix", "Symbols Emission Probabilities" }));

        jLabel1.setText("Select");

        jButton1.setText("Show");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_hmm_param_vis.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, 313, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 199, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(jComboBox1.getSelectedIndex()==0){
            //Transition Mtatrix

            T2modelenv modelenv = T2MTKMain.T2MainWindow;

           /* String cmdline; int npars=0; String permstring = new String();

            java.util.Vector cmdpars = new java.util.Vector();*/

            String parsarray = "";

            //int finalpermvect [] = new int[ permvect.size() ];

            parsarray += "mtx_vis-st_permut ";
            parsarray += "-fn ";
            parsarray += modelenv.curdir + "/" + modelenv.curmodel+".HMM.hidden_st ";
            parsarray +="-sc ";
            parsarray +="Yellow ";
            parsarray +="-fc ";
            parsarray +="Red ";
            parsarray +="-bc ";
            parsarray +="White ";
            parsarray +="-cd ";
            parsarray +="8 ";
            parsarray +="-zo ";
            parsarray +="2 ";

            try
            {
              Process matrixpermproc;

              matrixpermproc = Runtime.getRuntime().exec(parsarray);

              threadCapOut.takeoutput_process(matrixpermproc, (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Matrix Visualization", modelenv.analytical );
              new threadCapOut( matrixpermproc.getErrorStream(), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) ).start();

              matrixpermproc.waitFor();

            }
            catch(Exception e)
            {
              T2MTKCommon.errorMessage("","Exception running " + e.toString());
              //System.out.println(parsarray);
            }

        }
        if(jComboBox1.getSelectedIndex()==1){
            //Symbols Probabilities

            T2modelenv modelenv = T2MTKMain.T2MainWindow;

            T2MTKCommon.infoMessage("", "This next window shows the symbol emission probability distribution in every hidden state i, where each cell (i,j) = P[symbol j | hidden state i].");

            String parsarray = "";


            parsarray += "mtx_vis-st_permut ";
            parsarray += "-fn ";
            parsarray += modelenv.curdir + "/" + modelenv.curmodel+".HMM.symbols ";
            parsarray +="-sc ";
            parsarray +="Yellow ";
            parsarray +="-fc ";
            parsarray +="Red ";
            parsarray +="-bc ";
            parsarray +="White ";
            parsarray +="-cd ";
            parsarray +="8 ";
            parsarray +="-zo ";
            parsarray +="2 ";

            try
            {
              Process matrixpermproc;

              matrixpermproc = Runtime.getRuntime().exec(parsarray);

              threadCapOut.takeoutput_process(matrixpermproc, (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Matrix Visualization", modelenv.analytical );
              new threadCapOut( matrixpermproc.getErrorStream(), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) ).start();

              matrixpermproc.waitFor();

            }
            catch(Exception e)
            {
              T2MTKCommon.errorMessage("","Exception running " + e.toString());
              //System.out.println(parsarray);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new T2MTKHmmMatrixperm().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

}
