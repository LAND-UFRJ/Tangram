/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2Analytical_Stationary_Non_markovian extends javax.swing.JPanel {

  /** Initializes the Form */
  public T2Analytical_Stationary_Non_markovian(T2modelenv ModelEnv) {
    modelenv = ModelEnv;
    initComponents ();
    initComponentsManual ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
private void initComponents () {//GEN-BEGIN:initComponents
    jP_Non_markovian_models = new javax.swing.JPanel ();
    jL_Solution_Method = new javax.swing.JLabel ();
    jP_Interest_Measures = new javax.swing.JPanel ();
    jSP_Choose_Variables = new javax.swing.JScrollPane ();
    jL_Choose_Variable = new javax.swing.JList ();
    jL_Choose_Variables = new javax.swing.JLabel ();
    jTF_variables = new javax.swing.JTextField ();
    jL_variables = new javax.swing.JLabel ();
    jB_Add = new javax.swing.JButton ();
    jB_Clear = new javax.swing.JButton ();
    jSP_selected_variables = new javax.swing.JScrollPane ();
    jL_selected_variables = new javax.swing.JList ();
    jB_Remove = new javax.swing.JButton ();
    jB_Remove_All = new javax.swing.JButton ();
    jL_Interest_Measures = new javax.swing.JLabel ();
    jLabel1 = new javax.swing.JLabel ();
    jLabel2 = new javax.swing.JLabel ();
    jP_Solution_Method = new javax.swing.JPanel ();
    jTB_GTH = new javax.swing.JToggleButton ();
    jTB_Power = new javax.swing.JToggleButton ();
    jL_GTH = new javax.swing.JLabel ();
    jTB_SOR = new javax.swing.JToggleButton ();
    jL_Power = new javax.swing.JLabel ();
    jL_SOR = new javax.swing.JLabel ();
    jL_Max_Iterations = new javax.swing.JLabel ();
    jTF_Max_Iterations = new javax.swing.JTextField ();
    jL_Precision = new javax.swing.JLabel ();
    jTF_Precision = new javax.swing.JTextField ();
    jP_Separator_1 = new javax.swing.JPanel ();
    jP_Separator_2 = new javax.swing.JPanel ();
    jP_Print_Options = new javax.swing.JPanel ();
    jTB_print_embedded_chain = new javax.swing.JToggleButton ();
    jTB_print_state_probs = new javax.swing.JToggleButton ();
    jL_print_embedded_chain = new javax.swing.JLabel ();
    jL_print_state_probs_1 = new javax.swing.JLabel ();
    jL_print_state_probs_2 = new javax.swing.JLabel ();
    jL_print_options = new javax.swing.JLabel ();
    jPanel1 = new javax.swing.JPanel ();
    setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());

    jP_Non_markovian_models.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
    jP_Non_markovian_models.setBorder (new javax.swing.border.LineBorder(java.awt.Color.gray));

      jL_Solution_Method.setText ("Solution Method");
      jL_Solution_Method.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Non_markovian_models.add (jL_Solution_Method, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 250, -1, -1));
  
      jP_Interest_Measures.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
  
    
          jL_Choose_Variable.setBackground (new java.awt.Color (204, 204, 204));
          jL_Choose_Variable.addMouseListener (new java.awt.event.MouseAdapter () {
              public void mouseClicked (java.awt.event.MouseEvent evt) {
                  jL_Choose_VariableMouseClicked (evt);
              }
          }
          );
      
          jSP_Choose_Variables.setViewportView (jL_Choose_Variable);
      
        jP_Interest_Measures.add (jSP_Choose_Variables, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 40, 170, 180));
    
        jL_Choose_Variables.setText ("Choose Variables");
        jL_Choose_Variables.setForeground (java.awt.Color.black);
        jL_Choose_Variables.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Interest_Measures.add (jL_Choose_Variables, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 25, -1, -1));
    
        jTF_variables.setEditable (false);
    
        jP_Interest_Measures.add (jTF_variables, new org.netbeans.lib.awtextra.AbsoluteConstraints (190, 40, 325, 20));
    
        jL_variables.setText ("Variables");
        jL_variables.setForeground (java.awt.Color.black);
        jL_variables.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Interest_Measures.add (jL_variables, new org.netbeans.lib.awtextra.AbsoluteConstraints (190, 25, -1, -1));
    
        jB_Add.setFont (new java.awt.Font ("Dialog", 0, 10));
        jB_Add.setText ("Add");
        jB_Add.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                jB_AddActionPerformed (evt);
            }
        }
        );
    
        jP_Interest_Measures.add (jB_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints (329, 70, 93, 20));
    
        jB_Clear.setFont (new java.awt.Font ("Dialog", 0, 10));
        jB_Clear.setText ("Clear");
        jB_Clear.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                jB_ClearActionPerformed (evt);
            }
        }
        );
    
        jP_Interest_Measures.add (jB_Clear, new org.netbeans.lib.awtextra.AbsoluteConstraints (422, 70, 93, 20));
    
    
          jL_selected_variables.setBackground (new java.awt.Color (204, 204, 204));
      
          jSP_selected_variables.setViewportView (jL_selected_variables);
      
        jP_Interest_Measures.add (jSP_selected_variables, new org.netbeans.lib.awtextra.AbsoluteConstraints (190, 100, 325, 90));
    
        jB_Remove.setFont (new java.awt.Font ("Dialog", 0, 10));
        jB_Remove.setText ("Remove");
        jB_Remove.setEnabled (false);
        jB_Remove.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                jB_RemoveActionPerformed (evt);
            }
        }
        );
    
        jP_Interest_Measures.add (jB_Remove, new org.netbeans.lib.awtextra.AbsoluteConstraints (329, 200, 93, 20));
    
        jB_Remove_All.setFont (new java.awt.Font ("Dialog", 0, 10));
        jB_Remove_All.setText ("Remove All");
        jB_Remove_All.setEnabled (false);
        jB_Remove_All.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                jB_Remove_AllActionPerformed (evt);
            }
        }
        );
    
        jP_Interest_Measures.add (jB_Remove_All, new org.netbeans.lib.awtextra.AbsoluteConstraints (422, 200, 93, 20));
    
        jL_Interest_Measures.setText ("Interest Measures");
        jL_Interest_Measures.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Interest_Measures.add (jL_Interest_Measures, new org.netbeans.lib.awtextra.AbsoluteConstraints (0, 0, -1, -1));
    
        jLabel1.setText ("Warning: This method is not optimized yet!");
        jLabel1.setForeground (java.awt.Color.red);
        jLabel1.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Interest_Measures.add (jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints (240, 0, -1, -1));
    
        jLabel2.setText ("Avoid using it for big models.");
        jLabel2.setForeground (java.awt.Color.red);
        jLabel2.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Interest_Measures.add (jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints (328, 13, -1, -1));
    
      jP_Non_markovian_models.add (jP_Interest_Measures, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 5, 530, 235));
  
      jP_Solution_Method.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
  
        jTB_GTH.setSelected (true);
        jTB_GTH.addChangeListener (new javax.swing.event.ChangeListener () {
            public void stateChanged (javax.swing.event.ChangeEvent evt) {
                jTB_GTHStateChanged (evt);
            }
        }
        );
    
        jP_Solution_Method.add (jTB_GTH, new org.netbeans.lib.awtextra.AbsoluteConstraints (11, 10, 15, 15));
    
    
        jP_Solution_Method.add (jTB_Power, new org.netbeans.lib.awtextra.AbsoluteConstraints (11, 30, 15, 15));
    
        jL_GTH.setText ("GTH");
        jL_GTH.setForeground (java.awt.Color.black);
        jL_GTH.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Solution_Method.add (jL_GTH, new org.netbeans.lib.awtextra.AbsoluteConstraints (30, 11, -1, 17));
    
    
        jP_Solution_Method.add (jTB_SOR, new org.netbeans.lib.awtextra.AbsoluteConstraints (11, 50, 15, 15));
    
        jL_Power.setText ("Power");
        jL_Power.setForeground (java.awt.Color.black);
        jL_Power.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Solution_Method.add (jL_Power, new org.netbeans.lib.awtextra.AbsoluteConstraints (30, 31, -1, 17));
    
        jL_SOR.setText ("SOR");
        jL_SOR.setForeground (java.awt.Color.black);
        jL_SOR.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Solution_Method.add (jL_SOR, new org.netbeans.lib.awtextra.AbsoluteConstraints (30, 51, -1, 17));
    
        jL_Max_Iterations.setText ("Max number of iterations");
        jL_Max_Iterations.setFont (new java.awt.Font ("Dialog", 1, 10));
        jL_Max_Iterations.setEnabled (false);
    
        jP_Solution_Method.add (jL_Max_Iterations, new org.netbeans.lib.awtextra.AbsoluteConstraints (80, 35, -1, -1));
    
        jTF_Max_Iterations.setToolTipText ("Abort execution when this number is reached.");
        jTF_Max_Iterations.setEnabled (false);
    
        jP_Solution_Method.add (jTF_Max_Iterations, new org.netbeans.lib.awtextra.AbsoluteConstraints (250, 30, 65, 20));
    
      jP_Non_markovian_models.add (jP_Solution_Method, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 270, -1, 70));
  
      jL_Precision.setText ("Deterministic Solution Precision");
      jL_Precision.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Non_markovian_models.add (jL_Precision, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 360, -1, 20));
  
  
      jP_Non_markovian_models.add (jTF_Precision, new org.netbeans.lib.awtextra.AbsoluteConstraints (240, 360, 190, 20));
  
      jP_Separator_1.setBorder (new javax.swing.border.LineBorder(java.awt.Color.gray));
  
      jP_Non_markovian_models.add (jP_Separator_1, new org.netbeans.lib.awtextra.AbsoluteConstraints (0, 240, 550, 1));
  
      jP_Separator_2.setBorder (new javax.swing.border.LineBorder(java.awt.Color.gray));
  
      jP_Non_markovian_models.add (jP_Separator_2, new org.netbeans.lib.awtextra.AbsoluteConstraints (0, 345, 550, 1));
  
      jP_Print_Options.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
  
        jTB_print_embedded_chain.addChangeListener (new javax.swing.event.ChangeListener () {
            public void stateChanged (javax.swing.event.ChangeEvent evt) {
                jTB_GTHStateChanged (evt);
            }
        }
        );
    
        jP_Print_Options.add (jTB_print_embedded_chain, new org.netbeans.lib.awtextra.AbsoluteConstraints (11, 30, 15, 15));
    
    
        jP_Print_Options.add (jTB_print_state_probs, new org.netbeans.lib.awtextra.AbsoluteConstraints (11, 50, 15, 15));
    
        jL_print_embedded_chain.setText ("Embedded Chain");
        jL_print_embedded_chain.setForeground (java.awt.Color.black);
        jL_print_embedded_chain.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Print_Options.add (jL_print_embedded_chain, new org.netbeans.lib.awtextra.AbsoluteConstraints (30, 31, -1, 17));
    
        jL_print_state_probs_1.setText ("Embedded Chain Steady");
        jL_print_state_probs_1.setForeground (java.awt.Color.black);
        jL_print_state_probs_1.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Print_Options.add (jL_print_state_probs_1, new org.netbeans.lib.awtextra.AbsoluteConstraints (30, 51, -1, 17));
    
        jL_print_state_probs_2.setText ("State Probabilities");
        jL_print_state_probs_2.setForeground (java.awt.Color.black);
        jL_print_state_probs_2.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Print_Options.add (jL_print_state_probs_2, new org.netbeans.lib.awtextra.AbsoluteConstraints (30, 71, -1, -1));
    
        jL_print_options.setText ("Print Options");
        jL_print_options.setFont (new java.awt.Font ("Dialog", 1, 10));
    
        jP_Print_Options.add (jL_print_options, new org.netbeans.lib.awtextra.AbsoluteConstraints (5, 0, -1, -1));
    
      jP_Non_markovian_models.add (jP_Print_Options, new org.netbeans.lib.awtextra.AbsoluteConstraints (340, 250, -1, 90));
  
      jPanel1.setBorder (new javax.swing.border.LineBorder(java.awt.Color.gray));
  
      jP_Non_markovian_models.add (jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints (335, 240, 1, 105));
  

    add (jP_Non_markovian_models, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 10, 550, 395));

}//GEN-END:initComponents

  private void jTB_GTHStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_GTHStateChanged
    boolean state = jTB_GTH.isSelected();

    jTF_Max_Iterations.setEnabled(!state);
    jL_Max_Iterations.setEnabled(!state);
  }//GEN-LAST:event_jTB_GTHStateChanged


  private void jB_Remove_AllActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Remove_AllActionPerformed
      //remove from jList with the names
      selected_var_names.removeAllElements();
      jL_selected_variables.setListData(selected_var_names);
      //remove from jList with the numbers
      selected_var_numbers.removeAllElements();
      jB_Remove.setEnabled(false);
      jB_Remove_All.setEnabled(false);

  }//GEN-LAST:event_jB_Remove_AllActionPerformed

  private void jB_RemoveActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_RemoveActionPerformed
      if (!(jL_selected_variables.isSelectionEmpty())){
      int index = jL_selected_variables.getSelectedIndex();
      //remove from jList with the names
      selected_var_names.remove(jL_selected_variables.getSelectedValue());
      jL_selected_variables.setListData(selected_var_names);
      //remove from jList with the numbers
      selected_var_numbers.remove(index);
      if (selected_var_names.size() == 0) {
        jB_Remove.setEnabled(false);
        jB_Remove_All.setEnabled(false);
      }
    }

  }//GEN-LAST:event_jB_RemoveActionPerformed

  private void jB_ClearActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ClearActionPerformed
   jTF_variables.setText("");
   var_numbers = "";

  }//GEN-LAST:event_jB_ClearActionPerformed

  private void jB_AddActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_AddActionPerformed

    if (jTF_variables.getText().compareTo("")!=0) {
      if (!selected_var_names.contains(jTF_variables.getText())){
        selected_var_names.add(jTF_variables.getText());
        selected_var_numbers.add(var_numbers);
        jL_selected_variables.setListData(selected_var_names);
        jB_ClearActionPerformed (null);
        jB_Remove.setEnabled(true);
       jB_Remove_All.setEnabled(true);
      }
    }

  }//GEN-LAST:event_jB_AddActionPerformed

  private void jL_Choose_VariableMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_Choose_VariableMouseClicked
      if (!(jL_Choose_Variable.isSelectionEmpty())) {
      if (jTF_variables.getText().compareTo("")!=0) {
        //verify if this variable was chosen before
        String vars = var_numbers, selected_var = Integer.toString(jL_Choose_Variable.getSelectedIndex()+1);
        int index = vars.indexOf(' ');
        while (index != -1) {
           if (vars.substring(0,index).compareTo(selected_var) == 0) return;
           vars = vars.substring(index+1);
           index = vars.indexOf(' ');
        }
        if (vars.compareTo(selected_var) == 0) return;
      }
      if (jTF_variables.getText().compareTo("") == 0) {
        jTF_variables.setText((String)jL_Choose_Variable.getSelectedValue());
        var_numbers = Integer.toString(jL_Choose_Variable.getSelectedIndex()+1);
      }
      else {
        jTF_variables.setText(jTF_variables.getText()+ " " +jL_Choose_Variable.getSelectedValue());
        var_numbers += " " + Integer.toString(jL_Choose_Variable.getSelectedIndex()+1);
      }
    }

  }//GEN-LAST:event_jL_Choose_VariableMouseClicked
  private void initComponentsManual()
  {
    javax.swing.ButtonGroup solutiongroup = new javax.swing.ButtonGroup();
    solutiongroup.add(jTB_GTH);
    solutiongroup.add(jTB_Power);
    solutiongroup.add(jTB_SOR);

    java.io.File arq_embed = new java.io.File(modelenv.curmodel + ".NM.chns_betw_embed_pnts");
    if (arq_embed.exists()) {
      //initiate list of vars for Non-markovian models solution
      //read file .vstat and put the variables names in vector
      can_solve = true;
      variables            = new java.util.Vector();
      selected_var_names   = new java.util.Vector();
      selected_var_numbers = new java.util.Vector();
      try {
        int    p;
        String line;
        java.io.FileReader     f  = new java.io.FileReader (modelenv.curmodel + ".vstat");
        java.io.BufferedReader b  = new java.io.BufferedReader (f);

        while ((line = b.readLine()) != null) {
             variables.add(line);
        }
      }
      catch (java.io.IOException e) {
        javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + e.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }
      //associate vector to jList
      jL_Choose_Variable.setListData(variables);
      jL_selected_variables.setListData(selected_var_names);
    }

  }

  public void Evaluate()
  {
    String command;

    if (!can_solve) {
      javax.swing.JOptionPane.showMessageDialog(this,"Your model doesn't have determinist event.\nUse another method.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    java.util.Vector OptionalFields = new java.util.Vector();
    OptionalFields.add(jTF_variables);

    if (T2functions.Is_some_field_missing(jP_Non_markovian_models,OptionalFields))
      return;

    if (!T2functions.Is_Precision_valid(jTF_Precision.getText(), this))
      return;

    if( !jTB_GTH.isSelected() )
      if (T2functions.Is_not_number(jTF_Max_Iterations.getText(),1,this,"Max number of iterations") != 0)
        return;

    //verify interest measures
    int size = selected_var_numbers.size();

    if (size == 0) {
        javax.swing.JOptionPane.showMessageDialog(this,"You must choose the interest measures.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }

    //must create the Interest measures File
    try {
        java.io.FileWriter     file   = new java.io.FileWriter( modelenv.curdir + "/" + modelenv.curmodel + ".NM.interest_measures");
        java.io.BufferedWriter buffer = new java.io.BufferedWriter(file);
        int index = 0;
        while (index < size) {
         buffer.write( "-1 " + selected_var_numbers.elementAt(index) + "\n" );
         index++;
        }
        buffer.close();
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this,"Can't create the file "+ modelenv.curmodel+".NM.interest_measures.\nError -- "+e.toString(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }

    //must create Parameters File with print options
    try {
        java.io.FileWriter     parametersfile   = new java.io.FileWriter( modelenv.curdir + "/" + modelenv.curmodel + ".NM.parameters");
        java.io.BufferedWriter parametersbuffer = new java.io.BufferedWriter(parametersfile);
        String print_chain = "no";
        String print_probs = "no";
        if (jTB_print_embedded_chain.isSelected()) print_chain = "yes";
        if (jTB_print_state_probs.isSelected()) print_probs = "yes";
        parametersbuffer.write(print_chain + "\n" + print_probs);
        parametersbuffer.close();
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this,"Can't create the file "+ modelenv.curmodel+".NM.parameters.\nError -- "+e.toString(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }

    String solution = "";
    if (jTB_GTH.isSelected()) solution = " g";
    else if (jTB_Power.isSelected()) solution = " p "+ jTF_Max_Iterations.getText();
    else solution = " s " + jTF_Max_Iterations.getText();

    command = "solv " + modelenv.curmodel + " 11 " + jTF_Precision.getText() + solution;

    //call solv program
    modelenv.analytical.setEnabled(false);
    status = new T2status( modelenv.analytical, "Solver Status", "Solv is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
    status.show();
    status.start();
  }

  public String Get_Method_Name() {
    return "Non-Markovian models";
  }

  public void KillChild()
  {
    if( status != null )
    {
      status.Proc.destroy();
      status.dispose();
    }
  }


// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel jP_Non_markovian_models;
private javax.swing.JLabel jL_Solution_Method;
private javax.swing.JPanel jP_Interest_Measures;
private javax.swing.JScrollPane jSP_Choose_Variables;
private javax.swing.JList jL_Choose_Variable;
private javax.swing.JLabel jL_Choose_Variables;
private javax.swing.JTextField jTF_variables;
private javax.swing.JLabel jL_variables;
private javax.swing.JButton jB_Add;
private javax.swing.JButton jB_Clear;
private javax.swing.JScrollPane jSP_selected_variables;
private javax.swing.JList jL_selected_variables;
private javax.swing.JButton jB_Remove;
private javax.swing.JButton jB_Remove_All;
private javax.swing.JLabel jL_Interest_Measures;
private javax.swing.JLabel jLabel1;
private javax.swing.JLabel jLabel2;
private javax.swing.JPanel jP_Solution_Method;
private javax.swing.JToggleButton jTB_GTH;
private javax.swing.JToggleButton jTB_Power;
private javax.swing.JLabel jL_GTH;
private javax.swing.JToggleButton jTB_SOR;
private javax.swing.JLabel jL_Power;
private javax.swing.JLabel jL_SOR;
private javax.swing.JLabel jL_Max_Iterations;
private javax.swing.JTextField jTF_Max_Iterations;
private javax.swing.JLabel jL_Precision;
private javax.swing.JTextField jTF_Precision;
private javax.swing.JPanel jP_Separator_1;
private javax.swing.JPanel jP_Separator_2;
private javax.swing.JPanel jP_Print_Options;
private javax.swing.JToggleButton jTB_print_embedded_chain;
private javax.swing.JToggleButton jTB_print_state_probs;
private javax.swing.JLabel jL_print_embedded_chain;
private javax.swing.JLabel jL_print_state_probs_1;
private javax.swing.JLabel jL_print_state_probs_2;
private javax.swing.JLabel jL_print_options;
private javax.swing.JPanel jPanel1;
// End of variables declaration//GEN-END:variables
  private T2modelenv modelenv;
  private java.util.Vector variables, selected_var_numbers, selected_var_names;
  private String var_numbers = "";
  private boolean can_solve = false;
  private T2status status;
}
