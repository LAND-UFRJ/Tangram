/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

/******************************************************************************
 *
 *      Change Log:
 *
 *	Last Modifications:
 *          Hugo Sato: 25 Jan 2004 - Delay Measuring implemented
 *          Hugo Sato: 14 Fev 2004 - Band Capacity Implemented
 *          Hugo Sato: 17 Fev 2004 - Code Cleaned
 *
 *           ~~~~~~~~~~~~ DONT FORGET THE PROGRAMMING RULES ~~~~~~~~~~~~
 *
 *
 *	Tool: Traffic Generator Interface
 *	LAND - UFRJ/COPPE/COS      
 *
 ******************************************************************************/

package Tangram2;

public class T2traffic_measures extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2traffic_measures( javax.swing.JFrame holder ) {
    Holder = holder;
    Holder.setEnabled( false );

    directory = ".";

    initComponents ();
    initComponentsManual();

    pack ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jP_TrafficMeasures = new javax.swing.JPanel();
        jL_Traff_Measures_File_Name = new javax.swing.JLabel();
        jTF_Traff_Measures_File_Name = new javax.swing.JTextField();
        jCB_Loss = new javax.swing.JCheckBox();
        jCB_Jitter = new javax.swing.JCheckBox();
        jCB_Throughput = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jB_FileChooser = new javax.swing.JButton();
        jL_jitter = new javax.swing.JLabel();
        jTF_Traff_Measures_Time_Interval = new javax.swing.JTextField();
        jCB_Success = new javax.swing.JCheckBox();
        jCB_Delay = new javax.swing.JCheckBox();
        jCB_Band_Capacity = new javax.swing.JCheckBox();
        jCB_Buffer_Size = new javax.swing.JCheckBox();
        jCB_Drop_Rate = new javax.swing.JCheckBox();
        jL_Remote_Trace_File = new javax.swing.JLabel();
        jTF_Remote_Traff_Measures_File_Name = new javax.swing.JTextField();
        jB_Remote_FileChooser = new javax.swing.JButton();
        jB_Evaluate = new javax.swing.JButton();
        jB_Plot = new javax.swing.JButton();
        jB_Close = new javax.swing.JButton();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLWorkingDirectory = new javax.swing.JLabel();
        jLDirectory = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jB_ChangeDir = new javax.swing.JButton();
        jB_Generate_Object = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Measures of Traffic Generation]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jP_TrafficMeasures.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_TrafficMeasures.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Traff_Measures_File_Name.setText("Primary Trace File:");
        jL_Traff_Measures_File_Name.setToolTipText("File with trace");
        jL_Traff_Measures_File_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_TrafficMeasures.add(jL_Traff_Measures_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, -1));

        jTF_Traff_Measures_File_Name.setEditable(false);
        jTF_Traff_Measures_File_Name.setToolTipText("File with trace");
        jP_TrafficMeasures.add(jTF_Traff_Measures_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 310, 20));

        jCB_Loss.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Loss.setToolTipText("Loss");
        jCB_Loss.setLabel("Loss");
        jP_TrafficMeasures.add(jCB_Loss, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, -1));

        jCB_Jitter.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Jitter.setToolTipText("Jitter");
        jCB_Jitter.setEnabled(false);
        jCB_Jitter.setLabel("Jitter");
        jCB_Jitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_JitterActionPerformed(evt);
            }
        });

        jP_TrafficMeasures.add(jCB_Jitter, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, -1, -1));

        jCB_Throughput.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Throughput.setToolTipText("Throughput");
        jCB_Throughput.setLabel("Throughput");
        jCB_Throughput.setMaximumSize(new java.awt.Dimension(101, 21));
        jP_TrafficMeasures.add(jCB_Throughput, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, -1, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel3.setText("Measure Options:");
        jP_TrafficMeasures.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jB_FileChooser.setToolTipText("Click here to choose primary trace file");
        jB_FileChooser.setLabel("...");
        jB_FileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FileChooserActionPerformed(evt);
            }
        });

        jP_TrafficMeasures.add(jB_FileChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 20, 22, 20));

        jL_jitter.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_jitter.setText("Interval (usec):");
        jL_jitter.setToolTipText("Interval between packets");
        jL_jitter.setEnabled(false);
        jP_TrafficMeasures.add(jL_jitter, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 90, -1));

        jTF_Traff_Measures_Time_Interval.setToolTipText("Interval between packets");
        jTF_Traff_Measures_Time_Interval.setEnabled(false);
        jP_TrafficMeasures.add(jTF_Traff_Measures_Time_Interval, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 90, 20));

        jCB_Success.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Success.setText("Success");
        jCB_Success.setToolTipText("Success");
        jCB_Success.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_SuccessActionPerformed(evt);
            }
        });

        jP_TrafficMeasures.add(jCB_Success, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, -1, -1));

        jCB_Delay.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Delay.setText("Delay");
        jCB_Delay.setToolTipText("Delay, this measure uses two trace files: Primary and Second");
        jCB_Delay.setEnabled(false);
        jCB_Delay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_DelayActionPerformed(evt);
            }
        });

        jP_TrafficMeasures.add(jCB_Delay, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, -1, -1));

        jCB_Band_Capacity.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Band_Capacity.setText("Band Capacity");
        jCB_Band_Capacity.setToolTipText("Band Capacity");
        jCB_Band_Capacity.setEnabled(false);
        jP_TrafficMeasures.add(jCB_Band_Capacity, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        jCB_Buffer_Size.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Buffer_Size.setText("Buffer Size");
        jCB_Buffer_Size.setToolTipText("Buffer Size");
        jCB_Buffer_Size.setEnabled(false);
        jP_TrafficMeasures.add(jCB_Buffer_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, -1, -1));

        jCB_Drop_Rate.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Drop_Rate.setText("Drop Rate");
        jCB_Drop_Rate.setToolTipText("Drop Rate");
        jCB_Drop_Rate.setEnabled(false);
        jP_TrafficMeasures.add(jCB_Drop_Rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, -1, -1));

        jL_Remote_Trace_File.setText("Second. Trace File:");
        jL_Remote_Trace_File.setToolTipText("File with second trace, used for Delay Measuring");
        jL_Remote_Trace_File.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Remote_Trace_File.setEnabled(false);
        jP_TrafficMeasures.add(jL_Remote_Trace_File, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jTF_Remote_Traff_Measures_File_Name.setToolTipText("File with second trace, used for Delay Measuring");
        jTF_Remote_Traff_Measures_File_Name.setEditable(false);
        jTF_Remote_Traff_Measures_File_Name.setEnabled(false);
        jP_TrafficMeasures.add(jTF_Remote_Traff_Measures_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 45, 310, 20));

        jB_Remote_FileChooser.setToolTipText("Click here to choose second trace file");
        jB_Remote_FileChooser.setLabel("...");
        jB_Remote_FileChooser.setEnabled(false);
        jB_Remote_FileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Remote_FileChooserActionPerformed(evt);
            }
        });

        jP_TrafficMeasures.add(jB_Remote_FileChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 45, 22, 20));

        getContentPane().add(jP_TrafficMeasures, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 480, 250));

        jB_Evaluate.setToolTipText("Evaluate measures");
        jB_Evaluate.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Evaluate.setText("Evaluate");
        jB_Evaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_EvaluateActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Evaluate, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 120, 30));

        jB_Plot.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Plot.setText("Plot");
        jB_Plot.setToolTipText("Plot Traffic Measures");
        jB_Plot.setEnabled(false);
        jB_Plot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PlotActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Plot, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 90, 120, 30));

        jB_Close.setToolTipText("Close this window");
        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setText("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 170, 120, 30));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jLWorkingDirectory.setFont(new java.awt.Font("Dialog", 1, 10));
        jLWorkingDirectory.setText("Working Directory:");
        jLWorkingDirectory.setToolTipText("Directory with traffic measures and trace files");
        jPanel3.add(jLWorkingDirectory, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        jPanel3.add(jLDirectory, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 450, 20));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 610, 20));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 240, -1, -1));

        jB_ChangeDir.setToolTipText("Change Directory with Trace Files and Traffic Measures");
        jB_ChangeDir.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_ChangeDir.setLabel("Change Dir");
        jB_ChangeDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ChangeDirActionPerformed(evt);
            }
        });

        getContentPane().add(jB_ChangeDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, 120, 30));

        jB_Generate_Object.setToolTipText("Generate Object");
        jB_Generate_Object.setFont(new java.awt.Font("Dialog", 1, 9));
        jB_Generate_Object.setText("Generate Obj");
        jB_Generate_Object.setEnabled(false);
        getContentPane().add(jB_Generate_Object, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 130, 120, 30));

    }//GEN-END:initComponents

    private void jB_Remote_FileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Remote_FileChooserActionPerformed
    
    java.lang.String line = "";
    
    java.io.File f = new java.io.File(directory);

    javax.swing.filechooser.FileFilter objFilter2;    
    objFilter2 = new javax.swing.filechooser.FileFilter() 
    {
        public boolean accept( java.io.File f )
        {
            return ((f.getName()).indexOf(".TwoWay.") != -1 && 
                   ((f.getName()).endsWith(".trafftrace") || 
                   (f.getName()).endsWith(".trafftrace.gz")));
        }
        public String getDescription( )
        {
            return "Two Way Trace Files";
        }
    };    
    fchooser.setDialogTitle("Choose Remote Trace File");
    fchooser.setFileFilter( objFilter2 );
    fchooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

    int retval = fchooser.showDialog(this,"Select");  // shows the file chooser

    if(retval == javax.swing.JFileChooser.APPROVE_OPTION)
    {
        jTF_Remote_Traff_Measures_File_Name.setText((fchooser.getSelectedFile()).getAbsolutePath());
        enable_measures();
    }
    
    }//GEN-LAST:event_jB_Remote_FileChooserActionPerformed

    private void jCB_DelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_DelayActionPerformed
  /*    
   boolean state = jCB_Delay.isSelected();
        jL_Remote_Trace_File.setEnabled( state );
        jTF_Remote_Traff_Measures_File_Name.setEnabled( state );
        jTF_Remote_Traff_Measures_File_Name.setEditable( state );
        jB_Remote_FileChooser.setEnabled( state );  
   */ 
    /*   
    if( jTF_Traff_Measures_File_Name.getText().endsWith( ".TwoWay.PacketPair.trafftrace" ) &&
        jTF_Remote_Traff_Measures_File_Name.getText().endsWith( ".TwoWay.PacketPair.trafftrace" ) ) 
        if( jCB_Delay.isSelected() ) 
            jCB_Band_Capacity.setSelected( true );
        else 
            jCB_Band_Capacity.setSelected( false );     
    
      */  
    }//GEN-LAST:event_jCB_DelayActionPerformed

  private void jCB_SuccessActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_SuccessActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jCB_SuccessActionPerformed

  private void jB_ChangeDirActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ChangeDirActionPerformed
  
    fchooser.setFileFilter( null );
    fchooser.setDialogTitle("Choose Work Directory");
    fchooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

    int retval = fchooser.showDialog(this,"Select");  // shows the file chooser

    if(retval == javax.swing.JFileChooser.APPROVE_OPTION)
    {
        java.io.File f = fchooser.getCurrentDirectory();
        directory = f.getAbsolutePath() + "/" + fchooser.getSelectedFile().getName();
        fchooser.setCurrentDirectory( new java.io.File (directory) );
        jLDirectory.setText(directory);
    }
    enable_plot();
  }//GEN-LAST:event_jB_ChangeDirActionPerformed

  private void jCB_JitterActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_JitterActionPerformed
    boolean state = jCB_Jitter.isSelected();
    jTF_Traff_Measures_Time_Interval.setEnabled(state);
    jL_jitter.setEnabled(state);
  }//GEN-LAST:event_jCB_JitterActionPerformed

  private void jB_EvaluateActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_EvaluateActionPerformed
    
    boolean ok = false,
            debug = true;

    String input_tracename = jTF_Traff_Measures_File_Name.getText().trim();
    String input_remote_tracename = 
                      jTF_Remote_Traff_Measures_File_Name.getText().trim();

    String local_directory;
    local_directory = (String) System.getProperty( "TANGRAM2_HOME","." );

    if( local_directory.length() > 1 )
    {
        if( local_directory.lastIndexOf("/") != local_directory.length() - 1 ) 
            local_directory += "/";
      
        local_directory += "bin/";
    }
    else
        local_directory = "./";

    if( debug )
        System.err.println( "\nUsing environment variable TANGRAM2_HOME=" + local_directory );    
    
    //-- Parameters Verification 
    {
        if ( input_tracename.compareTo("") == 0)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"You must choose primary trace input file.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if( jL_Remote_Trace_File.isEnabled() && 
                 input_remote_tracename.compareTo("") == 0)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"You must choose secondary trace input file.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if( jL_Remote_Trace_File.isEnabled() && 
                 input_remote_tracename.compareTo( input_tracename ) == 1 )
        {
            javax.swing.JOptionPane.showMessageDialog(this,"You must choose diferents traces files.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!jCB_Loss.isSelected() && !jCB_Jitter.isSelected() && 
            !jCB_Throughput.isSelected() && !jCB_Success.isSelected() &&
            !jCB_Band_Capacity.isSelected() && !jCB_Buffer_Size.isSelected() &&
            !jCB_Delay.isSelected() && !jCB_Drop_Rate.isSelected() )
        {
            javax.swing.JOptionPane.showMessageDialog(this,"You must select at least one measure.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
    }    
    //-- End of parameters verification 
                      
    
    if (jCB_Loss.isSelected() || jCB_Jitter.isSelected() 
       || jCB_Throughput.isSelected() || jCB_Success.isSelected() )
    // Single trace evaluation 
    {
    
        String time_interval = jTF_Traff_Measures_Time_Interval.getText().trim();
    
        if (jCB_Jitter.isSelected() && (time_interval.compareTo("") == 0))
        {
            javax.swing.JOptionPane.showMessageDialog(this,"You must provide a time interval if you want to measure jitter.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        java.util.Vector cmdpars = new java.util.Vector();         // stores the command line arguments 
        cmdpars.add("bash");
        cmdpars.add("-c");

        String command = "";

        // The output will be generated in the same directory where the trace file is found 
        command = "pushd " + directory + ";";

        if( input_tracename.endsWith( ".gz" ) )
            command += "zcat " + input_tracename + " | ";  //this is a pipe, the stdout of zcat is the stdin of traffmeasures
        command += local_directory + "traffmeasures";
        command += " -" + (jCB_Loss.isSelected()?"l":"") + (jCB_Success.isSelected()?"s":"") + (jCB_Jitter.isSelected()?"j":"")  + (jCB_Throughput.isSelected()?"t":"");
        
        if( input_tracename.endsWith( ".gz" ) )
            command += " /dev/stdin";
        else
            command += " " + input_tracename;
        
        if (jCB_Jitter.isSelected())
            command += " " + time_interval;
        
        command += " -o ";
        command += input_tracename + ";";

        if( jL_Remote_Trace_File.isEnabled() ) 
            //There will be two evaluations if there is two trace files
        {        
            if( input_remote_tracename.endsWith( ".gz" ) )
                command += "zcat " + input_remote_tracename + " | ";  
                //this is a pipe, the stdout of zcat is the stdin of traffmeasures
            command += local_directory + "traffmeasures";
            command += " -" + (jCB_Loss.isSelected()?"l":"") 
                            + (jCB_Success.isSelected()?"s":"") 
                            + (jCB_Jitter.isSelected()?"j":"")  
                            + (jCB_Throughput.isSelected()?"t":"");
        
            if( input_tracename.endsWith( ".gz" ) )
                command += " /dev/stdin";
            else
                command += " " + input_remote_tracename;
        
            if (jCB_Jitter.isSelected())
                command += " " + time_interval;
        
            command += " -o ";
            command += input_remote_tracename + "; ";         
        }      
        
        // Returning to the original path
        command += "popd;";
        
        if( debug )
            System.err.println( command );

        cmdpars.add(command);
        

        int size = cmdpars.size();

        String [] parsarray = new String[size];

        cmdpars.copyInto(parsarray);

        try
        {
            Process measuresproc;
            measuresproc = Runtime.getRuntime().exec(parsarray);

            int retval = measuresproc.waitFor();
            if (retval != 255)
                ok = true;                
            else    
                javax.swing.JOptionPane.showMessageDialog(this,"Error in measures generation");
        }
        catch(Exception e)
        {
            System.out.println("Exception running " + e.toString());
            System.out.println(cmdpars);
        }
    }
     
    //-- Band Evaluation
    if( jCB_Band_Capacity.isSelected() )
    if( jTF_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.PacketPair.trafftrace" ) > 0 &&
        jTF_Remote_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.PacketPair.trafftrace" ) > 0  )        
        // Delay Measure for Packet Pair is evaluated with Band Capacity
        // Band Capacity Evaluation of Two Way - Packet Pair - trace
    {           
            java.util.Vector cmdpars2 = new java.util.Vector();         
            cmdpars2.add("bash");
            cmdpars2.add("-c");
            
            String band_command = "";
            
            // The output will be generated in the same directory where the trace file is found 
            band_command = "pushd " + directory + ";";
        
            // the local trace file may be compressed 
            if( input_tracename.endsWith( ".gz" ) ) 
            {
                band_command += "gzip -d " + input_tracename + ";";
                input_tracename = 
                    input_tracename.substring( 0 , input_tracename.indexOf( ".gz" ) );
                System.err.println( input_tracename + " decompressed" );
            }
            
            // the remote trace file may be compressed 
            if( input_remote_tracename.endsWith( ".gz" ) ) 
            {
                band_command += "gzip -d " + input_remote_tracename + ";";
                input_remote_tracename = 
                    input_remote_tracename.substring( 0 , input_remote_tracename.indexOf( ".gz" ) );
                System.err.println( input_remote_tracename + " decompressed" );
            }
            
            //Assembling command line
            band_command += local_directory.trim() + "linear " 
                          + input_tracename + ";";
            band_command += local_directory.trim() + "linear " 
                          + input_remote_tracename + ";";
            band_command += local_directory.trim() + "verif_loss " 
                          + input_tracename + ".skew;";            
            band_command += local_directory.trim() + "verif_loss " 
                          + input_remote_tracename + ".skew;";            
            band_command += local_directory.trim() + "offset " 
                          + input_tracename + ".skew;";            
            band_command += local_directory.trim() + "offset " 
                          + input_remote_tracename + ".skew;";                        
            band_command += local_directory.trim() + "offset " 
                          + input_tracename + ".skew.ok;";            
            band_command += local_directory.trim() + "offset " 
                          + input_remote_tracename + ".skew.ok;";
            band_command += local_directory.trim() + "offset " 
                          + input_tracename + ".skew.loss;";            
            band_command += local_directory.trim() + "offset " 
                          + input_remote_tracename + ".skew.loss;";                        
            band_command += local_directory.trim() + "linear -L " 
                          + input_tracename + ".skew.offset " 
                          + input_remote_tracename + ".skew.offset;";                        
            band_command += local_directory.trim() + "linear -P " 
                          + input_tracename + ".skew.ok.offset " 
                          + input_remote_tracename + ".skew.ok.offset;";            
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_tracename + ".1.pair;"; 
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_tracename + ".2.pair;"; 
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_tracename + ".3.pair;"; 
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_tracename + ".4.pair;"; 
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_remote_tracename + ".1.pair;"; 
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_remote_tracename + ".2.pair;"; 
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_remote_tracename + ".3.pair;"; 
            band_command += local_directory.trim() + "row -2 -p " 
                          + input_remote_tracename + ".4.pair;"; 
            band_command += local_directory.trim() + "band " 
                          + input_tracename + ";"; 
            band_command += local_directory.trim() + "band " 
                          + input_remote_tracename + ";";
            
            band_command += "rm -f *eq* *stack* *x *offset* *skew* *cml* *cmp* "
                          + input_tracename + ".[1-4].pair* " 
                          + input_remote_tracename + ".[1-4].pair*;";
            
            if( jCB_Delay.isSelected() )
            {
                band_command += "mv -f " + input_tracename + ".1.trace " 
                             + input_tracename + ".1.TM.delay_trace;";
                band_command += "mv -f " + input_tracename + ".2.trace " 
                             + input_tracename + ".2.TM.delay_trace;";
                band_command += "mv -f " + input_tracename + ".3.trace " 
                             + input_tracename + ".3.TM.delay_trace;";
                band_command += "mv -f " + input_tracename + ".4.trace " 
                             + input_tracename + ".4.TM.delay_trace;";
            
                band_command += "mv -f " + input_remote_tracename + ".1.trace " 
                             + input_remote_tracename + ".1.TM.delay_trace;";
                band_command += "mv -f " + input_remote_tracename + ".2.trace " 
                             + input_remote_tracename + ".2.TM.delay_trace;";
                band_command += "mv -f " + input_remote_tracename + ".3.trace " 
                             + input_remote_tracename + ".3.TM.delay_trace;";
                band_command += "mv -f " + input_remote_tracename + ".4.trace " 
                             + input_remote_tracename + ".4.TM.delay_trace;";
            }
            else
            band_command += "rm -f "+ input_tracename + ".[1-4].trace " 
                          + input_remote_tracename + ".[1-4].trace;";
/*            
            if( !jCB_Band_Capacity.isSelected() )
            band_command += "rm -f "+ input_tracename + ".band* " 
                          + input_remote_tracename + ".band*;";*/
            
            // Returning to the original path
            band_command += "popd;";
            
            if( debug )
                System.err.println( band_command );
                
            cmdpars2.add(band_command);

            String [] parsarray2 = new String[cmdpars2.size()];

            cmdpars2.copyInto(parsarray2);

            try
            {
                Process bandproc;
                bandproc = Runtime.getRuntime().exec(parsarray2);

                int retval = bandproc.waitFor();
                if (retval != 255)
                    ok = true;
                else
                    javax.swing.JOptionPane.showMessageDialog(this,"Error in band measure evaluation");
            }
            catch(Exception e)
            {
                System.out.println("Exception running " + e.toString());
                System.out.println(cmdpars2); 
            }            
    }
    else if( jTF_Traff_Measures_File_Name.getText().indexOf( ".RTT.PacketPair.trafftrace" ) > 0) 
        // Band Capacity Evaluation of RTT - Packet Pair - trace
    {       
            java.util.Vector cmdpars2 = new java.util.Vector();         
            cmdpars2.add("bash");
            cmdpars2.add("-c");
            
            String band_command = "";
            
            // The output will be generated in the same directory where the trace file is found 
            band_command = "pushd " + directory + ";";
        
            // the local trace file may be compressed 
            if( input_tracename.endsWith( ".gz" ) ) 
            {
                band_command += "gzip -d " + input_tracename + ";";
                input_tracename = 
                    input_tracename.substring( 0 , input_tracename.indexOf( ".gz" ) );
                System.err.println( input_tracename + " decompressed" );
            }
            
            // the remote trace file may be compressed 
            if( input_remote_tracename.endsWith( ".gz" ) ) 
            {
                band_command += "gzip -d " + input_remote_tracename + ";";
                input_remote_tracename = 
                    input_remote_tracename.substring( 0 , input_remote_tracename.indexOf( ".gz" ) );
                System.err.println( input_remote_tracename + " decompressed" );
            }
            
            //Assembling command line
            band_command += local_directory.trim() + "verif_loss " 
                         + input_tracename + ";";
            band_command += "cp " + input_tracename + " " + input_tracename + ".4.pair;";
            band_command += local_directory.trim() + "row -2 -p " 
                         + input_tracename + ".4.pair;"; 
            band_command += local_directory.trim() + "band " 
                         + input_tracename + ";";
            
            band_command += "rm -f *eq* *stack* *x *offset* *skew* *cml* *cmp* "
                         + input_tracename + ".[1-4].pair*;";
                                     
            
            // Returning to the original path
            band_command += "popd;";
            
            if( debug )
                System.err.println( band_command );
            
            cmdpars2.add(band_command);

            String [] parsarray2 = new String[cmdpars2.size()];

            cmdpars2.copyInto(parsarray2);

            try
            {
                Process bandproc;
                bandproc = Runtime.getRuntime().exec(parsarray2);

                int retval = bandproc.waitFor();
                if (retval != 255)
                    ok = true;
                else
                    javax.swing.JOptionPane.showMessageDialog(this,"Error in band measure evaluation");
            }
            catch(Exception e)
            {
                System.out.println("Exception running " + e.toString());
                System.out.println(cmdpars2); 
            }            
    }                      
    else
    {
        javax.swing.JOptionPane.showMessageDialog(this,"Invalid trace file for Band Capacity Evaluation");
    }

    //-- End of Band Eval
                 
    //-- Delay Evaluation
    if( jCB_Delay.isSelected() )
    if( jTF_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.CBR.trafftrace" ) > 0 &&
        jTF_Remote_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.CBR.trafftrace" ) > 0 ) 
        // Delay Evaluation of Two Way - CBR trace
    {       
            java.util.Vector cmdpars2 = new java.util.Vector();         
            cmdpars2.add("bash");
            cmdpars2.add("-c");
            
            String delay_command = "";
            
            // The output will be generated in the same directory where the trace file is found 
            delay_command = "pushd " + directory + ";";
        
            // the local trace file may be compressed 
            if( input_tracename.endsWith( ".gz" ) ) 
            {
                delay_command += "gzip -d " + input_tracename + ";";
                input_tracename = 
                    input_tracename.substring( 0 , input_tracename.indexOf( ".gz" ) );
                System.err.println( input_tracename + " decompressed" );
            }            
            // the remote trace file may be compressed 
            if( input_remote_tracename.endsWith( ".gz" ) ) 
            {
                delay_command += "gzip -d " + input_remote_tracename + ";";
                input_remote_tracename = 
                    input_remote_tracename.substring( 0 , input_remote_tracename.indexOf( ".gz" ) );
                System.err.println( input_remote_tracename + " decompressed" );
            }
            delay_command += local_directory + "shift "
                             + input_tracename + input_remote_tracename + ";";
            
            delay_command += local_directory + "shift "
                             + input_remote_tracename + input_tracename + ";";
            
            delay_command += local_directory + "linear " 
                             + input_tracename + " > " 
                             + input_tracename + ".delay.result;";            
            
            delay_command += local_directory + "linear " 
                             + input_remote_tracename + " > " 
                             + input_remote_tracename + ".delay.result ;";
            
            delay_command += local_directory + "offset " 
                             + input_remote_tracename + ".skew ;";
            
            delay_command += local_directory + "offset " 
                             + input_tracename + ".skew ;";
            
            delay_command += local_directory + "linear " 
                             + input_tracename + ".skew.offset" + " " 
                             + input_remote_tracename + ".skew.offset > " 
                             + "temp.offset.result;";
            
            delay_command += "cat " + "temp.offset.result >> " 
                             + input_tracename + ".delay.result;";
            delay_command += "cat " + "temp.offset.result >> " 
                             + input_remote_tracename + ".delay.result ;";            
            
            delay_command += "rm -f " + input_tracename + ".eq "
                             + input_tracename + ".s* " + input_remote_tracename
                             + ".eq "+ input_remote_tracename + ".s* "
                             + "temp.offset.result;";
            
            delay_command += "mv -f " + input_tracename + ".1.trace " 
                             + input_tracename + ".1.TM.delay_trace;";
            delay_command += "mv -f " + input_tracename + ".2.trace " 
                             + input_tracename + ".2.TM.delay_trace;";
            delay_command += "mv -f " + input_tracename + ".3.trace " 
                             + input_tracename + ".3.TM.delay_trace;";
            delay_command += "mv -f " + input_tracename + ".4.trace " 
                             + input_tracename + ".4.TM.delay_trace;";
            
            delay_command += "mv -f " + input_remote_tracename + ".1.trace " 
                             + input_remote_tracename + ".1.TM.delay_trace;";
            delay_command += "mv -f " + input_remote_tracename + ".2.trace " 
                             + input_remote_tracename + ".2.TM.delay_trace;";
            delay_command += "mv -f " + input_remote_tracename + ".3.trace " 
                             + input_remote_tracename + ".3.TM.delay_trace;";
            delay_command += "mv -f " + input_remote_tracename + ".4.trace " 
                             + input_remote_tracename + ".4.TM.delay_trace;";
            
            // Returning to the original path 
            delay_command += "popd;";                 
            
            if( debug )
                System.err.println( delay_command );
            
            cmdpars2.add(delay_command);

            String [] parsarray2 = new String[cmdpars2.size()];

            cmdpars2.copyInto(parsarray2);

            try
            {
                Process delayproc;
                delayproc = Runtime.getRuntime().exec(parsarray2);

                int retval = delayproc.waitFor();
                if (retval != 255)
                    ok = true;
                else
                    javax.swing.JOptionPane.showMessageDialog(this,"Error in delay measure evaluation");
            }
            catch(Exception e)
            {
                System.out.println("Exception running " + e.toString());
                System.out.println(cmdpars2);
            }
            
    }
    else if( jTF_Traff_Measures_File_Name.getText().endsWith( ".TwoWay.PacketPair.trafftrace" ) &&
             jTF_Remote_Traff_Measures_File_Name.getText().endsWith( ".TwoWay.PacketPair.trafftrace" ) )         
    {           
            java.util.Vector cmdpars2 = new java.util.Vector();         
            cmdpars2.add("bash");
            cmdpars2.add("-c");
            
            String delay_command = "";
            
            // The output will be generated in the same directory where the trace file is found 
            delay_command = "pushd " + directory + ";";
        
            // the local trace file may be compressed 
            if( input_tracename.endsWith( ".gz" ) ) 
            {
                delay_command += "gzip -d " + input_tracename + ";";
                input_tracename = 
                    input_tracename.substring( 0 , input_tracename.indexOf( ".gz" ) );
                System.err.println( input_tracename + " decompressed" );
            }
            
            // the remote trace file may be compressed 
            if( input_remote_tracename.endsWith( ".gz" ) ) 
            {
                delay_command += "gzip -d " + input_remote_tracename + ";";
                input_remote_tracename = 
                    input_remote_tracename.substring( 0 , input_remote_tracename.indexOf( ".gz" ) );
                System.err.println( input_remote_tracename + " decompressed" );
            }
            
            //Assembling command line
            delay_command += local_directory.trim() + "linear " 
                          + input_tracename + ";";
            delay_command += local_directory.trim() + "linear " 
                          + input_remote_tracename + ";";
            delay_command += local_directory.trim() + "verif_loss " 
                          + input_tracename + ".skew;";            
            delay_command += local_directory.trim() + "verif_loss " 
                          + input_remote_tracename + ".skew;";            
            delay_command += local_directory.trim() + "offset " 
                          + input_tracename + ".skew;";            
            delay_command += local_directory.trim() + "offset " 
                          + input_remote_tracename + ".skew;";                        
            delay_command += local_directory.trim() + "offset " 
                          + input_tracename + ".skew.ok;";            
            delay_command += local_directory.trim() + "offset " 
                          + input_remote_tracename + ".skew.ok;";
            delay_command += local_directory.trim() + "offset " 
                          + input_tracename + ".skew.loss;";            
            delay_command += local_directory.trim() + "offset " 
                          + input_remote_tracename + ".skew.loss;";                        
            delay_command += local_directory.trim() + "linear -L " 
                          + input_tracename + ".skew.offset " 
                          + input_remote_tracename + ".skew.offset;";                        
            delay_command += local_directory.trim() + "linear -P " 
                          + input_tracename + ".skew.ok.offset " 
                          + input_remote_tracename + ".skew.ok.offset;";                        
            
            delay_command += "mv -f " + input_tracename + ".1.trace " 
                          + input_tracename + ".1.TM.delay_trace;";
            delay_command += "mv -f " + input_tracename + ".2.trace " 
                          + input_tracename + ".2.TM.delay_trace;";
            delay_command += "mv -f " + input_tracename + ".3.trace " 
                          + input_tracename + ".3.TM.delay_trace;";
            delay_command += "mv -f " + input_tracename + ".4.trace " 
                          + input_tracename + ".4.TM.delay_trace;";            
            delay_command += "mv -f " + input_remote_tracename + ".1.trace " 
                          + input_remote_tracename + ".1.TM.delay_trace;";
            delay_command += "mv -f " + input_remote_tracename + ".2.trace " 
                          + input_remote_tracename + ".2.TM.delay_trace;";
            delay_command += "mv -f " + input_remote_tracename + ".3.trace " 
                          + input_remote_tracename + ".3.TM.delay_trace;";
            delay_command += "mv -f " + input_remote_tracename + ".4.trace " 
                          + input_remote_tracename + ".4.TM.delay_trace;";
            delay_command += "rm -f *eq* *stack* *x *offset* *skew* *cml* *cmp* "
                          + input_tracename + ".[1-4].pair* " 
                          + input_remote_tracename + ".[1-4].pair*;";
           
            // Returning to the original path
            delay_command += "popd;";
            
            if( debug )
                System.err.println( delay_command );
            
            cmdpars2.add(delay_command);

            String [] parsarray2 = new String[cmdpars2.size()];

            cmdpars2.copyInto(parsarray2);

            try
            {
                Process bandproc;
                bandproc = Runtime.getRuntime().exec(parsarray2);

                int retval = bandproc.waitFor();
                if (retval != 255)
                    ok = true;
                else
                    javax.swing.JOptionPane.showMessageDialog(this,"Error in band measure evaluation");
            }
            catch(Exception e)
            {
                System.out.println("Exception running " + e.toString());
                System.out.println(cmdpars2); 
            }            
    }                     
    else if( jTF_Traff_Measures_File_Name.getText().indexOf( ".RTT." ) > 0 ) 
        // Delay Evaluation of RTT trace 
    {
            java.util.Vector cmdpars2 = new java.util.Vector();         
            cmdpars2.add("bash");
            cmdpars2.add("-c");
            
            String delay_command = "";
            
            // The output will be generated in the same directory where the trace file is found 
            delay_command = "pushd " + directory + ";";
        
            // the local trace file may be compressed   
            if( input_tracename.endsWith( ".gz" ) ) 
            {
                delay_command += "gzip -d " + input_tracename + ";";
                input_tracename = 
                    input_tracename.substring( 0 , input_tracename.indexOf( ".gz" ) );
                System.err.println( input_tracename + " decompressed" );
            }            
            
            delay_command += "cp -f " + input_tracename + " ";            
            delay_command += input_tracename + ".TM.delay_trace;";
            
            // Returning to the original path 
            delay_command += "popd;";                 
            
            if( debug ) System.err.println( delay_command );
            
            cmdpars2.add(delay_command);

            String [] parsarray2 = new String[cmdpars2.size()];

            cmdpars2.copyInto(parsarray2);

            try
            {
                Process delayproc;
                delayproc = Runtime.getRuntime().exec(parsarray2);

                int retval = delayproc.waitFor();
                if (retval != 255)
                    ok = true;
                else
                    javax.swing.JOptionPane.showMessageDialog(this,"Error in measures generation");
            }
            catch(Exception e)
            {
                System.out.println("Exception running " + e.toString());
                System.out.println(cmdpars2);
            }
    }
    else
    {
        javax.swing.JOptionPane.showMessageDialog(this,"Invalid trace file for Delay measure");
    }
    //-- End of Delay Evaluation
    
    if ( ok == true )
    {
        javax.swing.JOptionPane.showMessageDialog(this,"Measures of interest generated ");
        enable_plot();
    }
  }//GEN-LAST:event_jB_EvaluateActionPerformed

  private void jB_PlotActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PlotActionPerformed

    String [] extensions = {".TM."};
    if( directory != null )
    {
      T2plot plot = new T2plot (this, directory,extensions);
      plot.show();
    }
    else
    {
      T2plot plot = new T2plot (this, ".", extensions);
      plot.show();
    }
  }//GEN-LAST:event_jB_PlotActionPerformed

  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed
    exitForm( null );
  }//GEN-LAST:event_jB_CloseActionPerformed

  private void jB_FileChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FileChooserActionPerformed

    boolean jitterMayBeMeasured = false;

    java.lang.String line = "";

    fchooser.setFileFilter( objFilter );
    fchooser.setDialogTitle("Choose Trace File");
    fchooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
    fchooser.setCurrentDirectory( new java.io.File (directory));
    
    int retval = fchooser.showDialog(this,"Select");  // shows the file chooser 

    if(retval == javax.swing.JFileChooser.APPROVE_OPTION)
    {
        java.io.File f = fchooser.getCurrentDirectory();
        jTF_Traff_Measures_File_Name.setText((fchooser.getSelectedFile()).getAbsolutePath());

        //directory = f.getAbsolutePath();
        //jLDirectory.setText(directory)
        
        if( fchooser.getSelectedFile().getAbsolutePath().indexOf(".TwoWay.") > 0 )
        {
            jL_Remote_Trace_File.setEnabled( true );
            jB_Remote_FileChooser.setEnabled( true );    
            jTF_Remote_Traff_Measures_File_Name.setEnabled( true );
        }
        else
        {
            jL_Remote_Trace_File.setEnabled( false );
            jB_Remote_FileChooser.setEnabled( false );    
            jTF_Remote_Traff_Measures_File_Name.setEnabled( false );
            jTF_Remote_Traff_Measures_File_Name.setText( "" );
        }
        
        enable_measures();
 
        //-- Jitter 
        try 
        {
            java.io.BufferedReader buffered_file;

            if(!fchooser.getSelectedFile().getAbsolutePath().endsWith( ".gz" ) )
            {
                buffered_file = new java.io.BufferedReader( new java.io.FileReader( fchooser.getSelectedFile().getAbsolutePath()));
            }
            else
            {
                String [] pars_array = new String[3];
                pars_array[0] = "bash";
                pars_array[1] = "-c";
                pars_array[2] = "zcat "+ fchooser.getSelectedFile().getAbsolutePath() + " | head -10 ";

                Process p = Runtime.getRuntime().exec(pars_array);
                buffered_file =  new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
            }
          
            line = buffered_file.readLine();

            java.lang.String temp_str = "#Expected Interpacket Generation Time:";
            int size_temp_str = temp_str.length();

            jCB_Jitter.setEnabled(false);
            jTF_Traff_Measures_Time_Interval.setText("");

            while( line.substring(0,1).compareTo("#") == 0 )
            {
                if( line.substring(0,size_temp_str).compareTo(temp_str) == 0 )
                {
                    jCB_Jitter.setEnabled(true);
                    jTF_Traff_Measures_Time_Interval.setText(line.substring(size_temp_str, line.length()));
                    break;
                }
                line = buffered_file.readLine();
                if( line == null ) break;
            }

        }
        catch (java.lang.Exception e)
        {
            System.err.println("Error enabling Jitter Measure.");
        }
        //-- End of Jitter 
    }           
      
  }//GEN-LAST:event_jB_FileChooserActionPerformed

  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    Holder.setEnabled( true );
    dispose();
  }//GEN-LAST:event_exitForm

  private void initComponentsManual()
  {    

    fchooser = new javax.swing.JFileChooser();

    objFilter = new javax.swing.filechooser.FileFilter() {
      public boolean accept( java.io.File f )
      {
          return ((f.getName()).endsWith(".trafftrace") || (f.getName()).endsWith(".trafftrace.gz"));
      }

      public String getDescription( )
      {
        return "Traffgen trace files";
      }
    };   
    
    fchooser.addChoosableFileFilter(objFilter);
    fchooser.setFileFilter( objFilter );
    fchooser.setDialogTitle("Choose Trace File");
    fchooser.setCurrentDirectory( new java.io.File(directory != null ? directory:"."));

    try 
    {
        directory = System.getProperty( "user.dir" ) + "/";
        jLDirectory.setText( System.getProperty( "user.dir" ) + "/" );
        //System.err.println( System.getProperty( "user.dir" ) + "/" );
    }
    catch( java.lang.SecurityException e )
    {
        System.err.println( "Unable to resolve current directory" );
    }
    enable_plot();
  }

  private void enable_measures()
  { 
      //-- Delay
      if( 
          ( jTF_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.CBR" ) > 0 &&
            jTF_Remote_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.CBR" ) > 0 ) || 
          ( jTF_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.PacketPair" ) > 0 &&
            jTF_Remote_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.PacketPair" ) > 0 ) ||
          ( jTF_Traff_Measures_File_Name.getText().indexOf( ".RTT." ) > 0 )
        )
          jCB_Delay.setEnabled( true );
      else 
          jCB_Delay.setEnabled( false );
      
      //-- Band Capacity
      if( 
          ( jTF_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.PacketPair" ) > 0 &&
            jTF_Remote_Traff_Measures_File_Name.getText().indexOf( ".TwoWay.PacketPair" ) > 0 ) || 
          ( jTF_Traff_Measures_File_Name.getText().indexOf( ".RTT.PacketPair" ) > 0 )
        )
          jCB_Band_Capacity.setEnabled( true );
      else 
          jCB_Band_Capacity.setEnabled( false );
      
      //debug System.err.println( jTF_Traff_Measures_File_Name.getText() + " " + jTF_Remote_Traff_Measures_File_Name.getText().indexOf( ".RTT." )); 
    
  }
  
  private void enable_plot() {
  // This method enables plot if there are measures generated
    java.io.File f = new java.io.File(directory);
    java.io.File[] dirlist;

    java.io.FileFilter objFilter;

    objFilter = new java.io.FileFilter() {
      public boolean accept( java.io.File f )
      {
          return ((f.getName()).indexOf(".TM.") != -1 );
      }

      public String getDescription( )
      {
        return "Traffic Measures";
      }
    };

    dirlist = f.listFiles(objFilter);

    if ((dirlist != null) && (dirlist.length > 0))
      jB_Plot.setEnabled(true);
    else
    {      
      jB_Plot.setEnabled(false);
    }
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jB_ChangeDir;
    private javax.swing.JButton jB_Close;
    private javax.swing.JButton jB_Evaluate;
    private javax.swing.JButton jB_FileChooser;
    private javax.swing.JButton jB_Generate_Object;
    private javax.swing.JButton jB_Plot;
    private javax.swing.JButton jB_Remote_FileChooser;
    private javax.swing.JCheckBox jCB_Band_Capacity;
    private javax.swing.JCheckBox jCB_Buffer_Size;
    private javax.swing.JCheckBox jCB_Delay;
    private javax.swing.JCheckBox jCB_Drop_Rate;
    private javax.swing.JCheckBox jCB_Jitter;
    private javax.swing.JCheckBox jCB_Loss;
    private javax.swing.JCheckBox jCB_Success;
    private javax.swing.JCheckBox jCB_Throughput;
    private javax.swing.JLabel jLDirectory;
    private javax.swing.JLabel jLWorkingDirectory;
    private javax.swing.JLabel jL_Remote_Trace_File;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JLabel jL_Traff_Measures_File_Name;
    private javax.swing.JLabel jL_jitter;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JPanel jP_TrafficMeasures;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTF_Remote_Traff_Measures_File_Name;
    private javax.swing.JTextField jTF_Traff_Measures_File_Name;
    private javax.swing.JTextField jTF_Traff_Measures_Time_Interval;
    // End of variables declaration//GEN-END:variables

    public String bin_directory;
  
    private String directory;  
    private javax.swing.JFileChooser fchooser;
    private javax.swing.JFrame Holder;
    private javax.swing.filechooser.FileFilter objFilter;  
    //private T2plotproparguments plotargs;
}
