/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;
import java.util.StringTokenizer;

public class T2descriptors extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2descriptors(T2modelenv mainholder) {
    modelenv = mainholder;
    markovEvalButState = false;
    markovParButState = false;
    initComponents ();
    initComponentsManual ();
    pack ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTP_Descriptors = new javax.swing.JTabbedPane();
        jP_Markovian = new javax.swing.JPanel();
        jP_Makovian_Models = new javax.swing.JPanel();
        jL_MM_Initial_Probability = new javax.swing.JLabel();
        jTF_MM_Initial_Probability = new javax.swing.JTextField();
        jL_MM_IP_Initial_State = new javax.swing.JLabel();
        jTF_MM_IP_Initial_State = new javax.swing.JTextField();
        jL_MM_IP_Final_State = new javax.swing.JLabel();
        jTF_MM_IP_Final_State = new javax.swing.JTextField();
        jL_MM_IP_Probability = new javax.swing.JLabel();
        jTF_MM_IP_Probability = new javax.swing.JTextField();
        jB_MM_IP_Add = new javax.swing.JButton();
        jL_MM_Time_Intervals = new javax.swing.JLabel();
        jTF_MM_Time_Intervals = new javax.swing.JTextField();
        jL_MM_TI_Initial_Time = new javax.swing.JLabel();
        jTF_MM_TI_Initial_Time = new javax.swing.JTextField();
        jL_MM_TI_Final_Time = new javax.swing.JLabel();
        jTF_MM_TI_Final_Time = new javax.swing.JTextField();
        jL_MM_TI_Number_of_points = new javax.swing.JLabel();
        jTF_MM_TI_Number_of_points = new javax.swing.JTextField();
        jB_MM_TI_Add = new javax.swing.JButton();
        jP_MM_Options = new javax.swing.JPanel();
        jCB_MM_Autocorrelation = new javax.swing.JCheckBox();
        jCB_MM_Autocovariance = new javax.swing.JCheckBox();
        jCB_MM_IDC = new javax.swing.JCheckBox();
        jCB_MM_Stationary_Descriptors = new javax.swing.JCheckBox();
        jL_MM_Precision = new javax.swing.JLabel();
        jTF_MM_Precision = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTB_Continuous = new javax.swing.JToggleButton();
        jTB_Slotted = new javax.swing.JToggleButton();
        jL_MM_Reward_name = new javax.swing.JLabel();
        jTF_MM_Reward_name = new javax.swing.JTextField();
        jB_MM_Reward_File_Chooser = new javax.swing.JButton();
        jTB_MM_IP_Equiprobable = new javax.swing.JToggleButton();
        jL_MM_IP_Equiprobable = new javax.swing.JLabel();
        jTB_MM_IP_Initial_State = new javax.swing.JToggleButton();
        jL_MM_IP_InitialState = new javax.swing.JLabel();
        jTB_MM_IP_Equiprobable_Set = new javax.swing.JToggleButton();
        jL_MM_IP_Equiprobable_Set = new javax.swing.JLabel();
        jP_Traces = new javax.swing.JPanel();
        jP_Trace = new javax.swing.JPanel();
        jL_Traces_Trace_name = new javax.swing.JLabel();
        jTF_Traces_Trace_name = new javax.swing.JTextField();
        jB_Trace_name_File_Chooser = new javax.swing.JButton();
        jL_Traces_Number_of_samples = new javax.swing.JLabel();
        jL_Traces_Interval_between_samples = new javax.swing.JLabel();
        jL_Traces_Limit_time_for_transient_measures = new javax.swing.JLabel();
        jL_Traces_Points = new javax.swing.JLabel();
        jTF_Traces_Number_of_samples = new javax.swing.JTextField();
        jTF_Traces_Interval_between_samples = new javax.swing.JTextField();
        jTF_Traces_Limit_time_for_transient_measures = new javax.swing.JTextField();
        jTF_Traces_Points = new javax.swing.JTextField();
        jP_Traces_Options = new javax.swing.JPanel();
        jCB_Traces_Autocorrelation = new javax.swing.JCheckBox();
        jCB_Traces_Autocovariance = new javax.swing.JCheckBox();
        jCB_Traces_IDC = new javax.swing.JCheckBox();
        jCB_Traces_Stationary_Descriptors = new javax.swing.JCheckBox();
        jP_Traces_Sample_type = new javax.swing.JPanel();
        jTB_Traces_ST_Rate = new javax.swing.JToggleButton();
        jTB_Traces_ST_Size = new javax.swing.JToggleButton();
        jL_Traces_ST_Rate = new javax.swing.JLabel();
        jL_Traces_ST_Size = new javax.swing.JLabel();
        jP_Traces_SPD = new javax.swing.JPanel();
        jTB_Traces_SPD_Fixed_size = new javax.swing.JToggleButton();
        jL_Traces_SPD_Fixed_size = new javax.swing.JLabel();
        jTB_Traces_SPD_Edsize = new javax.swing.JToggleButton();
        jL_Traces_SPD_Edsize = new javax.swing.JLabel();
        jP_TraceToHistogramMtx = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTF_TracetoMtx_Trace_Name = new javax.swing.JTextField();
        jB_TracetoMtx_name_File_Chooser1 = new javax.swing.JButton();
        jL_Traces_Trace_Name = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jT_Number_of_Samples = new javax.swing.JTextField();
        jL_Number_of_Samples = new javax.swing.JLabel();
        jL_Uniformization_Rates = new javax.swing.JLabel();
        jT_Uniformization_Rate = new javax.swing.JTextField();
        jT_Histogram_Levels = new javax.swing.JTextField();
        jL_Histogram_Levels = new javax.swing.JLabel();
        jL_Data_Size = new javax.swing.JLabel();
        jT_Data_Size = new javax.swing.JTextField();
        jL_Time_Interval = new javax.swing.JLabel();
        jT_Time_Interval = new javax.swing.JTextField();
        jP_Traces_Sample_type1 = new javax.swing.JPanel();
        jTB_TracetoMtx_ST_Rate = new javax.swing.JToggleButton();
        jTB_TracetoMtx_ST_Size = new javax.swing.JToggleButton();
        jL_Traces_ST_Rate1 = new javax.swing.JLabel();
        jL_Traces_ST_Size1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jB_Evaluate = new javax.swing.JButton();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir = new javax.swing.JLabel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jL_Descriptors_Picture = new javax.swing.JLabel();
        jB_Close = new javax.swing.JButton();
        jB_Plot = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jB_Parameters = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Traffic Modeling]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jTP_Descriptors.setFont(new java.awt.Font("Dialog", 1, 10));
        jTP_Descriptors.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTP_DescriptorsStateChanged(evt);
            }
        });

        jP_Markovian.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Markovian.setToolTipText("Analytical Descriptors Evaluation using Markovian Models");
        jP_Makovian_Models.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Makovian_Models.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_MM_Initial_Probability.setText("Initial Probability:");
        jL_MM_Initial_Probability.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_Initial_Probability.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_Initial_Probability, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 15, -1, -1));

        jTF_MM_Initial_Probability.setToolTipText("Sum of probability values must be 1");
        jTF_MM_Initial_Probability.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_Initial_Probability, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 10, 405, 20));

        jL_MM_IP_Initial_State.setText("Initial State:");
        jL_MM_IP_Initial_State.setForeground(java.awt.Color.black);
        jL_MM_IP_Initial_State.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_IP_Initial_State.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_IP_Initial_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 112, -1, -1));

        jTF_MM_IP_Initial_State.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_IP_Initial_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 108, 48, 20));

        jL_MM_IP_Final_State.setText("Final State:");
        jL_MM_IP_Final_State.setForeground(java.awt.Color.black);
        jL_MM_IP_Final_State.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_IP_Final_State.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_IP_Final_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 112, -1, -1));

        jTF_MM_IP_Final_State.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_IP_Final_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 108, 48, 20));

        jL_MM_IP_Probability.setText("Probability:");
        jL_MM_IP_Probability.setForeground(java.awt.Color.black);
        jL_MM_IP_Probability.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_IP_Probability.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_IP_Probability, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 112, -1, -1));

        jTF_MM_IP_Probability.setToolTipText("Probability of each one of the states");
        jTF_MM_IP_Probability.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_IP_Probability, new org.netbeans.lib.awtextra.AbsoluteConstraints(417, 108, 48, 20));

        jB_MM_IP_Add.setToolTipText("Add the set of states with the specified probability");
        jB_MM_IP_Add.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_MM_IP_Add.setLabel("Add");
        jB_MM_IP_Add.setEnabled(false);
        jB_MM_IP_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_MM_IP_AddActionPerformed(evt);
            }
        });

        jP_Makovian_Models.add(jB_MM_IP_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 108, 60, 20));

        jL_MM_Time_Intervals.setText("Time Intervals:");
        jL_MM_Time_Intervals.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_Time_Intervals.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_Time_Intervals, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 159, -1, -1));

        jTF_MM_Time_Intervals.setToolTipText("Time Intervals must be in increasing order");
        jTF_MM_Time_Intervals.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_Time_Intervals, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 155, 405, 20));

        jL_MM_TI_Initial_Time.setText("Initial Time:");
        jL_MM_TI_Initial_Time.setForeground(java.awt.Color.black);
        jL_MM_TI_Initial_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_TI_Initial_Time.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_TI_Initial_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 185, -1, -1));

        jTF_MM_TI_Initial_Time.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_TI_Initial_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 180, 48, 20));

        jL_MM_TI_Final_Time.setText("Final Time:");
        jL_MM_TI_Final_Time.setForeground(java.awt.Color.black);
        jL_MM_TI_Final_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_TI_Final_Time.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_TI_Final_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 185, -1, -1));

        jTF_MM_TI_Final_Time.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_TI_Final_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 48, 20));

        jL_MM_TI_Number_of_points.setText("Number of points:");
        jL_MM_TI_Number_of_points.setForeground(java.awt.Color.black);
        jL_MM_TI_Number_of_points.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_TI_Number_of_points.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_TI_Number_of_points, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 185, -1, -1));

        jTF_MM_TI_Number_of_points.setToolTipText("Total number of points, including initial and final time");
        jTF_MM_TI_Number_of_points.setEnabled(false);
        jP_Makovian_Models.add(jTF_MM_TI_Number_of_points, new org.netbeans.lib.awtextra.AbsoluteConstraints(417, 180, 48, 20));

        jB_MM_TI_Add.setToolTipText("Add the set of intervals");
        jB_MM_TI_Add.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_MM_TI_Add.setLabel("Add");
        jB_MM_TI_Add.setEnabled(false);
        jB_MM_TI_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_MM_TI_AddActionPerformed(evt);
            }
        });

        jP_Makovian_Models.add(jB_MM_TI_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, 60, 20));

        jP_MM_Options.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_MM_Options.setBorder(new javax.swing.border.TitledBorder(null, " Options ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jCB_MM_Autocorrelation.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_MM_Autocorrelation.setText("Autocorrelation");
        jCB_MM_Autocorrelation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_MM_AutocorrelationActionPerformed(evt);
            }
        });

        jCB_MM_Autocorrelation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_MM(evt);
            }
        });

        jP_MM_Options.add(jCB_MM_Autocorrelation, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 20, -1, -1));

        jCB_MM_Autocovariance.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_MM_Autocovariance.setText("Autocovariance");
        jCB_MM_Autocovariance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_MM_AutocovarianceActionPerformed(evt);
            }
        });

        jCB_MM_Autocovariance.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_MM(evt);
            }
        });

        jP_MM_Options.add(jCB_MM_Autocovariance, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 40, -1, -1));

        jCB_MM_IDC.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_MM_IDC.setText("IDC");
        jCB_MM_IDC.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_MM(evt);
            }
        });

        jP_MM_Options.add(jCB_MM_IDC, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 60, -1, -1));

        jCB_MM_Stationary_Descriptors.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_MM_Stationary_Descriptors.setLabel("Stationary Descriptors");
        jCB_MM_Stationary_Descriptors.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_MM(evt);
            }
        });

        jP_MM_Options.add(jCB_MM_Stationary_Descriptors, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 80, -1, -1));

        jL_MM_Precision.setText("Precision:");
        jL_MM_Precision.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_Precision.setEnabled(false);
        jP_MM_Options.add(jL_MM_Precision, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, -1, -1));

        jTF_MM_Precision.setToolTipText("Error bound");
        jTF_MM_Precision.setEnabled(false);
        jP_MM_Options.add(jTF_MM_Precision, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 75, 160, 20));

        jLabel1.setText("Model type");
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_MM_Options.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 25, -1, -1));

        jTB_Continuous.setSelected(true);
        jTB_Continuous.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Continuous.setText("Continuous");
        jTB_Continuous.setEnabled(false);
        jP_MM_Options.add(jTB_Continuous, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 112, 20));

        jTB_Slotted.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Slotted.setText("Slotted");
        jTB_Slotted.setEnabled(false);
        jP_MM_Options.add(jTB_Slotted, new org.netbeans.lib.awtextra.AbsoluteConstraints(333, 40, 112, 20));

        jP_Makovian_Models.add(jP_MM_Options, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 521, 110));

        jL_MM_Reward_name.setText("Reward name:");
        jL_MM_Reward_name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Makovian_Models.add(jL_MM_Reward_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 335, -1, -1));

        jP_Makovian_Models.add(jTF_MM_Reward_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 331, 380, 20));

        jB_MM_Reward_File_Chooser.setToolTipText("Choose the file associated to the reward name");
        jB_MM_Reward_File_Chooser.setLabel("...");
        jB_MM_Reward_File_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_MM_Reward_File_ChooserActionPerformed(evt);
            }
        });

        jP_Makovian_Models.add(jB_MM_Reward_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(508, 331, 22, 20));

        jTB_MM_IP_Equiprobable.setToolTipText("Use equiprobable states");
        jTB_MM_IP_Equiprobable.setSelected(true);
        jTB_MM_IP_Equiprobable.setEnabled(false);
        jP_Makovian_Models.add(jTB_MM_IP_Equiprobable, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 35, 15, 15));

        jL_MM_IP_Equiprobable.setText("Equiprobable");
        jL_MM_IP_Equiprobable.setToolTipText("Use equiprobable states");
        jL_MM_IP_Equiprobable.setForeground(java.awt.Color.black);
        jL_MM_IP_Equiprobable.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_IP_Equiprobable.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_IP_Equiprobable, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 35, -1, 15));

        jTB_MM_IP_Initial_State.setToolTipText("Initial State is the state defined in the Model Specification. It has probability equal to 1");
        jTB_MM_IP_Initial_State.setEnabled(false);
        jP_Makovian_Models.add(jTB_MM_IP_Initial_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 60, 15, 15));

        jL_MM_IP_InitialState.setText("Initial State");
        jL_MM_IP_InitialState.setToolTipText("Initial State is the state defined in the Model Specification. It has probability equal to 1");
        jL_MM_IP_InitialState.setForeground(java.awt.Color.black);
        jL_MM_IP_InitialState.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_IP_InitialState.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_IP_InitialState, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, 15));

        jTB_MM_IP_Equiprobable_Set.setToolTipText("Add set of equiprobable states");
        jTB_MM_IP_Equiprobable_Set.setEnabled(false);
        jTB_MM_IP_Equiprobable_Set.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_MM_IP_Equiprobable_SetStateChanged(evt);
            }
        });

        jP_Makovian_Models.add(jTB_MM_IP_Equiprobable_Set, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 85, 15, 15));

        jL_MM_IP_Equiprobable_Set.setText("Equiprobable Set");
        jL_MM_IP_Equiprobable_Set.setToolTipText("Add set of equiprobable states");
        jL_MM_IP_Equiprobable_Set.setForeground(java.awt.Color.black);
        jL_MM_IP_Equiprobable_Set.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_MM_IP_Equiprobable_Set.setEnabled(false);
        jP_Makovian_Models.add(jL_MM_IP_Equiprobable_Set, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 85, -1, 15));

        jP_Markovian.add(jP_Makovian_Models, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 540, 357));

        jTP_Descriptors.addTab("Markovian Models", null, jP_Markovian, "");

        jP_Traces.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Traces.setToolTipText("Analytical Descriptors Evaluation using Traces");
        jP_Trace.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Trace.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Traces_Trace_name.setText("Trace name:");
        jL_Traces_Trace_name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Trace.add(jL_Traces_Trace_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 15, -1, -1));

        jTF_Traces_Trace_name.setEditable(false);
        jP_Trace.add(jTF_Traces_Trace_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 355, 20));

        jB_Trace_name_File_Chooser.setToolTipText("Choose trace file");
        jB_Trace_name_File_Chooser.setLabel("...");
        jB_Trace_name_File_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Trace_name_File_ChooserActionPerformed(evt);
            }
        });

        jP_Trace.add(jB_Trace_name_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(508, 10, 22, 20));

        jL_Traces_Number_of_samples.setText("Number of samples");
        jL_Traces_Number_of_samples.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Trace.add(jL_Traces_Number_of_samples, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jL_Traces_Interval_between_samples.setText("Time scale");
        jL_Traces_Interval_between_samples.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Trace.add(jL_Traces_Interval_between_samples, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 85, -1, -1));

        jL_Traces_Limit_time_for_transient_measures.setText("Maximum time lag");
        jL_Traces_Limit_time_for_transient_measures.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Traces_Limit_time_for_transient_measures.setEnabled(false);
        jP_Trace.add(jL_Traces_Limit_time_for_transient_measures, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jL_Traces_Points.setText("Number of points:");
        jL_Traces_Points.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Traces_Points.setEnabled(false);
        jP_Trace.add(jL_Traces_Points, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, -1, -1));

        jTF_Traces_Number_of_samples.setToolTipText("Number of samples to be analyzed from the trace");
        jP_Trace.add(jTF_Traces_Number_of_samples, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 45, 240, 20));

        jTF_Traces_Interval_between_samples.setToolTipText("Time Interval of each sample");
        jP_Trace.add(jTF_Traces_Interval_between_samples, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 240, 20));

        jTF_Traces_Limit_time_for_transient_measures.setEnabled(false);
        jP_Trace.add(jTF_Traces_Limit_time_for_transient_measures, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 115, 150, 20));

        jTF_Traces_Points.setToolTipText("Number of points must not exceed limit time divided by sample time interval");
        jTF_Traces_Points.setEnabled(false);
        jP_Trace.add(jTF_Traces_Points, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 115, 85, 20));

        jP_Traces_Options.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Traces_Options.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.TitledBorder(""), " Options ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jCB_Traces_Autocorrelation.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Traces_Autocorrelation.setText("Autocorrelation");
        jCB_Traces_Autocorrelation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_Traces(evt);
            }
        });

        jP_Traces_Options.add(jCB_Traces_Autocorrelation, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 20, -1, -1));

        jCB_Traces_Autocovariance.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Traces_Autocovariance.setText("Autocovariance");
        jCB_Traces_Autocovariance.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_Traces(evt);
            }
        });

        jP_Traces_Options.add(jCB_Traces_Autocovariance, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 40, -1, -1));

        jCB_Traces_IDC.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Traces_IDC.setText("IDC");
        jCB_Traces_IDC.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_Traces(evt);
            }
        });

        jP_Traces_Options.add(jCB_Traces_IDC, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 60, -1, -1));

        jCB_Traces_Stationary_Descriptors.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Traces_Stationary_Descriptors.setLabel("Stationary Descriptors");
        jCB_Traces_Stationary_Descriptors.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                StateChanged_Traces(evt);
            }
        });

        jP_Traces_Options.add(jCB_Traces_Stationary_Descriptors, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 80, -1, -1));

        jP_Trace.add(jP_Traces_Options, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 155, 521, 110));

        jP_Traces_Sample_type.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Traces_Sample_type.setBorder(new javax.swing.border.TitledBorder(null, "Input values", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jP_Traces_Sample_type.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Traces_ST_Rate.setToolTipText("Each sample as a rate measure");
        jTB_Traces_ST_Rate.setSelected(true);
        jP_Traces_Sample_type.add(jTB_Traces_ST_Rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 20, 15, 15));

        jTB_Traces_ST_Size.setToolTipText("Each sample as a size measure");
        jP_Traces_Sample_type.add(jTB_Traces_ST_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 50, 15, 15));

        jL_Traces_ST_Rate.setText("Sample");
        jL_Traces_ST_Rate.setToolTipText("Samples are not changed");
        jL_Traces_ST_Rate.setForeground(java.awt.Color.black);
        jL_Traces_ST_Rate.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Traces_Sample_type.add(jL_Traces_ST_Rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 20, -1, 15));

        jL_Traces_ST_Size.setText("Sample / Time scale");
        jL_Traces_ST_Size.setToolTipText("Samples are divided by the time scale");
        jL_Traces_ST_Size.setForeground(java.awt.Color.black);
        jL_Traces_ST_Size.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Traces_Sample_type.add(jL_Traces_ST_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 50, -1, 15));

        jP_Trace.add(jP_Traces_Sample_type, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 273, 250, 80));

        jP_Traces_SPD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Traces_SPD.setBorder(new javax.swing.border.TitledBorder(null, "Interval between windows", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jP_Traces_SPD.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Traces_SPD_Fixed_size.setToolTipText("Sample paths with fixed size");
        jTB_Traces_SPD_Fixed_size.setSelected(true);
        jTB_Traces_SPD_Fixed_size.setEnabled(false);
        jP_Traces_SPD.add(jTB_Traces_SPD_Fixed_size, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 20, 15, 15));

        jL_Traces_SPD_Fixed_size.setText("Zero");
        jL_Traces_SPD_Fixed_size.setToolTipText("Interval of size zero");
        jL_Traces_SPD_Fixed_size.setForeground(java.awt.Color.black);
        jL_Traces_SPD_Fixed_size.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Traces_SPD_Fixed_size.setEnabled(false);
        jP_Traces_SPD.add(jL_Traces_SPD_Fixed_size, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 20, -1, 15));

        jTB_Traces_SPD_Edsize.setToolTipText("Exponentialy distributed size for sample paths");
        jTB_Traces_SPD_Edsize.setEnabled(false);
        jP_Traces_SPD.add(jTB_Traces_SPD_Edsize, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 50, 15, 15));

        jL_Traces_SPD_Edsize.setText("Exponential");
        jL_Traces_SPD_Edsize.setToolTipText("Interval is a sample from an exponential R.V.");
        jL_Traces_SPD_Edsize.setForeground(java.awt.Color.black);
        jL_Traces_SPD_Edsize.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Traces_SPD_Edsize.setEnabled(false);
        jP_Traces_SPD.add(jL_Traces_SPD_Edsize, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 50, -1, 15));

        jP_Trace.add(jP_Traces_SPD, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 273, 250, 80));

        jP_Traces.add(jP_Trace, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 540, 357));

        jTP_Descriptors.addTab("Traces", null, jP_Traces, "");

        jP_TraceToHistogramMtx.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jTF_TracetoMtx_Trace_Name.setEditable(false);
        jPanel2.add(jTF_TracetoMtx_Trace_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 30, 410, 20));

        jB_TracetoMtx_name_File_Chooser1.setToolTipText("Choose trace file");
        jB_TracetoMtx_name_File_Chooser1.setLabel("...");
        jB_TracetoMtx_name_File_Chooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_TracetoMtx_name_File_Chooser1ActionPerformed(evt);
            }
        });

        jPanel2.add(jB_TracetoMtx_name_File_Chooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 22, 20));

        jL_Traces_Trace_Name.setText("Trace name:");
        jL_Traces_Trace_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel2.add(jL_Traces_Trace_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, -1, -1));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jPanel3.add(jT_Number_of_Samples, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 80, 105, 20));

        jL_Number_of_Samples.setText("Number of samples:");
        jL_Number_of_Samples.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel3.add(jL_Number_of_Samples, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 85, -1, -1));

        jL_Uniformization_Rates.setText("Uniformization Rate:");
        jL_Uniformization_Rates.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel3.add(jL_Uniformization_Rates, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jT_Uniformization_Rate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jT_Uniformization_RateActionPerformed(evt);
            }
        });

        jPanel3.add(jT_Uniformization_Rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 125, 105, 20));

        jPanel3.add(jT_Histogram_Levels, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 170, 105, 20));

        jL_Histogram_Levels.setText("Histogram Levels:");
        jL_Histogram_Levels.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel3.add(jL_Histogram_Levels, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 175, -1, -1));

        jL_Data_Size.setText("Data Size ( in bytes ):");
        jL_Data_Size.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel3.add(jL_Data_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jPanel3.add(jT_Data_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 35, 105, 20));

        jL_Time_Interval.setText("Time scale:");
        jL_Time_Interval.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel3.add(jL_Time_Interval, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, -1, -1));

        jPanel3.add(jT_Time_Interval, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 105, 20));

        jP_Traces_Sample_type1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Traces_Sample_type1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Traces_Sample_type1.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_TracetoMtx_ST_Rate.setToolTipText("Each sample as a rate measure");
        jTB_TracetoMtx_ST_Rate.setSelected(true);
        jP_Traces_Sample_type1.add(jTB_TracetoMtx_ST_Rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 15, 15));

        jTB_TracetoMtx_ST_Size.setToolTipText("Each sample as a size measure");
        jP_Traces_Sample_type1.add(jTB_TracetoMtx_ST_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 15, 15));

        jL_Traces_ST_Rate1.setText("Rate");
        jL_Traces_ST_Rate1.setToolTipText("Each sample as a rate measure");
        jL_Traces_ST_Rate1.setForeground(java.awt.Color.black);
        jL_Traces_ST_Rate1.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Traces_Sample_type1.add(jL_Traces_ST_Rate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, 15));

        jL_Traces_ST_Size1.setText("Size");
        jL_Traces_ST_Size1.setToolTipText("Each sample as a size measure");
        jL_Traces_ST_Size1.setForeground(java.awt.Color.black);
        jL_Traces_ST_Size1.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Traces_Sample_type1.add(jL_Traces_ST_Size1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, 15));

        jPanel3.add(jP_Traces_Sample_type1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 220, 90));

        jLabel3.setText("Input Values");
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, -1, -1));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, 520, 250));

        jLabel2.setText("Parameters");
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jP_TraceToHistogramMtx.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 540, 357));

        jTP_Descriptors.addTab("Trace To Histogram Mtx", null, jP_TraceToHistogramMtx, "Extracts from a trace file a histogram matrix");

        getContentPane().add(jTP_Descriptors, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 395));

        jB_Evaluate.setToolTipText("Evaluate");
        jB_Evaluate.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Evaluate.setText("Evaluate");
        jB_Evaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_EvaluateActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Evaluate, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 5, 110, 30));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Status_Bar_Dir.setText("Directory:");
        jL_Status_Bar_Dir.setForeground(java.awt.Color.black);
        jL_Status_Bar_Dir.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Dir, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        jL_Status_Bar_Dir_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 4, 260, -1));

        jL_Status_Bar_Model.setText("Model:");
        jL_Status_Bar_Model.setForeground(java.awt.Color.black);
        jL_Status_Bar_Model.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, -1));

        jL_Status_Bar_Model_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 4, 280, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 405, 685, 20));

        jL_Descriptors_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_descriptors.gif")));
        getContentPane().add(jL_Descriptors_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 345, -1, -1));

        jB_Close.setToolTipText("Close this window");
        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setText("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 125, 110, 30));

        jB_Plot.setToolTipText("Plot tool");
        jB_Plot.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Plot.setText("Plot");
        jB_Plot.setEnabled(false);
        jB_Plot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PlotActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Plot, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 45, 110, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(695, 430, 1, 1));

        jB_Parameters.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Parameters.setText("Parameters");
        jB_Parameters.setName("Parameters");
        jB_Parameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ParametersActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Parameters, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 85, 110, 30));

    }//GEN-END:initComponents

    private void jT_Uniformization_RateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jT_Uniformization_RateActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jT_Uniformization_RateActionPerformed

    private void jB_TracetoMtx_name_File_Chooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_TracetoMtx_name_File_Chooser1ActionPerformed
      javax.swing.JFileChooser fchooser_traceName;
      String tName,tDirectory, name;
      ExampleFileFilter objFilter_traceName;
      tName = "";

      fchooser_traceName  = new javax.swing.JFileChooser(new java.io.File (System.getProperty("user.dir")));
      objFilter_traceName = new ExampleFileFilter( "traceMtxExtension" , "Trace Files" );
      fchooser_traceName.addChoosableFileFilter( objFilter );
      fchooser_traceName.setFileFilter( objFilter );
      fchooser_traceName.setDialogTitle( "Choose Trace name" );
      
      if (fchooser_traceName.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION) {

        if (fchooser_traceName.getSelectedFile().exists()) {
          jTF_TracetoMtx_Trace_Name.setText(fchooser_traceName.getSelectedFile().getName());

          tName      = fchooser_traceName.getSelectedFile().getName();
          tDirectory = fchooser_traceName.getSelectedFile().getAbsolutePath().substring( 0,
                       fchooser_traceName.getSelectedFile().getAbsolutePath().length() -
                       fchooser_traceName.getSelectedFile().getName().length() - 1 );
        }    
        StringTokenizer tkns = new StringTokenizer( tName , "." );
        name = tkns.nextToken();

      }

    }//GEN-LAST:event_jB_TracetoMtx_name_File_Chooser1ActionPerformed

  private void jCB_MM_AutocovarianceActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_MM_AutocovarianceActionPerformed
    // Add your handling code here:

    if (jCB_MM_Autocorrelation.isSelected() == true  || jCB_MM_Autocovariance.isSelected() == true)
    {
       jTB_Continuous.setEnabled(true);
       jTB_Slotted.setEnabled(true);
    }
    else
    {
       jTB_Continuous.setEnabled(false);
       jTB_Slotted.setEnabled(false);
    }

  }//GEN-LAST:event_jCB_MM_AutocovarianceActionPerformed

  private void jCB_MM_AutocorrelationActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_MM_AutocorrelationActionPerformed
    // Add your handling code here:

    if (jCB_MM_Autocorrelation.isSelected() == true  || jCB_MM_Autocovariance.isSelected() == true)
    {
       jTB_Continuous.setEnabled(true);
       jTB_Slotted.setEnabled(true);
    }
    else
    {
       jTB_Continuous.setEnabled(false);
       jTB_Slotted.setEnabled(false);
    }


  }//GEN-LAST:event_jCB_MM_AutocorrelationActionPerformed

  private void jB_ParametersActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ParametersActionPerformed
    // Add your handling code here:

    this.setEnabled(false);
    literal.show();

    markovEvalButState = jB_Evaluate.isEnabled();

  }//GEN-LAST:event_jB_ParametersActionPerformed


  private void StateChanged_Traces (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_StateChanged_Traces
    if ((jCB_Traces_Autocorrelation.isSelected()) ||
         (jCB_Traces_Autocovariance.isSelected()) ||
         (jCB_Traces_IDC.isSelected())) {
      //Limit time and Points
      jL_Traces_Limit_time_for_transient_measures.setEnabled(true);
      jTF_Traces_Limit_time_for_transient_measures.setEnabled(true);
      jL_Traces_Points.setEnabled(true);
      jTF_Traces_Points.setEnabled(true);

      jTB_Traces_SPD_Fixed_size.setEnabled(jCB_Traces_IDC.isSelected());
      jL_Traces_SPD_Fixed_size.setEnabled(jCB_Traces_IDC.isSelected());
      jTB_Traces_SPD_Edsize.setEnabled(jCB_Traces_IDC.isSelected());
      jL_Traces_SPD_Edsize.setEnabled(jCB_Traces_IDC.isSelected());
    }
    else {
      jL_Traces_Limit_time_for_transient_measures.setEnabled(false);
      jTF_Traces_Limit_time_for_transient_measures.setEnabled(false);
      jL_Traces_Points.setEnabled(false);
      jTF_Traces_Points.setEnabled(false);
      jTB_Traces_SPD_Fixed_size.setEnabled(false);
      jL_Traces_SPD_Fixed_size.setEnabled(false);
      jTB_Traces_SPD_Edsize.setEnabled(false);
      jL_Traces_SPD_Edsize.setEnabled(false);
    }
  }//GEN-LAST:event_StateChanged_Traces



  private void jTP_DescriptorsStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTP_DescriptorsStateChanged

    if (jTP_Descriptors.getSelectedIndex() == 0)
    {
      enable_plot(1);

      if(jB_Parameters != null)
        jB_Parameters.setEnabled(markovParButState);
      if(jB_Evaluate != null)
        jB_Evaluate.setEnabled(markovEvalButState);

    }
    else {

      if(jB_Parameters != null)
        jB_Parameters.setEnabled(false);
      if(jB_Evaluate != null)
        jB_Evaluate.setEnabled(true);

      if (jTF_Traces_Trace_name.getText().trim().compareTo("") != 0)
        enable_plot(2);
      else
        jB_Plot.setEnabled(false);
    }
  }//GEN-LAST:event_jTP_DescriptorsStateChanged

  private void jB_PlotActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PlotActionPerformed
    this.setEnabled(false);
    //call plot with the extensions to be filtered!
    if (jTP_Descriptors.getSelectedIndex() == 0)
      plot = new T2plot(this, modelenv.curmodel, modelenv.curdir, extensions);
    else
      plot = new T2plot(this, tracename, tracedirectory, extensions);

    plot.show();
  }//GEN-LAST:event_jB_PlotActionPerformed

/**********************************************************************************/
/************************ initComponentsManual procedure **************************/
  private void initComponentsManual () {

    //add the t2cacalg panel in the tabbed pane
    cacalg = new Tangram2.T2cacalg ();
    cacalg.setBackground (new java.awt.Color (204, 204, 204));
    jTP_Descriptors.addTab ("CAC Algorithms", cacalg);

    //set directory and model in status panel (jP_Status_Bar)
    jL_Status_Bar_Model_name.setText(modelenv.curmodel);
    jL_Status_Bar_Dir_name.setText(T2functions.status_directory(modelenv.curdir));

    fchooser  = new javax.swing.JFileChooser(new java.io.File (System.getProperty("user.dir")));
    objFilter = new ExampleFileFilter("trace", "Trace Files");
    fchooser.addChoosableFileFilter(objFilter);
    fchooser.setFileFilter( objFilter );
    fchooser.setDialogTitle( "Choose Trace name" );

    //Tab Markovian Models
    javax.swing.ButtonGroup group1 = new javax.swing.ButtonGroup();
    group1.add(jTB_MM_IP_Equiprobable);
    group1.add(jTB_MM_IP_Initial_State);
    group1.add(jTB_MM_IP_Equiprobable_Set);

    //Tab Traces
    javax.swing.ButtonGroup group2 = new javax.swing.ButtonGroup();
    group2.add(jTB_Traces_ST_Rate);
    group2.add(jTB_Traces_ST_Size);

    javax.swing.ButtonGroup group3 = new javax.swing.ButtonGroup();
    group3.add(jTB_Traces_SPD_Fixed_size);
    group3.add(jTB_Traces_SPD_Edsize);

    //Disable tab Markovian Models and Plot button if there isn't an open model with Mathematical Model Generated.
    if (jL_Status_Bar_Model_name.getText().trim().compareTo("") != 0) {
      if( !T2functions.fexist(modelenv.curmodel,".states") ) {
        jTP_Descriptors.setSelectedIndex(1);
        jTP_Descriptors.setEnabledAt(0,false);
      }
      else {
        fchooser_rew  = new javax.swing.JFileChooser(new java.io.File (modelenv.curdir));
        objFilter_rew = new ExampleFileFilterEx(0,modelenv.curmodel, new String[] {".rate_reward."}, ".expr", "Rate reward files");
        fchooser_rew.addChoosableFileFilter(objFilter_rew);
        fchooser_rew.setFileFilter( objFilter_rew );
        fchooser_rew.setDialogTitle("Choose Reward File");
        jTP_DescriptorsStateChanged(null);
      }
    }
    else {
      jTP_Descriptors.setSelectedIndex(1);
      jTP_Descriptors.setEnabledAt(0,false);
    }

    java.io.File arq_params = new java.io.File(modelenv.curmodel + ".generator_mtx.param");
    if (arq_params.exists()) {
      jB_Parameters.setEnabled(true);  /* the model is literal */

      literal = new T2literal(this, jB_Evaluate);
      java.io.File arq_mtx = new java.io.File(modelenv.curmodel + ".generator_mtx");
      if (arq_mtx.exists())
      {
        jB_Evaluate.setEnabled(true);

      }
      else
      {
        jB_Evaluate.setEnabled(false);

      }
    }
    else {
      jB_Parameters.setEnabled(false);
      jB_Evaluate.setEnabled(true);
    }

    markovEvalButState = jB_Evaluate.isEnabled();
    markovParButState = jB_Parameters.isEnabled();

    javax.swing.ButtonGroup group4 = new javax.swing.ButtonGroup();
    group4.add(jTB_Continuous);
    group4.add(jTB_Slotted);

    //*** Parameters Initialization ***//
    jT_Number_of_Samples.setText("100");
    jT_Time_Interval.setText("1.0");
    jT_Uniformization_Rate.setText("30.0");
    jT_Histogram_Levels.setText("8");
    jT_Data_Size.setText("1.0");
    
    //Tab Trace to Histogram Mtx
    javax.swing.ButtonGroup group5 = new javax.swing.ButtonGroup();
    group5.add(jTB_TracetoMtx_ST_Rate);
    group5.add(jTB_TracetoMtx_ST_Size);

  }

/**********************************************************************************/
/***************************** enable plot button  ********************************/

  private void enable_plot(int from) {
    java.io.File f = new java.io.File(".");
    String[] dirlist;
    ExampleFileFilterEx objFilter_aux;
    if (jB_Plot != null) {
      if (from == 1) {
      //means test model
        objFilter_aux = new ExampleFileFilterEx(0,modelenv.curmodel, extensions, "Plot Files");
      }
      else {
      //means test trace
        objFilter_aux = new ExampleFileFilterEx(0, jTF_Traces_Trace_name.getText(), extensions, "Plot Files");
      }
      dirlist = f.list(objFilter_aux);
      if ((dirlist != null) && (dirlist.length > 0))
        jB_Plot.setEnabled(true);
      else
        jB_Plot.setEnabled(false);
    }
  }

/**********************************************************************************/
/******************************** Evaluate procedure ******************************/
  private void jB_EvaluateActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_EvaluateActionPerformed
    String command, basename, sInitial_Prob, sample_path, sample_type;

    command = "";

    /**********************************************************************************/
    /*************** Means that the user is on Tab Markovian Models *******************/

    if (jTP_Descriptors.getSelectedIndex() == 0)  {

      sInitial_Prob = "";

      //Take the filename of the model
      basename = modelenv.curmodel;

      java.util.Vector OptionalFields = new java.util.Vector();
      OptionalFields.add(jTF_MM_IP_Initial_State);
      OptionalFields.add(jTF_MM_IP_Final_State);
      OptionalFields.add(jTF_MM_IP_Probability);
      OptionalFields.add(jTF_MM_TI_Initial_Time);
      OptionalFields.add(jTF_MM_TI_Final_Time);
      OptionalFields.add(jTF_MM_TI_Number_of_points);

      if (T2functions.Is_some_field_missing(jP_Makovian_Models,OptionalFields)) return;

      //Verify if the .generator_mtx file exists
      java.io.File arq = new java.io.File(basename + ".generator_mtx");
      if (!(arq.exists())) {
        javax.swing.JOptionPane.showMessageDialog(this,
        "File " + basename + ".generator_mtx doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }

      // Get and test Initial Probability
      if      (jTB_MM_IP_Equiprobable.isSelected())  sInitial_Prob = "e_All";
      else if (jTB_MM_IP_Initial_State.isSelected()) sInitial_Prob = "1 1.0";
      else                                           sInitial_Prob = jTF_MM_Initial_Probability.getText();
      if (!T2functions.Is_Initial_Probability_valid(sInitial_Prob,basename,this)) return;

      //Get and test Time Intervals
      if (!T2functions.Is_Time_Intervals_valid(jTF_MM_Time_Intervals.getText(),basename,this)) return;

      //Get the options and test Precision if necessary
      if ((jCB_MM_Autocorrelation.isSelected()) ||
         (jCB_MM_Autocovariance.isSelected())  ||
         (jCB_MM_IDC.isSelected())) {
        if (!T2functions.Is_Precision_valid(jTF_MM_Precision.getText(),this)) return;
      }
      else if (!jCB_MM_Stationary_Descriptors.isSelected()) {
             javax.swing.JOptionPane.showMessageDialog(this,
             "Option(s) not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
             return;
           }

      //Get and test Reward name
      java.io.File arq_rew = new java.io.File(basename + ".rate_reward." + jTF_MM_Reward_name.getText());
      if (!(arq_rew.exists())) {
        javax.swing.JOptionPane.showMessageDialog(this,
        "File " + basename + ".rate_reward." + jTF_MM_Reward_name.getText() + " doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }

      this.setEnabled(false);

      //Get Options and call descriptors program
      if (jCB_MM_Autocorrelation.isSelected()) {
        command = "descriptors " + basename + " 0 " + jTF_MM_Reward_name.getText() + " " + jTF_MM_Precision.getText();

        if (jTB_Continuous.isSelected())
          command += " 0";
        else
          command += " 1";


        //call the T2status class that will execute the command
        status_autocorrelation = new T2status( this, "Descriptors Status", "Descriptors (Autocorr.) is running", command, 0,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_autocorrelation.show();
        Process autocorrelation = status_autocorrelation.start();
        T2enable_plot enable_autocorrelation = new T2enable_plot(autocorrelation, modelenv.curmodel, extensions, jB_Plot, modelenv.curdir);
        enable_autocorrelation.start();
      }
      if (jCB_MM_Autocovariance.isSelected()) {
        command = "descriptors " + basename + " 1 " + jTF_MM_Reward_name.getText() + " " + jTF_MM_Precision.getText();

        if (jTB_Continuous.isSelected())
          command += " 0";
        else
          command += " 1";

        //call the T2status class that will execute the command
        status_autocovariance = new T2status( this, "Descriptors Status", "Descriptors (Autocov.) is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_autocovariance.show();
        Process autocovariance = status_autocovariance.start();
        T2enable_plot enable_autocovariance = new T2enable_plot(autocovariance, modelenv.curmodel, extensions, jB_Plot, modelenv.curdir);
        enable_autocovariance.start();
      }
      if (jCB_MM_IDC.isSelected()) {
        command = "descriptors " + basename + " 2 " + jTF_MM_Reward_name.getText() + " " + jTF_MM_Precision.getText();
        //call the T2status class that will execute the command
        status_idc = new T2status( this, "Descriptors Status", "Descriptors (IDC) is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_idc.show();
        Process idc = status_idc.start();
        T2enable_plot enable_idc = new T2enable_plot(idc, modelenv.curmodel, extensions, jB_Plot, modelenv.curdir);
        enable_idc.start();
      }
      if (jCB_MM_Stationary_Descriptors.isSelected()) {
        command = "descriptors " + basename + " 3 " + jTF_MM_Reward_name.getText();
        //call the T2status class that will execute the command
        status_stationary = new T2status( this, "Descriptors Status", "Descriptors (Statio.) is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_stationary.show();
        Process stationary = status_stationary.start();
        T2enable_plot enable_stationary = new T2enable_plot(stationary, modelenv.curmodel, extensions, jB_Plot, modelenv.curdir);
        enable_stationary.start();
      }



    }

    /**********************************************************************************/
    /****************** Means that the user is on Tab Traces **************************/

    if (jTP_Descriptors.getSelectedIndex() == 1)  {

      if (T2functions.Is_some_field_missing(jP_Trace)) return;

      //verify if the parameters are numbers
      if (T2functions.Is_not_number(jTF_Traces_Number_of_samples.getText(), 0, this, "Number of samples")!=0) return;
      if (T2functions.Is_not_number(jTF_Traces_Interval_between_samples.getText(), 1, this, "Interval between samples") !=0 ) return;

      //Get the options
      if ((jCB_Traces_Autocorrelation.isSelected()) ||
          (jCB_Traces_Autocovariance.isSelected())  ||
          (jCB_Traces_IDC.isSelected())) {

        if (T2functions.Is_not_number(jTF_Traces_Limit_time_for_transient_measures.getText(), 1, this, "Limit time for transient measures") != 0) return;
        if (T2functions.Is_not_number(jTF_Traces_Points.getText(),0, this, "Number of points") != 0) return;
      }
      else if (!jCB_Traces_Stationary_Descriptors.isSelected()){
             javax.swing.JOptionPane.showMessageDialog(this,"Option(s) not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
             return;
           }

      //Get sample type
      if (jTB_Traces_ST_Rate.isSelected())
        sample_type = "r";
      else
        sample_type = "s";

      //Get sample paths distribution
      if (jTB_Traces_SPD_Fixed_size.isSelected())
        sample_path = "f";
      else
        sample_path = "e";

      this.setEnabled(false);

      //Get Options and call measure_descs program
      if (jCB_Traces_Autocorrelation.isSelected()) {
        command = "measure_descs -a=" + tracedirectory + "/" + jTF_Traces_Trace_name.getText() +
                  " -o=0 -n=" + jTF_Traces_Number_of_samples.getText() +
                  " -i=" + jTF_Traces_Interval_between_samples.getText() +
                  " -l=" + jTF_Traces_Limit_time_for_transient_measures.getText() +
                  " -t=" + sample_type +
                  " -p=" + jTF_Traces_Points.getText();
        
        System.err.println( "Trying to launch command: " + command );
        
        //call the T2status class that will execute the command
        status_trace_autocorrelation = new T2status( this, "Measure_descs Status", "Measure_descs (Autocorr.) is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_trace_autocorrelation.show();
        Process autocorrelation = status_trace_autocorrelation.start();
        T2enable_plot enable_autocorrelation = new T2enable_plot(autocorrelation, jTF_Traces_Trace_name.getText(), extensions, jB_Plot, tracedirectory);
        enable_autocorrelation.start();
      }
      if (jCB_Traces_Autocovariance.isSelected()) {
        command = "measure_descs -a=" + tracedirectory + "/" + jTF_Traces_Trace_name.getText() +
                  " -o=1 -n=" + jTF_Traces_Number_of_samples.getText() +
                  " -i=" + jTF_Traces_Interval_between_samples.getText() +
                  " -l=" + jTF_Traces_Limit_time_for_transient_measures.getText() +
                  " -t=" + sample_type +
                  " -p=" + jTF_Traces_Points.getText();
        //call the T2status class that will execute the command
        status_trace_autocovariance = new T2status( this, "Measure_descs Status", "Measure_descs (Autocov.) is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_trace_autocovariance.show();
        Process autocovariance = status_trace_autocovariance.start();
        T2enable_plot enable_autocovariance = new T2enable_plot(autocovariance, jTF_Traces_Trace_name.getText(), extensions, jB_Plot, tracedirectory);
        enable_autocovariance.start();
      }
      if (jCB_Traces_IDC.isSelected()) {
        command = "measure_descs -a=" + tracedirectory + "/" + jTF_Traces_Trace_name.getText() +
                  " -o=2 -n=" + jTF_Traces_Number_of_samples.getText() +
                  " -i=" + jTF_Traces_Interval_between_samples.getText() +
                  " -l=" + jTF_Traces_Limit_time_for_transient_measures.getText() +
                  " -t=" + sample_type +
                  " -p=" + jTF_Traces_Points.getText() +
                  " -s=" + sample_path;
        //call the T2status class that will execute the command
        status_trace_idc = new T2status( this, "Measure_descs Status", "Measure_descs (IDC) is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_trace_idc.show();
        Process idc = status_trace_idc.start();
        T2enable_plot enable_idc = new T2enable_plot(idc, jTF_Traces_Trace_name.getText(), extensions, jB_Plot, tracedirectory);
        enable_idc.start();
      }
      if (jCB_Traces_Stationary_Descriptors.isSelected()) {
        command = "measure_descs -a=" + tracedirectory + "/" + jTF_Traces_Trace_name.getText() +
                  " -o=3 -n=" + jTF_Traces_Number_of_samples.getText() +
                  " -i=" + jTF_Traces_Interval_between_samples.getText() +
                  " -l=" + jTF_Traces_Limit_time_for_transient_measures.getText() +
                  " -t=" + sample_type +
                  " -p=" + jTF_Traces_Points.getText();
        //call the T2status class that will execute the command
        status_trace_stationary = new T2status( this, "Measure_descs Status", "Measure_descs (Statio.) is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
        status_trace_stationary.show();
        Process stationary = status_trace_stationary.start();
        T2enable_plot enable_stationary = new T2enable_plot(stationary, jTF_Traces_Trace_name.getText(), extensions, jB_Plot, tracedirectory);
        enable_stationary.start();
      }
    }
    /**********************************************************************************/
    /****************** Means that the user is on CAC Algorithm ***********************/

    if (jTP_Descriptors.getSelectedIndex() == 3)  {

      String [] cmdline = cacalg.getCommandLine();

      java.util.Vector commandVect = new java.util.Vector();

      String outerr = modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen;

      String fileout =  cacalg.getOutFile() + ".CACAlg";

      commandVect.add( new T2command(cmdline, fileout, outerr ) );

      if (cmdline == null) return;


      try{
      
        java.io.FileWriter fw = new java.io.FileWriter(fileout);
      }
      catch (java.io.IOException e)
      {
        javax.swing.JOptionPane.showMessageDialog(this,
                   "Can't create output file!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }

      T2progressDialog.showDialog(this, "CAC Algorithm", "Executing CAC Algorithm", commandVect,
                    false, false);

    /*
      for (int i=0; i<cmdline.length; i++)
      {
        System.out.println(cmdline[i]);
      }
      */

    }
    /**********************************************************************************/
    /****************** Means that the user is on Trace to Histogram Mtx***********************/

    if (jTP_Descriptors.getSelectedIndex() == 2)
    {
      String cmdline = "trace2mtx";
      String parameter = "";
      Integer numI;
      Float numF;
      Process proc_traceToMtx;
     
      if (T2functions.Is_some_field_missing(jP_TraceToHistogramMtx)) return;
      
      //*** File Name ***//
      parameter = jTF_TracetoMtx_Trace_Name.getText();
      cmdline = cmdline + " -a" + parameter;

     //Get sample type
      if (jTB_TracetoMtx_ST_Rate.isSelected())
         cmdline = cmdline + " -tr ";
      else
         cmdline = cmdline + " -ts ";

      //*** Number of Samples ***/
      parameter = jT_Number_of_Samples.getText();
      try
      {
         numI = new Integer(parameter);
         cmdline = cmdline + "-n" + parameter;
      }    
      catch( Exception e){
         javax.swing.JOptionPane.showMessageDialog(this, "Number of Samples must be integer ","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      }
      //*** Interval Time ***/
      parameter = jT_Time_Interval.getText();
      try
      {
         numF = new Float(parameter);
         cmdline = cmdline + " -i" + parameter;
      }    
      catch( Exception e){
         javax.swing.JOptionPane.showMessageDialog(this, "Interval time must be float ","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      }
      //*** Uniformization Rate ***/
      parameter = jT_Uniformization_Rate.getText();
      try
      {
         numF = new Float(parameter);
         cmdline = cmdline + " -u" + parameter;
      }    
      catch( Exception e){
         javax.swing.JOptionPane.showMessageDialog(this, "Uniformization Rate must be float ","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      }
      //*** Histogram Levels ***/
      parameter = jT_Histogram_Levels.getText();
      try
      {
         numI = new Integer(parameter);
         cmdline = cmdline + " -m" + parameter;
      }    
      catch( Exception e){
         javax.swing.JOptionPane.showMessageDialog(this, "Histogram Levels must be integer ","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      }
      //*** Data Size ***/
      parameter = jT_Data_Size.getText();
      try
      {
         numF = new Float(parameter);
         cmdline = cmdline + " -b" + parameter;
      }    
      catch( Exception e){
         javax.swing.JOptionPane.showMessageDialog(this, "Data Size must be float ","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      }
      

      javax.swing.JOptionPane.showMessageDialog(this, cmdline,"Trace to Histogram MTX Run",javax.swing.JOptionPane.INFORMATION_MESSAGE);
      try{
         System.out.println( "cmd:" + cmdline );
         proc_traceToMtx = Runtime.getRuntime().exec(new String[] { "bash" , "-c" , cmdline} );
         //proc_traceToMtx = Runtime.getRuntime().exec( cmdline );
      }
      catch( Exception e){
         javax.swing.JOptionPane.showMessageDialog(this, "Error running script ","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      }    
   }
    
  }//GEN-LAST:event_jB_EvaluateActionPerformed

/**********************************************************************************/
/******************************** Close Button ************************************/
  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed
    //update the figs and buttons!
    modelenv.update_descriptors();

    //destroy the process and dispose the status if necessary!
    if (status_autocorrelation != null) {
      status_autocorrelation.Proc.destroy();
      status_autocorrelation.dispose();
    }
    if (status_autocovariance != null) {
      status_autocovariance.Proc.destroy();
      status_autocovariance.dispose();
    }
    if (status_idc != null) {
      status_idc.Proc.destroy();
      status_idc.dispose();
    }
    if (status_stationary != null) {
      status_stationary.Proc.destroy();
      status_stationary.dispose();
    }
    if (status_trace_autocorrelation != null) {
      status_trace_autocorrelation.Proc.destroy();
      status_trace_autocorrelation.dispose();
    }
    if (status_trace_autocovariance != null) {
      status_trace_autocovariance.Proc.destroy();
      status_trace_autocovariance.dispose();
    }
    if (status_trace_idc != null) {
      status_trace_idc.Proc.destroy();
      status_trace_idc.dispose();
    }
    if (status_trace_stationary != null) {
      status_trace_stationary.Proc.destroy();
      status_trace_stationary.dispose();
    }

    modelenv.setEnabled(true);
    dispose();
  }//GEN-LAST:event_jB_CloseActionPerformed


/**********************************************************************************/
/* Trace Options, verify checkboxes (Enable and Disable the Precision box)*********/

/**********************************************************************************/
/************ Enable and Disable the boxes in initial probability *****************/
  private void jTB_MM_IP_Equiprobable_SetStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_MM_IP_Equiprobable_SetStateChanged
    jL_MM_IP_Initial_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
    jL_MM_IP_Final_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
    jL_MM_IP_Probability.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
    jTF_MM_IP_Initial_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
    jTF_MM_IP_Final_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
    jTF_MM_IP_Probability.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
    jB_MM_IP_Add.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
    jTF_MM_Initial_Probability.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
  }//GEN-LAST:event_jTB_MM_IP_Equiprobable_SetStateChanged

/**********************************************************************************/
/* MM Options, verify checkboxes (Enable and Disable the Precision box)************/
  private void StateChanged_MM (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_StateChanged_MM
    if ((jCB_MM_Autocorrelation.isSelected()) ||
       (jCB_MM_Autocovariance.isSelected()) ||
       (jCB_MM_IDC.isSelected())) {
      // Autocorrelation and Autocovariance need Time Intervals and Precision

      //Time intervals
      jL_MM_Time_Intervals.setEnabled(true);
      jTF_MM_Time_Intervals.setEnabled(true);

      jL_MM_TI_Initial_Time.setEnabled(true);
      jTF_MM_TI_Initial_Time.setEnabled(true);
      jL_MM_TI_Final_Time.setEnabled(true);
      jTF_MM_TI_Final_Time.setEnabled(true);
      jL_MM_TI_Number_of_points.setEnabled(true);
      jTF_MM_TI_Number_of_points.setEnabled(true);
      jB_MM_TI_Add.setEnabled(true);

      //Precision
      jL_MM_Precision.setEnabled(true);
      jTF_MM_Precision.setEnabled(true);

      // IDC needs Initial Probability, Time Intervals and Precision
      if (jCB_MM_IDC.isSelected()) {
        //Initial Probability
        jL_MM_Initial_Probability.setEnabled(true);
        jTF_MM_Initial_Probability.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());

        jTB_MM_IP_Equiprobable.setEnabled(true);
        jL_MM_IP_Equiprobable.setEnabled(true);
        jTB_MM_IP_Initial_State.setEnabled(true);
        jL_MM_IP_InitialState.setEnabled(true);
        jTB_MM_IP_Equiprobable_Set.setEnabled(true);
        jL_MM_IP_Equiprobable_Set.setEnabled(true);

        jL_MM_IP_Initial_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
        jTF_MM_IP_Initial_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
        jL_MM_IP_Final_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
        jTF_MM_IP_Final_State.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
        jL_MM_IP_Probability.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
        jTF_MM_IP_Probability.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());

        jB_MM_IP_Add.setEnabled(jTB_MM_IP_Equiprobable_Set.isSelected());
      }
      else
      {
        //Initial Probability must be disabled
        jL_MM_Initial_Probability.setEnabled(false);
        jTF_MM_Initial_Probability.setEnabled(false);

        jTB_MM_IP_Equiprobable.setEnabled(false);
        jL_MM_IP_Equiprobable.setEnabled(false);
        jTB_MM_IP_Initial_State.setEnabled(false);
        jL_MM_IP_InitialState.setEnabled(false);
        jTB_MM_IP_Equiprobable_Set.setEnabled(false);
        jL_MM_IP_Equiprobable_Set.setEnabled(false);

        jL_MM_IP_Initial_State.setEnabled(false);
        jTF_MM_IP_Initial_State.setEnabled(false);
        jL_MM_IP_Final_State.setEnabled(false);
        jTF_MM_IP_Final_State.setEnabled(false);
        jL_MM_IP_Probability.setEnabled(false);
        jTF_MM_IP_Probability.setEnabled(false);

        jB_MM_IP_Add.setEnabled(false);
      }
    }
    else {
      //Initial Probability
      jL_MM_Initial_Probability.setEnabled(false);
      jTF_MM_Initial_Probability.setEnabled(false);

      jTB_MM_IP_Equiprobable.setEnabled(false);
      jL_MM_IP_Equiprobable.setEnabled(false);
      jTB_MM_IP_Initial_State.setEnabled(false);
      jL_MM_IP_InitialState.setEnabled(false);
      jTB_MM_IP_Equiprobable_Set.setEnabled(false);
      jL_MM_IP_Equiprobable_Set.setEnabled(false);

      jL_MM_IP_Initial_State.setEnabled(false);
      jTF_MM_IP_Initial_State.setEnabled(false);
      jL_MM_IP_Final_State.setEnabled(false);
      jTF_MM_IP_Final_State.setEnabled(false);
      jL_MM_IP_Probability.setEnabled(false);
      jTF_MM_IP_Probability.setEnabled(false);

      jB_MM_IP_Add.setEnabled(false);

      //Time intervals
      jL_MM_Time_Intervals.setEnabled(false);
      jTF_MM_Time_Intervals.setEnabled(false);

      jL_MM_TI_Initial_Time.setEnabled(false);
      jTF_MM_TI_Initial_Time.setEnabled(false);
      jL_MM_TI_Final_Time.setEnabled(false);
      jTF_MM_TI_Final_Time.setEnabled(false);
      jL_MM_TI_Number_of_points.setEnabled(false);
      jTF_MM_TI_Number_of_points.setEnabled(false);
      jB_MM_TI_Add.setEnabled(false);

      //Precision
      jL_MM_Precision.setEnabled(false);
      jTF_MM_Precision.setEnabled(false);
    }
  }//GEN-LAST:event_StateChanged_MM

/**********************************************************************************/
/************************* Choose Trace file **************************************/
  private void jB_Trace_name_File_ChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Trace_name_File_ChooserActionPerformed
    if (fchooser.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION) {
      if (fchooser.getSelectedFile().exists()) {
        jTF_Traces_Trace_name.setText(fchooser.getSelectedFile().getName());

        tracename      = fchooser.getSelectedFile().getName();
        tracedirectory = fchooser.getSelectedFile().getAbsolutePath().substring( 0,
                         fchooser.getSelectedFile().getAbsolutePath().length() -
                         fchooser.getSelectedFile().getName().length() - 1 );
        enable_plot(2);
      }
    }
  }//GEN-LAST:event_jB_Trace_name_File_ChooserActionPerformed

/**********************************************************************************/
/************************* Choose Reward file *************************************/
  private void jB_MM_Reward_File_ChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_MM_Reward_File_ChooserActionPerformed
    if (fchooser_rew.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION) {
      if (fchooser_rew.getSelectedFile().exists()) {
        jTF_MM_Reward_name.setText( fchooser_rew.getSelectedFile().getName().substring(new String(modelenv.curmodel).length()+13) );
      }
    }
  }//GEN-LAST:event_jB_MM_Reward_File_ChooserActionPerformed


/**********************************************************************************/
/***************************** Adding Time Intervals ******************************/
  private void jB_MM_TI_AddActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_MM_TI_AddActionPerformed
    if (jTF_MM_TI_Initial_Time.getText().trim().compareTo("")!=0) {

      if ((jTF_MM_TI_Final_Time.getText().trim().compareTo("")==0) && (jTF_MM_TI_Number_of_points.getText().trim().compareTo("")==0)) {
      //only initial time was specified
        if (jTF_MM_Time_Intervals.getText().trim().compareTo("")==0) {
          jTF_MM_Time_Intervals.setText(jTF_MM_TI_Initial_Time.getText());
        }
        else {
          jTF_MM_Time_Intervals.setText(jTF_MM_Time_Intervals.getText()+"; "+ jTF_MM_TI_Initial_Time.getText());
        }
        jTF_MM_TI_Initial_Time.setText("");
      }
      else if ((jTF_MM_TI_Final_Time.getText().trim().compareTo("")!=0) && (jTF_MM_TI_Number_of_points.getText().trim().compareTo("")!=0)) {
      //all fields were specified
             if (jTF_MM_Time_Intervals.getText().trim().compareTo("")==0) {
               jTF_MM_Time_Intervals.setText("n "+ jTF_MM_TI_Initial_Time.getText()+" "+jTF_MM_TI_Final_Time.getText()+" "+jTF_MM_TI_Number_of_points.getText());
             }
             else {
               jTF_MM_Time_Intervals.setText(jTF_MM_Time_Intervals.getText()+"; n "+ jTF_MM_TI_Initial_Time.getText()+" "+jTF_MM_TI_Final_Time.getText()+" "+jTF_MM_TI_Number_of_points.getText());
             }
             jTF_MM_TI_Initial_Time.setText("");
             jTF_MM_TI_Final_Time.setText("");
             jTF_MM_TI_Number_of_points.setText("");
           }
      else if ((jTF_MM_TI_Final_Time.getText().trim().compareTo("")==0) && (jTF_MM_TI_Number_of_points.getText().trim().compareTo("")!=0)) {
             javax.swing.JOptionPane.showMessageDialog(this,"Final Time not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
             return;
           }
      else if ((jTF_MM_TI_Final_Time.getText().trim().compareTo("")!=0) && (jTF_MM_TI_Number_of_points.getText().trim().compareTo("")==0)) {
             javax.swing.JOptionPane.showMessageDialog(this,"Number of Points not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
             return;
           }
    }
    else {
      javax.swing.JOptionPane.showMessageDialog(this,"Initial Time not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }
  }//GEN-LAST:event_jB_MM_TI_AddActionPerformed


/**********************************************************************************/
/************************ Adding Initial Probability ******************************/
  private void jB_MM_IP_AddActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_MM_IP_AddActionPerformed
  //if the user did not specify the Initial State Field
  if (jTF_MM_IP_Initial_State.getText().trim().compareTo("")==0) {
      javax.swing.JOptionPane.showMessageDialog(this,"Initial State not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }
    else {
      //The user can specify Initial State and Probabity or Initial, Final State and Probability

      //The user specified only Initial State and probability
      if (jTF_MM_IP_Final_State.getText().trim().compareTo("")==0) {
        if (jTF_MM_IP_Probability.getText().trim().compareTo("")==0) {
          javax.swing.JOptionPane.showMessageDialog(this,"Probability not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return;
        }
        else {//everything is ok
          if (jTF_MM_Initial_Probability.getText().trim().compareTo("")==0) {
            jTF_MM_Initial_Probability.setText(jTF_MM_IP_Initial_State.getText()+" "+jTF_MM_IP_Probability.getText());
          }
          else {
            jTF_MM_Initial_Probability.setText(jTF_MM_Initial_Probability.getText()+"; "+jTF_MM_IP_Initial_State.getText()+" "+jTF_MM_IP_Probability.getText());
          }
          jTF_MM_IP_Initial_State.setText("");
          jTF_MM_IP_Probability.setText("");
        }
      }
      else {
        //The user specified Initial, Final State and Probability
        if (jTF_MM_IP_Probability.getText().trim().compareTo("")==0) {
          javax.swing.JOptionPane.showMessageDialog(this,"Probability not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return;
        }
        else {//everything is ok
          if (jTF_MM_Initial_Probability.getText().trim().compareTo("")==0) {
            jTF_MM_Initial_Probability.setText("e "+ jTF_MM_IP_Initial_State.getText()+" "+jTF_MM_IP_Final_State.getText()+" "+jTF_MM_IP_Probability.getText());
          }
          else {
            jTF_MM_Initial_Probability.setText(jTF_MM_Initial_Probability.getText()+"; e "+ jTF_MM_IP_Initial_State.getText()+" "+jTF_MM_IP_Final_State.getText()+" "+jTF_MM_IP_Probability.getText());
          }
          jTF_MM_IP_Initial_State.setText("");
          jTF_MM_IP_Final_State.setText("");
          jTF_MM_IP_Probability.setText("");
        }
      }
    }
  }//GEN-LAST:event_jB_MM_IP_AddActionPerformed


  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CloseActionPerformed(null);
  }//GEN-LAST:event_exitForm

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jL_Traces_ST_Size;
    private javax.swing.JTextField jTF_MM_Initial_Probability;
    private javax.swing.JLabel jL_Traces_SPD_Fixed_size;
    private javax.swing.JTextField jTF_MM_IP_Probability;
    private javax.swing.JLabel jL_Time_Interval;
    private javax.swing.JLabel jL_MM_Reward_name;
    private javax.swing.JButton jB_Plot;
    private javax.swing.JLabel jL_Traces_SPD_Edsize;
    private javax.swing.JCheckBox jCB_MM_Autocorrelation;
    private javax.swing.JToggleButton jTB_Traces_SPD_Edsize;
    private javax.swing.JTextField jT_Histogram_Levels;
    private javax.swing.JButton jB_Trace_name_File_Chooser;
    private javax.swing.JLabel jL_MM_Time_Intervals;
    private javax.swing.JCheckBox jCB_Traces_Stationary_Descriptors;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JLabel jL_Status_Bar_Dir;
    private javax.swing.JButton jB_MM_TI_Add;
    private javax.swing.JLabel jL_Traces_ST_Rate1;
    private javax.swing.JLabel jL_Status_Bar_Model;
    private javax.swing.JLabel jL_MM_Initial_Probability;
    private javax.swing.JToggleButton jTB_MM_IP_Equiprobable;
    private javax.swing.JLabel jL_Traces_Trace_name;
    private javax.swing.JTextField jTF_MM_IP_Final_State;
    private javax.swing.JTextField jT_Uniformization_Rate;
    private javax.swing.JPanel jP_Traces_SPD;
    private javax.swing.JLabel jL_Number_of_Samples;
    private javax.swing.JToggleButton jTB_Traces_ST_Rate;
    private javax.swing.JLabel jL_Traces_Trace_Name;
    private javax.swing.JTextField jTF_Traces_Interval_between_samples;
    private javax.swing.JToggleButton jTB_Traces_SPD_Fixed_size;
    private javax.swing.JTextField jTF_Traces_Points;
    private javax.swing.JCheckBox jCB_MM_IDC;
    private javax.swing.JLabel jL_MM_TI_Final_Time;
    private javax.swing.JLabel jL_Traces_ST_Size1;
    private javax.swing.JPanel jP_Traces_Options;
    private javax.swing.JTextField jT_Number_of_Samples;
    private javax.swing.JToggleButton jTB_Continuous;
    private javax.swing.JButton jB_Evaluate;
    private javax.swing.JToggleButton jTB_TracetoMtx_ST_Rate;
    private javax.swing.JButton jB_TracetoMtx_name_File_Chooser1;
    private javax.swing.JTextField jT_Time_Interval;
    private javax.swing.JButton jB_MM_Reward_File_Chooser;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jL_MM_Precision;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jL_Uniformization_Rates;
    private javax.swing.JPanel jP_Makovian_Models;
    private javax.swing.JPanel jP_MM_Options;
    private javax.swing.JTextField jTF_MM_Precision;
    private javax.swing.JToggleButton jTB_MM_IP_Equiprobable_Set;
    private javax.swing.JPanel jP_Traces_Sample_type1;
    private javax.swing.JTextField jTF_Traces_Limit_time_for_transient_measures;
    private javax.swing.JTextField jTF_MM_TI_Final_Time;
    private javax.swing.JTextField jTF_MM_Reward_name;
    private javax.swing.JToggleButton jTB_MM_IP_Initial_State;
    private javax.swing.JTextField jTF_MM_Time_Intervals;
    private javax.swing.JLabel jL_Traces_ST_Rate;
    private javax.swing.JCheckBox jCB_Traces_Autocovariance;
    private javax.swing.JLabel jL_MM_IP_InitialState;
    private javax.swing.JPanel jP_Traces;
    private javax.swing.JToggleButton jTB_Slotted;
    private javax.swing.JLabel jL_MM_IP_Probability;
    private javax.swing.JLabel jL_Traces_Number_of_samples;
    private javax.swing.JLabel jL_MM_TI_Initial_Time;
    private javax.swing.JCheckBox jCB_MM_Autocovariance;
    private javax.swing.JPanel jP_Trace;
    private javax.swing.JLabel jL_Descriptors_Picture;
    private javax.swing.JTextField jTF_MM_TI_Initial_Time;
    private javax.swing.JButton jB_Parameters;
    private javax.swing.JTextField jTF_Traces_Trace_name;
    private javax.swing.JCheckBox jCB_MM_Stationary_Descriptors;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTabbedPane jTP_Descriptors;
    private javax.swing.JPanel jP_Markovian;
    private javax.swing.JTextField jTF_TracetoMtx_Trace_Name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTF_MM_IP_Initial_State;
    private javax.swing.JLabel jL_MM_IP_Equiprobable;
    private javax.swing.JLabel jL_MM_IP_Equiprobable_Set;
    private javax.swing.JPanel jP_TraceToHistogramMtx;
    private javax.swing.JToggleButton jTB_Traces_ST_Size;
    private javax.swing.JLabel jL_MM_IP_Final_State;
    private javax.swing.JPanel jP_Traces_Sample_type;
    private javax.swing.JCheckBox jCB_Traces_IDC;
    private javax.swing.JLabel jL_Traces_Interval_between_samples;
    private javax.swing.JLabel jL_Data_Size;
    private javax.swing.JTextField jT_Data_Size;
    private javax.swing.JTextField jTF_MM_TI_Number_of_points;
    private javax.swing.JTextField jTF_Traces_Number_of_samples;
    private javax.swing.JToggleButton jTB_TracetoMtx_ST_Size;
    private javax.swing.JLabel jL_Histogram_Levels;
    private javax.swing.JButton jB_MM_IP_Add;
    private javax.swing.JCheckBox jCB_Traces_Autocorrelation;
    private javax.swing.JLabel jL_MM_IP_Initial_State;
    private javax.swing.JLabel jL_Traces_Limit_time_for_transient_measures;
    private javax.swing.JButton jB_Close;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JLabel jL_Traces_Points;
    private javax.swing.JLabel jL_MM_TI_Number_of_points;
    // End of variables declaration//GEN-END:variables

  private T2literal literal;

  private T2plot plot;
  private T2status status_autocorrelation;
  private T2status status_autocovariance;
  private T2status status_idc;
  private T2status status_stationary;
  private T2status status_trace_autocorrelation;
  private T2status status_trace_autocovariance;
  private T2status status_trace_idc;
  private T2status status_trace_stationary;

  private javax.swing.JFileChooser fchooser;
  private javax.swing.JFileChooser fchooser_rew;
  private ExampleFileFilterEx      objFilter_rew;
  private ExampleFileFilter        objFilter;
  private String[] extensions = {".autocorrelation",".autocovariance",".idc",".stationary_Descriptors",
                                 ".seq_autocorrelation",".seq_autocovariance",".seq_idc",".seq_stationary_Descriptors"};

  public  T2modelenv modelenv;
  public String tracename, tracedirectory;

  private boolean markovEvalButState;
  private boolean markovParButState;

  private T2cacalg cacalg;
// End of variables declaration

}
