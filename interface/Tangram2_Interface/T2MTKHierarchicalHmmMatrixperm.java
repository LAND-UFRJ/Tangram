/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * T2MTKHierarchicalHmmMatrixperm.java
 *
 * Created on Jul 15, 2009, 3:50:01 PM
 */

package Tangram2;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author balves
 */
public class T2MTKHierarchicalHmmMatrixperm extends javax.swing.JFrame {

    /** Creates new form T2MTKHierarchicalHmmMatrixperm */
    public T2MTKHierarchicalHmmMatrixperm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tangram II");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Select:");

        jButton1.setText("Show");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_hmm_param_vis.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, 352, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        DefaultComboBoxModel CBModel = new DefaultComboBoxModel();
        CBModel.addElement("Hidden States Transition Probability Matrix");
        for(int i=0;i<T2MTKHierarchicalHmmReadForm.hStates;i++){
            CBModel.addElement("Lower-level Chain inside Hidden State "+i);
        }
        jComboBox1.setModel(CBModel);
    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if(jComboBox1.getSelectedIndex()==0){

            // Hidden State Matrix

            T2modelenv modelenv = T2MTKMain.T2MainWindow;

            String parsarray = "";

            parsarray += "mtx_vis-st_permut ";
            parsarray += "-fn ";
            parsarray += modelenv.curdir + "/" + modelenv.curmodel+".HMM.hidden_st ";
            parsarray +="-sc ";
            parsarray +="Yellow ";
            parsarray +="-fc ";
            parsarray +="Red ";
            parsarray +="-bc ";
            parsarray +="White ";
            parsarray +="-cd ";
            parsarray +="8 ";
            parsarray +="-zo ";
            parsarray +="2 ";

            try
            {
              Process matrixpermproc;

              matrixpermproc = Runtime.getRuntime().exec(parsarray);

              threadCapOut.takeoutput_process(matrixpermproc, (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Matrix Visualization", modelenv.analytical );
              new threadCapOut( matrixpermproc.getErrorStream(), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) ).start();

              matrixpermproc.waitFor();

            }
            catch(Exception e)
            {
              System.out.println("Exception running " + e.toString());
              System.out.println(parsarray);
            }

        }else{
            
           // Internal Chains

            int state = jComboBox1.getSelectedIndex()-1;

            T2modelenv modelenv = T2MTKMain.T2MainWindow;

            copyFile(modelenv.curdir + "/" + modelenv.curmodel+".HMM.internal_st.vstat", modelenv.curdir + "/" + modelenv.curmodel+".HMM.internal_st_"+state+".vstat");
            copyFile(modelenv.curdir + "/" + modelenv.curmodel+".HMM.internal_st.states", modelenv.curdir + "/" + modelenv.curmodel+".HMM.internal_st_"+state+".states");
            
            String parsarray = "";

            parsarray += "mtx_vis-st_permut ";
            parsarray += "-fn ";
            parsarray += modelenv.curdir + "/" + modelenv.curmodel+".HMM.internal_st_"+state+" ";
            parsarray +="-sc ";
            parsarray +="Yellow ";
            parsarray +="-fc ";
            parsarray +="Red ";
            parsarray +="-bc ";
            parsarray +="White ";
            parsarray +="-cd ";
            parsarray +="8 ";
            parsarray +="-zo ";
            parsarray +="2 ";

            try
            {
              Process matrixpermproc;

              matrixpermproc = Runtime.getRuntime().exec(parsarray);

              threadCapOut.takeoutput_process(matrixpermproc, (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Matrix Visualization", modelenv.analytical );
              new threadCapOut( matrixpermproc.getErrorStream(), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) ).start();

              matrixpermproc.waitFor();

            }
            catch(Exception e)
            {
              System.out.println("Exception running " + e.toString());
              System.out.println(parsarray);
            }


        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void copyFile(String srFile, String dtFile){
    try{
      File f1 = new File(srFile);
      File f2 = new File(dtFile);
      InputStream in = new FileInputStream(f1);

      //For Append the file.
      //OutputStream out = new FileOutputStream(f2,true);

      //For Overwrite the file.
      OutputStream out = new FileOutputStream(f2);

      byte[] buf = new byte[1024];
      int len;
      while ((len = in.read(buf)) > 0){
        out.write(buf, 0, len);
      }
      in.close();
      out.close();
      
    } catch(FileNotFoundException ex){
      T2MTKCommon.errorMessage("",ex.getMessage() + " in the specified directory.");
      
    } catch(IOException e){
      T2MTKCommon.errorMessage("",e.getMessage());
    }
  }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new T2MTKHierarchicalHmmMatrixperm().setVisible(true);
            }
        });
    }

    public static int symbols;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

}
