/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2measures extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2measures(T2modelenv mainholder) {
    int retval;

    modelenv=mainholder;
    initComponents ();
    try{
      initComponentsManual ();
    }
    catch(java.io.IOException e){
      javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + e.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    pack ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jP_Measures_of_Interest = new javax.swing.JPanel();
        jP_Files = new javax.swing.JPanel();
        jL_State_Probabilities_File_Name = new javax.swing.JLabel();
        jL_Measures_of_Interest_File_Name = new javax.swing.JLabel();
        jTF_State_Probabilities_File_Name = new javax.swing.JTextField();
        jTF_Measures_of_Interest_File_Name = new javax.swing.JTextField();
        jB_St_Prob_File_Chooser = new javax.swing.JButton();
        jTP_Options = new javax.swing.JTabbedPane();
        jP_PMF = new javax.swing.JPanel();
        jSP_Choose_Variables = new javax.swing.JScrollPane();
        jL_Choose_Variable = new javax.swing.JList();
        jSP_Selected_Variables = new javax.swing.JScrollPane();
        jL_Selected_Variable = new javax.swing.JList();
        jB_PMF_add = new javax.swing.JButton();
        jB_PMF_add_all = new javax.swing.JButton();
        jB_PMF_remove = new javax.swing.JButton();
        jB_PMF_remove_all = new javax.swing.JButton();
        jL_Choose_Variables = new javax.swing.JLabel();
        jL_Selected_Variables = new javax.swing.JLabel();
        jP_Function_of_state_variables = new javax.swing.JPanel();
        jTB_FSV_buttons_1 = new javax.swing.JToolBar();
        jB_FSV_plus = new javax.swing.JButton();
        jB_FSV_minus = new javax.swing.JButton();
        jB_FSV_multiply = new javax.swing.JButton();
        jB_FSV_divide = new javax.swing.JButton();
        jB_FSV_open_parenthesis = new javax.swing.JButton();
        jB_FSV_close_parenthesis = new javax.swing.JButton();
        jTB_FSV_buttons_2 = new javax.swing.JToolBar();
        jB_FSV_less = new javax.swing.JButton();
        jB_FSV_bigger = new javax.swing.JButton();
        jB_FSV_less_or_equal = new javax.swing.JButton();
        jB_FSV_bigger_or_equal = new javax.swing.JButton();
        jB_FSV_equal = new javax.swing.JButton();
        jB_FSV_percent = new javax.swing.JButton();
        jL_FSV_Function = new javax.swing.JLabel();
        jTF_FSV_Function = new javax.swing.JTextField();
        jSP_FSV_variables = new javax.swing.JScrollPane();
        jL_FSV_variables = new javax.swing.JList();
        jP_Probability_of_a_set = new javax.swing.JPanel();
        jTB_PSet_Buttons_1 = new javax.swing.JToolBar();
        jB_PSet_and = new javax.swing.JButton();
        jB_PSet_or = new javax.swing.JButton();
        jB_PSet_not = new javax.swing.JButton();
        jB_PSet_open_parenthesis = new javax.swing.JButton();
        jB_PSet_close_parenthesis = new javax.swing.JButton();
        jB_PSet_not_equal = new javax.swing.JButton();
        jTB_PSet_Buttons_2 = new javax.swing.JToolBar();
        jB_PSet_less = new javax.swing.JButton();
        jB_PSet_bigger = new javax.swing.JButton();
        jB_PSet_less_or_equal = new javax.swing.JButton();
        jB_PSet_bigger_or_equal = new javax.swing.JButton();
        jB_PSet_equal = new javax.swing.JButton();
        jB_PSet_percent = new javax.swing.JButton();
        jTB_PSet_Buttons_3 = new javax.swing.JToolBar();
        jB_PSet_plus = new javax.swing.JButton();
        jB_PSet_minus = new javax.swing.JButton();
        jB_PSet_multiply = new javax.swing.JButton();
        jB_PSet_divide = new javax.swing.JButton();
        jL_PSet_Function = new javax.swing.JLabel();
        jTF_PSet_Function = new javax.swing.JTextField();
        jSP_PSet_variables = new javax.swing.JScrollPane();
        jL_PSet_variables = new javax.swing.JList();
        jP_AvgReward = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSP_reward = new javax.swing.JScrollPane();
        jL_reward = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSP_Imp_Reward = new javax.swing.JScrollPane();
        jL_impulse_reward = new javax.swing.JList();
        jP_Line_1 = new javax.swing.JPanel();
        jP_Line_2 = new javax.swing.JPanel();
        jP_Conditional = new javax.swing.JPanel();
        jTF_Conditional_Function = new javax.swing.JTextField();
        jL_Conditional_Function = new javax.swing.JLabel();
        jTB_Conditional_Buttons_1 = new javax.swing.JToolBar();
        jB_Conditional_and = new javax.swing.JButton();
        jB_Conditional_or = new javax.swing.JButton();
        jB_Conditional_not = new javax.swing.JButton();
        jB_Conditional_open_parenthesis = new javax.swing.JButton();
        jB_Conditional_close_parenthesis = new javax.swing.JButton();
        jB_Conditional_not_equal = new javax.swing.JButton();
        jTB_Conditional_Buttons_2 = new javax.swing.JToolBar();
        jB_Conditional_less = new javax.swing.JButton();
        jB_Conditional_bigger = new javax.swing.JButton();
        jB_Conditional_less_or_equal = new javax.swing.JButton();
        jB_Conditional_bigger_or_equal = new javax.swing.JButton();
        jB_Conditional_equal = new javax.swing.JButton();
        jB_Conditional_percent = new javax.swing.JButton();
        jTB_Conditional_Buttons_3 = new javax.swing.JToolBar();
        jB_Conditional_plus = new javax.swing.JButton();
        jB_Conditional_minus = new javax.swing.JButton();
        jB_Conditional_multiply = new javax.swing.JButton();
        jB_Conditional_divide = new javax.swing.JButton();
        jSP_Conditional_variables = new javax.swing.JScrollPane();
        jL_Conditional_variables = new javax.swing.JList();
        jCB_Conditional = new javax.swing.JCheckBox();
        jB_Evaluate = new javax.swing.JButton();
        jB_Plot = new javax.swing.JButton();
        jB_Close = new javax.swing.JButton();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir = new javax.swing.JLabel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jL_Tangram_Picture = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Measures of Interest]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jP_Measures_of_Interest.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Measures_of_Interest.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Files.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jL_State_Probabilities_File_Name.setText("State Probabilities File Name");
        jL_State_Probabilities_File_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Files.add(jL_State_Probabilities_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jL_Measures_of_Interest_File_Name.setText("Measures of Interest File Name");
        jL_Measures_of_Interest_File_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Measures_of_Interest_File_Name.setName("");
        jP_Files.add(jL_Measures_of_Interest_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, -1, -1));

        jP_Files.add(jTF_State_Probabilities_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 5, 297, 20));

        jP_Files.add(jTF_Measures_of_Interest_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 320, 20));

        jB_St_Prob_File_Chooser.setText("...");
        jB_St_Prob_File_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_St_Prob_File_ChooserActionPerformed(evt);
            }
        });

        jP_Files.add(jB_St_Prob_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(528, 5, 22, 20));

        jP_Measures_of_Interest.add(jP_Files, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 3, -1, -1));

        jTP_Options.setName("");
        jTP_Options.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_Options.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTP_OptionsStateChanged(evt);
            }
        });

        jP_PMF.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jL_Choose_Variable.setBackground(new java.awt.Color(204, 204, 204));
        jSP_Choose_Variables.setViewportView(jL_Choose_Variable);

        jP_PMF.add(jSP_Choose_Variables, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 200, 160));

        jL_Selected_Variable.setBackground(new java.awt.Color(204, 204, 204));
        jSP_Selected_Variables.setViewportView(jL_Selected_Variable);

        jP_PMF.add(jSP_Selected_Variables, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 200, 160));

        jB_PMF_add.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PMF_add.setText("add");
        jB_PMF_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PMF_addActionPerformed(evt);
            }
        });

        jP_PMF.add(jB_PMF_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 90, 20));

        jB_PMF_add_all.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PMF_add_all.setText("add all");
        jB_PMF_add_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PMF_add_allActionPerformed(evt);
            }
        });

        jP_PMF.add(jB_PMF_add_all, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, 90, 20));

        jB_PMF_remove.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PMF_remove.setText("remove");
        jB_PMF_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PMF_removeActionPerformed(evt);
            }
        });

        jP_PMF.add(jB_PMF_remove, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 90, 20));

        jB_PMF_remove_all.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PMF_remove_all.setText("remove all");
        jB_PMF_remove_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PMF_remove_allActionPerformed(evt);
            }
        });

        jP_PMF.add(jB_PMF_remove_all, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 90, 20));

        jL_Choose_Variables.setText("Choose Variables:");
        jL_Choose_Variables.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_PMF.add(jL_Choose_Variables, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        jL_Selected_Variables.setText("Selected Variables:");
        jL_Selected_Variables.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_PMF.add(jL_Selected_Variables, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 5, -1, -1));

        jTP_Options.addTab("PMF of one or more state variables", null, jP_PMF, "");

        jP_Function_of_state_variables.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_FSV_buttons_1.setFloatable(false);
        jB_FSV_plus.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_plus.setText("+");
        jB_FSV_plus.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_plus.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_plus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_FSV_plus.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_plusActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_1.add(jB_FSV_plus);

        jB_FSV_minus.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_minus.setText("-");
        jB_FSV_minus.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_minus.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_minus.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_minusActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_1.add(jB_FSV_minus);

        jB_FSV_multiply.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_multiply.setText("x");
        jB_FSV_multiply.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_multiply.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_multiply.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_multiplyActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_1.add(jB_FSV_multiply);

        jB_FSV_divide.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_divide.setText("/");
        jB_FSV_divide.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_divide.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_divide.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_divideActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_1.add(jB_FSV_divide);

        jB_FSV_open_parenthesis.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_open_parenthesis.setText("(");
        jB_FSV_open_parenthesis.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_open_parenthesis.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_open_parenthesis.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_open_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_open_parenthesisActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_1.add(jB_FSV_open_parenthesis);

        jB_FSV_close_parenthesis.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_close_parenthesis.setText(")");
        jB_FSV_close_parenthesis.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_close_parenthesis.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_close_parenthesis.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_close_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_close_parenthesisActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_1.add(jB_FSV_close_parenthesis);

        jP_Function_of_state_variables.add(jTB_FSV_buttons_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 500, 24));

        jTB_FSV_buttons_2.setFloatable(false);
        jB_FSV_less.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_less.setText("<");
        jB_FSV_less.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_less.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_less.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_FSV_less.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_less.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_lessActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_2.add(jB_FSV_less);

        jB_FSV_bigger.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_bigger.setText(">");
        jB_FSV_bigger.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_bigger.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_bigger.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_bigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_biggerActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_2.add(jB_FSV_bigger);

        jB_FSV_less_or_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_less_or_equal.setText("<=");
        jB_FSV_less_or_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_less_or_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_less_or_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_less_or_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_less_or_equalActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_2.add(jB_FSV_less_or_equal);

        jB_FSV_bigger_or_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_bigger_or_equal.setText(">=");
        jB_FSV_bigger_or_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_bigger_or_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_bigger_or_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_bigger_or_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_bigger_or_equalActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_2.add(jB_FSV_bigger_or_equal);

        jB_FSV_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_equal.setText("=");
        jB_FSV_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_equalActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_2.add(jB_FSV_equal);

        jB_FSV_percent.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_FSV_percent.setText("%");
        jB_FSV_percent.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_FSV_percent.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_FSV_percent.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_FSV_percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_FSV_percentActionPerformed(evt);
            }
        });

        jTB_FSV_buttons_2.add(jB_FSV_percent);

        jP_Function_of_state_variables.add(jTB_FSV_buttons_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 34, 390, 24));

        jL_FSV_Function.setText("Function:");
        jL_FSV_Function.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Function_of_state_variables.add(jL_FSV_Function, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, -1, -1));

        jP_Function_of_state_variables.add(jTF_FSV_Function, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 125, 330, 20));

        jL_FSV_variables.setBackground(new java.awt.Color(204, 204, 204));
        jL_FSV_variables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_FSV_variablesMouseClicked(evt);
            }
        });

        jSP_FSV_variables.setViewportView(jL_FSV_variables);

        jP_Function_of_state_variables.add(jSP_FSV_variables, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 170));

        jTP_Options.addTab("Function of state variables", null, jP_Function_of_state_variables, "");

        jP_Probability_of_a_set.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_PSet_Buttons_1.setFloatable(false);
        jB_PSet_and.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_and.setText("and");
        jB_PSet_and.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_and.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_and.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_PSet_and.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_and.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_andActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_1.add(jB_PSet_and);

        jB_PSet_or.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_or.setText("or");
        jB_PSet_or.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_or.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_or.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_or.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_orActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_1.add(jB_PSet_or);

        jB_PSet_not.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_not.setText("not");
        jB_PSet_not.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_not.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_not.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_not.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_notActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_1.add(jB_PSet_not);

        jB_PSet_open_parenthesis.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_open_parenthesis.setText("(");
        jB_PSet_open_parenthesis.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_open_parenthesis.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_open_parenthesis.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_open_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_open_parenthesisActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_1.add(jB_PSet_open_parenthesis);

        jB_PSet_close_parenthesis.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_close_parenthesis.setText(")");
        jB_PSet_close_parenthesis.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_close_parenthesis.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_close_parenthesis.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_close_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_close_parenthesisActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_1.add(jB_PSet_close_parenthesis);

        jB_PSet_not_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_not_equal.setText("<>");
        jB_PSet_not_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_not_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_not_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_not_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_not_equalActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_1.add(jB_PSet_not_equal);

        jP_Probability_of_a_set.add(jTB_PSet_Buttons_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 340, 24));

        jTB_PSet_Buttons_2.setFloatable(false);
        jB_PSet_less.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_less.setText("<");
        jB_PSet_less.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_less.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_less.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_PSet_less.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_less.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_lessActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_2.add(jB_PSet_less);

        jB_PSet_bigger.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_bigger.setText(">");
        jB_PSet_bigger.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_bigger.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_bigger.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_bigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_biggerActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_2.add(jB_PSet_bigger);

        jB_PSet_less_or_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_less_or_equal.setText("<=");
        jB_PSet_less_or_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_less_or_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_less_or_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_less_or_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_less_or_equalActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_2.add(jB_PSet_less_or_equal);

        jB_PSet_bigger_or_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_bigger_or_equal.setText(">=");
        jB_PSet_bigger_or_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_bigger_or_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_bigger_or_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_bigger_or_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_bigger_or_equalActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_2.add(jB_PSet_bigger_or_equal);

        jB_PSet_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_equal.setText("=");
        jB_PSet_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_equalActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_2.add(jB_PSet_equal);

        jB_PSet_percent.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_percent.setText("%");
        jB_PSet_percent.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_percent.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_percent.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_percentActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_2.add(jB_PSet_percent);

        jP_Probability_of_a_set.add(jTB_PSet_Buttons_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 34, 340, 24));

        jTB_PSet_Buttons_3.setFloatable(false);
        jB_PSet_plus.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_plus.setText("+");
        jB_PSet_plus.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_plus.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_plus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_PSet_plus.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_plusActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_3.add(jB_PSet_plus);

        jB_PSet_minus.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_minus.setText("-");
        jB_PSet_minus.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_minus.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_minus.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_minusActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_3.add(jB_PSet_minus);

        jB_PSet_multiply.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_multiply.setText("x");
        jB_PSet_multiply.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_multiply.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_multiply.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_multiplyActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_3.add(jB_PSet_multiply);

        jB_PSet_divide.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_PSet_divide.setText("/");
        jB_PSet_divide.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_PSet_divide.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_PSet_divide.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_PSet_divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PSet_divideActionPerformed(evt);
            }
        });

        jTB_PSet_Buttons_3.add(jB_PSet_divide);

        jP_Probability_of_a_set.add(jTB_PSet_Buttons_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 58, 340, 24));

        jL_PSet_Function.setText("Function:");
        jL_PSet_Function.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Probability_of_a_set.add(jL_PSet_Function, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, -1, -1));

        jP_Probability_of_a_set.add(jTF_PSet_Function, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 125, 330, 20));

        jL_PSet_variables.setBackground(new java.awt.Color(204, 204, 204));
        jL_PSet_variables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_PSet_variablesMouseClicked(evt);
            }
        });

        jSP_PSet_variables.setViewportView(jL_PSet_variables);

        jP_Probability_of_a_set.add(jSP_PSet_variables, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 170));

        jTP_Options.addTab("Probability of a set", null, jP_Probability_of_a_set, "");

        jP_AvgReward.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Choose Rewards");
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_AvgReward.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        jL_reward.setBackground(new java.awt.Color(204, 204, 204));
        jSP_reward.setViewportView(jL_reward);

        jP_AvgReward.add(jSP_reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 510, 160));

        jTP_Options.addTab("Average Rate Reward", null, jP_AvgReward, "");

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Choose Rewards");
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10));
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        jL_impulse_reward.setBackground(new java.awt.Color(204, 204, 204));
        jSP_Imp_Reward.setViewportView(jL_impulse_reward);

        jPanel3.add(jSP_Imp_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 510, 160));

        jTP_Options.addTab("Average Impulse Reward", null, jPanel3, "");

        jP_Measures_of_Interest.add(jTP_Options, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 535, 220));

        jP_Line_1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Measures_of_Interest.add(jP_Line_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 55, 560, 1));

        jP_Line_2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Measures_of_Interest.add(jP_Line_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 292, 560, 1));

        jP_Conditional.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTF_Conditional_Function.setEnabled(false);
        jP_Conditional.add(jTF_Conditional_Function, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 125, 330, 20));

        jL_Conditional_Function.setText("Function:");
        jL_Conditional_Function.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Conditional_Function.setEnabled(false);
        jP_Conditional.add(jL_Conditional_Function, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, -1, -1));

        jTB_Conditional_Buttons_1.setFloatable(false);
        jTB_Conditional_Buttons_1.setEnabled(false);
        jB_Conditional_and.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_and.setText("and");
        jB_Conditional_and.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_and.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_and.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_Conditional_and.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_and.setEnabled(false);
        jB_Conditional_and.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_andActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_1.add(jB_Conditional_and);

        jB_Conditional_or.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_or.setText("or");
        jB_Conditional_or.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_or.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_or.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_or.setEnabled(false);
        jB_Conditional_or.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_orActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_1.add(jB_Conditional_or);

        jB_Conditional_not.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_not.setText("not");
        jB_Conditional_not.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_not.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_not.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_not.setEnabled(false);
        jB_Conditional_not.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_notActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_1.add(jB_Conditional_not);

        jB_Conditional_open_parenthesis.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_open_parenthesis.setText("(");
        jB_Conditional_open_parenthesis.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_open_parenthesis.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_open_parenthesis.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_open_parenthesis.setEnabled(false);
        jB_Conditional_open_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_open_parenthesisActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_1.add(jB_Conditional_open_parenthesis);

        jB_Conditional_close_parenthesis.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_close_parenthesis.setText(")");
        jB_Conditional_close_parenthesis.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_close_parenthesis.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_close_parenthesis.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_close_parenthesis.setEnabled(false);
        jB_Conditional_close_parenthesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_close_parenthesisActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_1.add(jB_Conditional_close_parenthesis);

        jB_Conditional_not_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_not_equal.setText("<>");
        jB_Conditional_not_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_not_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_not_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_not_equal.setEnabled(false);
        jB_Conditional_not_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_not_equalActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_1.add(jB_Conditional_not_equal);

        jP_Conditional.add(jTB_Conditional_Buttons_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 340, 24));

        jTB_Conditional_Buttons_2.setFloatable(false);
        jTB_Conditional_Buttons_2.setEnabled(false);
        jB_Conditional_less.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_less.setText("<");
        jB_Conditional_less.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_less.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_less.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_Conditional_less.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_less.setEnabled(false);
        jB_Conditional_less.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_lessActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_2.add(jB_Conditional_less);

        jB_Conditional_bigger.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_bigger.setText(">");
        jB_Conditional_bigger.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_bigger.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_bigger.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_bigger.setEnabled(false);
        jB_Conditional_bigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_biggerActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_2.add(jB_Conditional_bigger);

        jB_Conditional_less_or_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_less_or_equal.setText("<=");
        jB_Conditional_less_or_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_less_or_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_less_or_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_less_or_equal.setEnabled(false);
        jB_Conditional_less_or_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_less_or_equalActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_2.add(jB_Conditional_less_or_equal);

        jB_Conditional_bigger_or_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_bigger_or_equal.setText(">=");
        jB_Conditional_bigger_or_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_bigger_or_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_bigger_or_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_bigger_or_equal.setEnabled(false);
        jB_Conditional_bigger_or_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_bigger_or_equalActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_2.add(jB_Conditional_bigger_or_equal);

        jB_Conditional_equal.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_equal.setText("=");
        jB_Conditional_equal.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_equal.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_equal.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_equal.setEnabled(false);
        jB_Conditional_equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_equalActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_2.add(jB_Conditional_equal);

        jB_Conditional_percent.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_percent.setText("%");
        jB_Conditional_percent.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_percent.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_percent.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_percent.setEnabled(false);
        jB_Conditional_percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_percentActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_2.add(jB_Conditional_percent);

        jP_Conditional.add(jTB_Conditional_Buttons_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 34, 340, 24));

        jTB_Conditional_Buttons_3.setFloatable(false);
        jTB_Conditional_Buttons_3.setEnabled(false);
        jB_Conditional_plus.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_plus.setText("+");
        jB_Conditional_plus.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_plus.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_plus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jB_Conditional_plus.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_plus.setEnabled(false);
        jB_Conditional_plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_plusActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_3.add(jB_Conditional_plus);

        jB_Conditional_minus.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_minus.setText("-");
        jB_Conditional_minus.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_minus.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_minus.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_minus.setEnabled(false);
        jB_Conditional_minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_minusActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_3.add(jB_Conditional_minus);

        jB_Conditional_multiply.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_multiply.setText("x");
        jB_Conditional_multiply.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_multiply.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_multiply.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_multiply.setEnabled(false);
        jB_Conditional_multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_multiplyActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_3.add(jB_Conditional_multiply);

        jB_Conditional_divide.setFont(new java.awt.Font("Dialog", 0, 10));
        jB_Conditional_divide.setText("/");
        jB_Conditional_divide.setPreferredSize(new java.awt.Dimension(55, 20));
        jB_Conditional_divide.setMaximumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_divide.setMinimumSize(new java.awt.Dimension(55, 20));
        jB_Conditional_divide.setEnabled(false);
        jB_Conditional_divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Conditional_divideActionPerformed(evt);
            }
        });

        jTB_Conditional_Buttons_3.add(jB_Conditional_divide);

        jP_Conditional.add(jTB_Conditional_Buttons_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 58, 340, 24));

        jL_Conditional_variables.setBackground(new java.awt.Color(204, 204, 204));
        jL_Conditional_variables.setEnabled(false);
        jL_Conditional_variables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_Conditional_variablesMouseClicked(evt);
            }
        });

        jSP_Conditional_variables.setViewportView(jL_Conditional_variables);

        jP_Conditional.add(jSP_Conditional_variables, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 180, 135));

        jCB_Conditional.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_Conditional.setText("Conditional");
        jCB_Conditional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_ConditionalActionPerformed(evt);
            }
        });

        jP_Conditional.add(jCB_Conditional, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 3, -1, 16));

        jP_Measures_of_Interest.add(jP_Conditional, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 300, 540, -1));

        getContentPane().add(jP_Measures_of_Interest, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 560, 465));

        jB_Evaluate.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Evaluate.setText("Evaluate");
        jB_Evaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_EvaluateActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Evaluate, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 5, 110, 30));

        jB_Plot.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Plot.setText("Plot");
        jB_Plot.setEnabled(false);
        jB_Plot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PlotActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Plot, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 45, 110, 30));

        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setText("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 85, 110, 30));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Status_Bar_Dir.setText("Directory:");
        jL_Status_Bar_Dir.setForeground(java.awt.Color.black);
        jL_Status_Bar_Dir.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Dir, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        jL_Status_Bar_Dir_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 4, 260, -1));

        jL_Status_Bar_Model.setText("Model:");
        jL_Status_Bar_Model.setForeground(java.awt.Color.black);
        jL_Status_Bar_Model.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, -1));

        jL_Status_Bar_Model_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 4, 280, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 475, 685, 20));

        jL_Tangram_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_measures.gif")));
        getContentPane().add(jL_Tangram_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 443, -1, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(695, 500, 1, 1));

    }//GEN-END:initComponents

    private void jTP_OptionsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTP_OptionsStateChanged
        int tabIndex = jTP_Options.getSelectedIndex();
        if( tabIndex == 3 || tabIndex == 4 )
        {
            jCB_Conditional.setEnabled( false );
        }else
            jCB_Conditional.setEnabled( true );
    }//GEN-LAST:event_jTP_OptionsStateChanged

  private void jB_FSV_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_equalActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+ "= ");
  }//GEN-LAST:event_jB_FSV_equalActionPerformed

  private void jB_FSV_bigger_or_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_bigger_or_equalActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+ ">= ");
  }//GEN-LAST:event_jB_FSV_bigger_or_equalActionPerformed

  private void jB_FSV_less_or_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_less_or_equalActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+ "<= ");
  }//GEN-LAST:event_jB_FSV_less_or_equalActionPerformed

  private void jB_FSV_biggerActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_biggerActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+ "> ");
  }//GEN-LAST:event_jB_FSV_biggerActionPerformed

  private void jB_FSV_lessActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_lessActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+ "< ");
  }//GEN-LAST:event_jB_FSV_lessActionPerformed


  //initComponent Manual
  private void initComponentsManual() throws java.io.IOException {

    //verify if there is some graphic to plot
    enable_plot();

    //set filter - The class we use here was changed to match the following
    //requirements on the format of the filename: model.TS.* or model.SS.*
    //fchooser = new JMultiFileChooser();
    fchooser = new javax.swing.JFileChooser();
    // first arg=0 don't display the directories.
    objFilter = new ExampleFileFilterEx(0,modelenv.curmodel, new String[] { ".SS.",".TS."}, "SS and TS Solutions");

    objFilter2 = new TangramFilter();
    objFilter2.setDescription("SS and TS solutions");
    objFilter2.addExtension("SS");
    objFilter2.addExtension("TS");
    objFilter2.addBarredExtensionPrefix("NM");
    
    fchooser.setMultiSelectionEnabled( true );
    fchooser.addChoosableFileFilter(objFilter2);
    fchooser.setFileFilter( objFilter2 );
    fchooser.setDialogTitle("Choose State Probability File");
    fchooser.setCurrentDirectory( new java.io.File (modelenv.curdir));

    //set directory and model in status panel (jP_Status_Bar)
    jL_Status_Bar_Dir_name.setText(T2functions.status_directory(modelenv.curdir));
    jL_Status_Bar_Model_name.setText(modelenv.curmodel);

    //read file .vstat and put the variables names in vectors
    //this vectors are associated to jLists.
    data1 = new java.util.Vector();
    data2 = new java.util.Vector();
    data3 = new java.util.Vector();
    try {
       int    p;
       String line;
       java.io.FileReader     f  = new java.io.FileReader (modelenv.curmodel + ".vstat");
       java.io.BufferedReader b  = new java.io.BufferedReader (f);

       while ((line = b.readLine()) != null) {
          p = line.indexOf(' ');
          if (p>0)
             data1.add(line.substring(0,p));
          else
             data1.add(line);
       }
    }
    catch (java.io.IOException e) {
        javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + e.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    //copy the vector
    data3.addAll(data1);

    //associate vectors to jLists
    //used in PMF
    jL_Choose_Variable.setListData(data1);
    jL_Selected_Variable.setListData(data2);
    //used in Function, Probability (TabbedPane) and in Conditional
    jL_Conditional_variables.setListData(data3);
    jL_PSet_variables.setListData(data3);
    jL_FSV_variables.setListData(data3);

    //add reward name to the list in the "Average Rate Reward" tab
    ExampleFileFilterEx filter = new ExampleFileFilterEx(0, modelenv.curmodel, new String[] {".rate_reward."}, ".expr", "Rate reward files");
    java.io.File rewdir = new java.io.File( modelenv.curdir );
    String[] rate_list = rewdir.list( filter );

    String prefix = modelenv.curmodel + ".rate_reward.";
    int i;
    int index = prefix.length();

    for( i = 0; i < rate_list.length; i++ )
    {
      rate_list[i] = rate_list[i].substring(index);
    }

    jL_reward.setListData( rate_list );

    //add reward name to the list in the "Average Impulse Reward" tab



    filter = new ExampleFileFilterEx(0, modelenv.curmodel, new String[] {".impulse_reward."}, ".expr", "Impulse reward files");
    rewdir = new java.io.File( modelenv.curdir );

    String[] impulse_list = rewdir.list( filter );

    prefix = modelenv.curmodel + ".impulse_reward.";

    index = prefix.length();

    for( i = 0; i < impulse_list.length; i++ )
    {
      impulse_list[i] = impulse_list[i].substring(index);
    }

    jL_impulse_reward.setListData( impulse_list );


    stationaryFileVect = new java.util.Vector(1);

  }

  private void jB_St_Prob_File_ChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_St_Prob_File_ChooserActionPerformed

     int retinit;
     int n=0;
     String fileNameAuxString = new String();

     int retval = fchooser.showDialog(this,"Select");

     java.io.File[] filesvect = fchooser.getSelectedFiles();


     int nSelectedItems= filesvect.length;



     stationaryFileVect.clear();

     if(retval == javax.swing.JFileChooser.APPROVE_OPTION) {

        for (n=0; n<nSelectedItems; n++)
        {
            strtmp= new String( modelenv.curdir + "/" + (fchooser.getSelectedFiles())[n].getName() );


            if( new String((fchooser.getSelectedFiles())[n].getAbsolutePath()).compareTo(strtmp) == 0 ) {

                 if( jTF_State_Probabilities_File_Name.getText() != (fchooser.getSelectedFiles())[n].getName() ) {

                   fileNameAuxString += ((fchooser.getSelectedFiles())[n].getName() + " ");

                   jB_Evaluate.setEnabled( true );
/*
                   if( ( retinit = init( modelenv.curmodel,(fchooser.getSelectedFiles())[n].getName() ) )== 0 )
                     jB_Evaluate.setEnabled( true );
                   else {
                     switch( retinit ) {
                       case -1: javax.swing.JOptionPane.showMessageDialog( this, "Error opening file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
                                break;
                       case -2: javax.swing.JOptionPane.showMessageDialog( this, "File format error", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
                                break;
                       case -3: javax.swing.JOptionPane.showMessageDialog( this, "Memory allocation failure", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
                                break;
                       case -4: javax.swing.JOptionPane.showMessageDialog( this, "Incompatibility between files", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
                                break;
                       case -5: javax.swing.JOptionPane.showMessageDialog( this, "Overflow (no. states in file > no. states in model)", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
                                break;
                     }

                     jB_Evaluate.setEnabled( false );
                   }
*/
                 }
            }
            else
            {
              javax.swing.JOptionPane.showMessageDialog(this,"You are not allowed to change the directory!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        jTF_State_Probabilities_File_Name.setText( fileNameAuxString.trim() );

/*        destroy(); */

        for (n=0; n<nSelectedItems; n++)
        {
            stationaryFileVect.add((fchooser.getSelectedFiles())[n].getName());

        }

     }

  }//GEN-LAST:event_jB_St_Prob_File_ChooserActionPerformed

  private void jL_PSet_variablesMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_PSet_variablesMouseClicked
    if (!(jL_PSet_variables.isSelectionEmpty())){
      jTF_PSet_Function.setText(jTF_PSet_Function.getText()+jL_PSet_variables.getSelectedValue()+" ");
    }
  }//GEN-LAST:event_jL_PSet_variablesMouseClicked

  private void jL_FSV_variablesMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_FSV_variablesMouseClicked
    if (!(jL_FSV_variables.isSelectionEmpty())) {
      jTF_FSV_Function.setText(jTF_FSV_Function.getText()+jL_FSV_variables.getSelectedValue()+" ");
    }
  }//GEN-LAST:event_jL_FSV_variablesMouseClicked

  private void jL_Conditional_variablesMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_Conditional_variablesMouseClicked
    if (!(jL_Conditional_variables.isSelectionEmpty())){
      jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+jL_Conditional_variables.getSelectedValue()+" ");
    }
  }//GEN-LAST:event_jL_Conditional_variablesMouseClicked

  private void jCB_ConditionalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_ConditionalActionPerformed
    jB_Conditional_and.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_or.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_not.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_open_parenthesis.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_close_parenthesis.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_not_equal.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_plus.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_minus.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_multiply.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_divide.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_less.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_bigger.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_less_or_equal.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_bigger_or_equal.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_equal.setEnabled(jCB_Conditional.isSelected());
    jB_Conditional_percent.setEnabled(jCB_Conditional.isSelected());

    jTB_Conditional_Buttons_1.setEnabled(jCB_Conditional.isSelected());
    jTB_Conditional_Buttons_2.setEnabled(jCB_Conditional.isSelected());
    jTB_Conditional_Buttons_3.setEnabled(jCB_Conditional.isSelected());

    jTF_Conditional_Function.setEnabled(jCB_Conditional.isSelected());
    jL_Conditional_Function.setEnabled(jCB_Conditional.isSelected());

    jSP_Conditional_variables.setEnabled(jCB_Conditional.isSelected());
    jL_Conditional_variables.setEnabled(jCB_Conditional.isSelected());
  }//GEN-LAST:event_jCB_ConditionalActionPerformed

  private void jB_Conditional_divideActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_divideActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"/ ");
  }//GEN-LAST:event_jB_Conditional_divideActionPerformed

  private void jB_Conditional_multiplyActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_multiplyActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"* ");
  }//GEN-LAST:event_jB_Conditional_multiplyActionPerformed

  private void jB_Conditional_minusActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_minusActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"- ");
  }//GEN-LAST:event_jB_Conditional_minusActionPerformed

  private void jB_Conditional_plusActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_plusActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"+ ");
  }//GEN-LAST:event_jB_Conditional_plusActionPerformed

  private void jB_Conditional_percentActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_percentActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"% ");
  }//GEN-LAST:event_jB_Conditional_percentActionPerformed

  private void jB_Conditional_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_equalActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"= ");
  }//GEN-LAST:event_jB_Conditional_equalActionPerformed

  private void jB_Conditional_bigger_or_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_bigger_or_equalActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+">= ");
  }//GEN-LAST:event_jB_Conditional_bigger_or_equalActionPerformed

  private void jB_Conditional_less_or_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_less_or_equalActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"<= ");
  }//GEN-LAST:event_jB_Conditional_less_or_equalActionPerformed

  private void jB_Conditional_biggerActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_biggerActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"> ");
  }//GEN-LAST:event_jB_Conditional_biggerActionPerformed

  private void jB_Conditional_lessActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_lessActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"< ");
  }//GEN-LAST:event_jB_Conditional_lessActionPerformed

  private void jB_Conditional_not_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_not_equalActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"<> ");
  }//GEN-LAST:event_jB_Conditional_not_equalActionPerformed

  private void jB_Conditional_close_parenthesisActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_close_parenthesisActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+") ");
  }//GEN-LAST:event_jB_Conditional_close_parenthesisActionPerformed

  private void jB_Conditional_open_parenthesisActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_open_parenthesisActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"( ");
  }//GEN-LAST:event_jB_Conditional_open_parenthesisActionPerformed

  private void jB_Conditional_notActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_notActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"! ");
  }//GEN-LAST:event_jB_Conditional_notActionPerformed

  private void jB_Conditional_orActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_orActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"| ");
  }//GEN-LAST:event_jB_Conditional_orActionPerformed

  private void jB_Conditional_andActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Conditional_andActionPerformed
    jTF_Conditional_Function.setText(jTF_Conditional_Function.getText()+"& ");
  }//GEN-LAST:event_jB_Conditional_andActionPerformed

  private void jB_PSet_divideActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_divideActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"/ ");
  }//GEN-LAST:event_jB_PSet_divideActionPerformed

  private void jB_PSet_multiplyActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_multiplyActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"* ");
  }//GEN-LAST:event_jB_PSet_multiplyActionPerformed

  private void jB_PSet_minusActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_minusActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"- ");
  }//GEN-LAST:event_jB_PSet_minusActionPerformed

  private void jB_PSet_plusActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_plusActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"+ ");
  }//GEN-LAST:event_jB_PSet_plusActionPerformed

  private void jB_PSet_percentActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_percentActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"% ");
  }//GEN-LAST:event_jB_PSet_percentActionPerformed

  private void jB_PSet_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_equalActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"= ");
  }//GEN-LAST:event_jB_PSet_equalActionPerformed

  private void jB_PSet_bigger_or_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_bigger_or_equalActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+">= ");
  }//GEN-LAST:event_jB_PSet_bigger_or_equalActionPerformed

  private void jB_PSet_less_or_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_less_or_equalActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"<= ");
  }//GEN-LAST:event_jB_PSet_less_or_equalActionPerformed

  private void jB_PSet_biggerActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_biggerActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"> ");
  }//GEN-LAST:event_jB_PSet_biggerActionPerformed

  private void jB_PSet_lessActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_lessActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"< ");
  }//GEN-LAST:event_jB_PSet_lessActionPerformed

  private void jB_PSet_not_equalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_not_equalActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"<> ");
  }//GEN-LAST:event_jB_PSet_not_equalActionPerformed

  private void jB_PSet_close_parenthesisActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_close_parenthesisActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+") ");
  }//GEN-LAST:event_jB_PSet_close_parenthesisActionPerformed

  private void jB_PSet_open_parenthesisActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_open_parenthesisActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"( ");
  }//GEN-LAST:event_jB_PSet_open_parenthesisActionPerformed

  private void jB_PSet_notActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_notActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"! ");
  }//GEN-LAST:event_jB_PSet_notActionPerformed

  private void jB_PSet_orActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_orActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"| ");
  }//GEN-LAST:event_jB_PSet_orActionPerformed

  private void jB_PSet_andActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PSet_andActionPerformed
    jTF_PSet_Function.setText(jTF_PSet_Function.getText()+"& ");
  }//GEN-LAST:event_jB_PSet_andActionPerformed

  private void jB_FSV_percentActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_percentActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+"% ");
  }//GEN-LAST:event_jB_FSV_percentActionPerformed

  private void jB_FSV_close_parenthesisActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_close_parenthesisActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+") ");
  }//GEN-LAST:event_jB_FSV_close_parenthesisActionPerformed

  private void jB_FSV_open_parenthesisActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_open_parenthesisActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+"( ");
  }//GEN-LAST:event_jB_FSV_open_parenthesisActionPerformed

  private void jB_FSV_divideActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_divideActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+"/ ");
  }//GEN-LAST:event_jB_FSV_divideActionPerformed

  private void jB_FSV_multiplyActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_multiplyActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+"* ");
  }//GEN-LAST:event_jB_FSV_multiplyActionPerformed

  private void jB_FSV_minusActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_minusActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+"- ");
  }//GEN-LAST:event_jB_FSV_minusActionPerformed

  private void jB_FSV_plusActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_FSV_plusActionPerformed
    jTF_FSV_Function.setText(jTF_FSV_Function.getText()+"+ ");
  }//GEN-LAST:event_jB_FSV_plusActionPerformed

  private void jB_PMF_remove_allActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PMF_remove_allActionPerformed
    data1.addAll(data2);
    data2.removeAllElements();
    jL_Choose_Variable.setListData(data1);
    jL_Selected_Variable.setListData(data2);
  }//GEN-LAST:event_jB_PMF_remove_allActionPerformed

  private void jB_PMF_removeActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PMF_removeActionPerformed
    data1.add(jL_Selected_Variable.getSelectedValue());
    data2.remove(jL_Selected_Variable.getSelectedValue());
    jL_Selected_Variable.setListData(data2);
    jL_Choose_Variable.setListData(data1);
  }//GEN-LAST:event_jB_PMF_removeActionPerformed

  private void jB_PMF_add_allActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PMF_add_allActionPerformed
    data2.addAll(data1);
    data1.removeAllElements();
    jL_Choose_Variable.setListData(data1);
    jL_Selected_Variable.setListData(data2);
  }//GEN-LAST:event_jB_PMF_add_allActionPerformed

  private void jB_PMF_addActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PMF_addActionPerformed
    if (!(jL_Choose_Variable.isSelectionEmpty())){
      data2.add(jL_Choose_Variable.getSelectedValue());
      data1.remove(jL_Choose_Variable.getSelectedValue());
      jL_Choose_Variable.setListData(data1);
      jL_Selected_Variable.setListData(data2);
    }
  }//GEN-LAST:event_jB_PMF_addActionPerformed

  private void jB_EvaluateActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_EvaluateActionPerformed

    String line;
    String cond;                               /* used for conditional pmf */
    String basename;                           /* current model */
    String varlist = new String(getVarList()); /* variables list, used for variable pmf (-v option) */

    int i=0;

    boolean error=false,
            debug = true;


    java.util.Vector cmdpars = new java.util.Vector();         /* stores the command line arguments */
    java.util.Vector optional_fields = new java.util.Vector(); /* the output file is an optional field. */

    String[] parsarray;

    int retval; /* gets the return from method functions */

    String[] stateProbabilitiesFiles;

    java.util.StringTokenizer stokenizer = new java.util.StringTokenizer(jTF_State_Probabilities_File_Name.getText(), " ");

    stateProbabilitiesFiles = new String[stokenizer.countTokens()];


    while (stokenizer.hasMoreTokens())
    {
      stateProbabilitiesFiles[i] = stokenizer.nextToken();
      i++;
    }

    /* Initial verifications, over missing fields */

    if (jTP_Options.getSelectedIndex() == 0) {
      if ( T2functions.Is_some_field_missing(jP_Files,optional_fields) ||
           T2functions.Is_some_field_missing(jP_PMF) ||
           T2functions.Is_some_field_missing(jP_Conditional) )
      {
        return;
      }
      else {
        if ( varlist.trim().compareTo("")==0) {
          javax.swing.JOptionPane.showMessageDialog(this,"Variable(s)  required", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
          return;
        }
      }
    }
    else if (jTP_Options.getSelectedIndex() == 1) {
      if ( T2functions.Is_some_field_missing(jP_Files,optional_fields) ||
           T2functions.Is_some_field_missing(jP_Function_of_state_variables) ||
           T2functions.Is_some_field_missing(jP_Conditional) )
        return;
    }
    else if (jTP_Options.getSelectedIndex() == 2) {
      if ( T2functions.Is_some_field_missing(jP_Files,optional_fields) ||
           T2functions.Is_some_field_missing(jP_Probability_of_a_set) ||
           T2functions.Is_some_field_missing(jP_Conditional) )
        return;
    }
    else if (jTP_Options.getSelectedIndex() == 3) {
      if ( T2functions.Is_some_field_missing(jP_Files,optional_fields)  )
        return;
      if ( jL_reward.isSelectionEmpty() )
      {
        javax.swing.JOptionPane.showMessageDialog(this,"You must choose at least one reward","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }
    }

    basename = modelenv.curmodel;

    /* Check if the files required exist */

    java.io.File fvstat            = new java.io.File(basename+".vstat");
    java.io.File fstates           = new java.io.File(basename+".states");
    java.io.File f_state_probs     = new java.io.File(jTF_State_Probabilities_File_Name.getText());

    if ((!fvstat.exists()) || (!fstates.exists())) {
      javax.swing.JOptionPane.showMessageDialog(this,"Model not generated", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
      return;
    }

    for(int k=0; k<stateProbabilitiesFiles.length; k++)
    {
        f_state_probs     = new java.io.File(stateProbabilitiesFiles[k]);

        if (!f_state_probs.exists()){
            javax.swing.JOptionPane.showMessageDialog(this,"Model not solved or invalid state probabilities file name", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
            return;
        }
    }

    if ( (stateProbabilitiesFiles.length > 1) && (jTP_Options.getSelectedIndex() != 0) &&
          (jTP_Options.getSelectedIndex() != 1) && (jTP_Options.getSelectedIndex() != 2))
    {
      javax.swing.JOptionPane.showMessageDialog(this,"Cannot use multiple input files for reward measures.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
      return;
    }

    if ( (stateProbabilitiesFiles.length > 1) && ((jL_Selected_Variable.getModel()).getSize() > 1 ) )
    {
      javax.swing.JOptionPane.showMessageDialog(this,"Cannot use multiple input files with multiple state variables.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
      return;
    }

    /* Treatment of the cases of a measure from a reward (average rate/impulse reward tabs) */

    if (jTP_Options.getSelectedIndex() == 3 || jTP_Options.getSelectedIndex() == 4 ) {

      String cmdLine = "avgReward ";

      if (jTP_Options.getSelectedIndex() == 3)
        cmdLine += " -r ";
      else
        cmdLine += " -i ";

      cmdLine += (String)jTF_State_Probabilities_File_Name.getText();
      
      cmdLine += " " + basename + ".generator_mtx ";

      if (jTF_Measures_of_Interest_File_Name.getText().trim().compareTo("") != 0)
      {
        /* The [output_file] parameter is optional.  If it is not specified, the output is directed to [model].IM.out */

        cmdLine += " " +  jTF_Measures_of_Interest_File_Name.getText();
      }
      else
      {
        cmdLine += " out";
      }

      Object[] selection;

      if( jTP_Options.getSelectedIndex() == 3 )
        selection= jL_reward.getSelectedValues();
      else
        selection= jL_impulse_reward.getSelectedValues();

      for( i = 0; i < selection.length; i++ )
      {
        cmdLine += " " + modelenv.curmodel + ((jTP_Options.getSelectedIndex() == 3)?".rate_reward.":".impulse_reward.") + (String)selection[i];
      }

      try
      {
          Process measuresproc;
          measuresproc = Runtime.getRuntime().exec(cmdLine);

          retval = measuresproc.waitFor();
          if (retval == 0)
          {
            String msg = "Measures of interest generated";
            javax.swing.JOptionPane.showMessageDialog(this,msg);
          }
          else
          {
            T2functions.Print_Error_Message(retval,this);
          }

      }
      catch(Exception e)
      {
          System.out.println("Exception running " + e.toString());
          System.out.println(cmdLine);
      }
      return;
    }

    /* Treatment of the other cases */

    /* We get the conditional function... */

    if (jCB_Conditional.isSelected())
      cond = jTF_Conditional_Function.getText();
    else
      cond = "";

    /* ...mount the command line... */

    cmdpars.add("pmf");
    cmdpars.add(basename);
    cmdpars.add((String)jTF_State_Probabilities_File_Name.getText());



    if (jTF_Measures_of_Interest_File_Name.getText().trim().compareTo("") != 0)
    {
        /* The -o [output_file] parameter is optional.  If it is not specified, the output is directed to [model].IM.out */

        cmdpars.add("-o");
        cmdpars.add((String)jTF_Measures_of_Interest_File_Name.getText());
    }


    if (jTP_Options.getSelectedIndex() == 0) {


      if( jCB_Conditional.isSelected() )
      {
        /* variable pmf with condition specification */

        cmdpars.add("-vc");
        cmdpars.add(varlist);
        cmdpars.add(cond);
      }
      else
      {
        /* variable pmf */

        cmdpars.add("-v");
        cmdpars.add(varlist);
      }
    }

    if (jTP_Options.getSelectedIndex() == 1) {

      if( jCB_Conditional.isSelected() )
      {
        /* pmf of a function with condition specification */

        cmdpars.add("-fc");
        cmdpars.add(jTF_FSV_Function.getText());
        cmdpars.add(cond);
      }
      else
      {
        /* pmf of a function */

        cmdpars.add("-f");
        cmdpars.add(jTF_FSV_Function.getText());
      }
    }

    if (jTP_Options.getSelectedIndex() == 2) {

      if( jCB_Conditional.isSelected() )
      {
        /* pmf of a set with condition specification */

        cmdpars.add("-sc");
        cmdpars.add(jTF_PSet_Function.getText());
        cmdpars.add(cond);
      }
      else
      {
        /* pmf of a set */

        cmdpars.add("-s");
        cmdpars.add(jTF_PSet_Function.getText());
      }
    }



    try
    {

      String outputfile, tempoutputfile;
      tempoutputfile = (String)jTF_Measures_of_Interest_File_Name.getText();
      outputfile = tempoutputfile;
      java.io.BufferedWriter bw;   // Buffered Writer ( 2-d: Time x Expected value )
      java.io.BufferedWriter bw3d; // Buffered Writer ( 3-d: Time x State Variable Value x Probability )


      if (stateProbabilitiesFiles.length > 1)
      {
        bw   = new java.io.BufferedWriter(new java.io.FileWriter( basename + ".IM." + outputfile + ".expectedvalues" ));
        bw3d = new java.io.BufferedWriter(new java.io.FileWriter( basename + ".IM." + outputfile + ".3d" ));
      }
      else
      {
        bw   = null;
        bw3d = null;
      }

      /* ... and execute the program. */

      java.util.Arrays.sort( stateProbabilitiesFiles, new TimeFilesComparator() );

      for (int j=0; j< stateProbabilitiesFiles.length; j++)
      {
          Process measuresproc;

          int index = stateProbabilitiesFiles[j].lastIndexOf( '.', stateProbabilitiesFiles[j].lastIndexOf( '.' )-1 )+1;
          String curtime =  stateProbabilitiesFiles[j].substring( index );
          //stateProbabilitiesFiles[j].indexOf(".TIME.", 0)+6);
          String expectedvalue;

          cmdpars.setElementAt(stateProbabilitiesFiles[j],2);  //  solution file

          if (stateProbabilitiesFiles.length > 1)
            outputfile = tempoutputfile + ("." + curtime);
          else
            outputfile = tempoutputfile;

          cmdpars.setElementAt(outputfile,4);

          int size = cmdpars.size();

          parsarray = new String[size];
          cmdpars.copyInto(parsarray);

          measuresproc = Runtime.getRuntime().exec(parsarray);

          retval = measuresproc.waitFor();

          if (retval == 0)
          {
            if (stateProbabilitiesFiles.length == 1)
            {
              String msg = "Measures of interest ";

              if(jTF_Measures_of_Interest_File_Name.getText().trim().compareTo("") == 0)
              {
                msg += "(" + basename + ".IM.out) ";
              }
              else
              {
                msg += "(" + basename + ".IM." + (String)jTF_Measures_of_Interest_File_Name.getText() + ") ";
              }
              msg += "generated";
              javax.swing.JOptionPane.showMessageDialog(this,msg);
            }


            /* Now, we get the expected value of the variable, and write it in the output file */
            /* gnuplot file format: [time]  [expected value] */

            java.io.BufferedReader br = new java.io.BufferedReader(new java.io.FileReader( basename + ".IM." + outputfile ));

            expectedvalue = null;


            while(true)
            {
              line = br.readLine();

              if( line == null )
                break;

              switch (jTP_Options.getSelectedIndex())
              {
                case 0:  if (line.indexOf("xpected value  = ")!=-1) {
                            expectedvalue = line.substring(line.indexOf("xpected value  = ")+(new String("xpected value  = ")).length());
                         }
                         break;
                case 1: if (line.indexOf("xpected value of function = ")!=-1) {
                            expectedvalue = line.substring(line.indexOf("xpected value of function = ")+(new String("xpected value of function = ")).length());
                         }
                         break;
                case 2:
                         if (line.indexOf("Set Probability = ")!=-1) {
                            expectedvalue = line.substring(line.indexOf("Set Probability = ")+(new String("Set Probability = ")).length());
                         }
                         break;
              }
              if (expectedvalue!=null) break;
            }


            if (stateProbabilitiesFiles.length > 1)
            {
              bw.write( curtime + " ", 0, curtime.length()+1 );
              bw.write( expectedvalue + "\n" );

              while ( (line.substring(0,1)).compareTo("#") == 0 )
                line = br.readLine();

              while( line != null )
              {
                bw3d.write( curtime + " " + line + "\n" );
                line = br.readLine();
              }

              bw3d.write( "\n" );

            }


            br.close();
          }
          else
          {
            T2functions.Print_Error_Message(retval,this);
            error = true;
       for (i=0;i<cmdpars.size();i++)
         System.out.println(cmdpars.elementAt(i));
            break;
          }

      }

      if (stateProbabilitiesFiles.length > 1)
      {
        bw.close();
        bw3d.close();
      }
    }
    catch(java.io.IOException e)
    {
       System.out.println("IO error running pmf" );
/*
       for (i=0;i<cmdpars.size();i++)
         System.out.println(cmdpars.elementAt(i));
*/
    }
    catch(java.lang.InterruptedException e)
    {
       System.out.println("Process error running pmf" );
/*
       for (i=0;i<cmdpars.size();i++)
         System.out.println(cmdpars.elementAt(i));
*/
    }



    if ((error == false) && (stateProbabilitiesFiles.length > 1))
    {
        javax.swing.JOptionPane.showMessageDialog(this,"Output files generated.");
    }

    /* Finally, we verify if there is some graphic to plot */

    enable_plot();

/***********************************************************************************************************************
    Possible usages of pmf:
    To calculate the pmf of one or more variables type:
    pmf <modelname> <modelname>.<ss/ts>.<solution method> {-o <outfile>} -v[c] <1st variable 2nd variable...> [condition]
    To calculate the pmf of a function type:
    pmf <modelname> <modelname>.<ss/ts>.<solution method> {-o <outfile>} -f[c] function [condition]
    To calculate the probability of a set type:
    pmf <modelname> <modelname>.<ss/ts>.<solution method> {-o <outfile>} -s[c] set_description [condition]

 ***********************************************************************************************************************/

  }//GEN-LAST:event_jB_EvaluateActionPerformed

  private void enable_plot() {
    java.io.File f = new java.io.File(".");
    String[] dirlist;
    ExampleFileFilterEx objFilter_aux = new ExampleFileFilterEx(0,modelenv.curmodel, extensions, "Plot Files");
    dirlist = f.list(objFilter_aux);
    if ((dirlist != null) && (dirlist.length > 0))
      jB_Plot.setEnabled(true);
    else
      jB_Plot.setEnabled(false);
  }


  private void jB_PlotActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PlotActionPerformed
    this.setEnabled(false);
    //call plot with the extensions to be filtered!
    plot = new T2plot(this, extensions);
    plot.show();
  }//GEN-LAST:event_jB_PlotActionPerformed

  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed
    //update the figs and buttons!
    modelenv.update_IM();

    modelenv.setEnabled(true);
    //kill the child
    if (plot != null) { plot.dispose(); }
    dispose();
  }//GEN-LAST:event_jB_CloseActionPerformed

  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CloseActionPerformed(null);
  }//GEN-LAST:event_exitForm

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Conditional_divide;
    private javax.swing.JButton jB_Conditional_less;
    private javax.swing.JButton jB_Conditional_multiply;
    private javax.swing.JButton jB_Conditional_open_parenthesis;
    private javax.swing.JList jL_PSet_variables;
    private javax.swing.JScrollPane jSP_Choose_Variables;
    private javax.swing.JLabel jL_Choose_Variables;
    private javax.swing.JTextField jTF_State_Probabilities_File_Name;
    private javax.swing.JButton jB_Plot;
    private javax.swing.JPanel jP_Files;
    private javax.swing.JList jL_reward;
    private javax.swing.JTextField jTF_Conditional_Function;
    private javax.swing.JLabel jL_FSV_Function;
    private javax.swing.JButton jB_FSV_minus;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JButton jB_PSet_open_parenthesis;
    private javax.swing.JPanel jP_Measures_of_Interest;
    private javax.swing.JButton jB_PSet_less;
    private javax.swing.JButton jB_Conditional_close_parenthesis;
    private javax.swing.JLabel jL_Status_Bar_Dir;
    private javax.swing.JPanel jP_Function_of_state_variables;
    private javax.swing.JLabel jL_Status_Bar_Model;
    private javax.swing.JLabel jL_Selected_Variables;
    private javax.swing.JButton jB_Conditional_bigger;
    private javax.swing.JLabel jL_State_Probabilities_File_Name;
    private javax.swing.JList jL_impulse_reward;
    private javax.swing.JButton jB_Conditional_less_or_equal;
    private javax.swing.JButton jB_Conditional_not;
    private javax.swing.JList jL_FSV_variables;
    private javax.swing.JPanel jP_Line_2;
    private javax.swing.JPanel jP_Line_1;
    private javax.swing.JScrollPane jSP_FSV_variables;
    private javax.swing.JScrollPane jSP_reward;
    private javax.swing.JLabel jL_Tangram_Picture;
    private javax.swing.JButton jB_FSV_less;
    private javax.swing.JButton jB_PSet_and;
    private javax.swing.JButton jB_PSet_less_or_equal;
    private javax.swing.JButton jB_FSV_close_parenthesis;
    private javax.swing.JLabel jL_PSet_Function;
    private javax.swing.JButton jB_PSet_percent;
    private javax.swing.JButton jB_PSet_equal;
    private javax.swing.JButton jB_PSet_bigger_or_equal;
    private javax.swing.JButton jB_PMF_add_all;
    private javax.swing.JButton jB_FSV_open_parenthesis;
    private javax.swing.JButton jB_PSet_close_parenthesis;
    private javax.swing.JButton jB_PSet_divide;
    private javax.swing.JButton jB_Evaluate;
    private javax.swing.JButton jB_Conditional_not_equal;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTF_Measures_of_Interest_File_Name;
    private javax.swing.JButton jB_FSV_bigger_or_equal;
    private javax.swing.JList jL_Selected_Variable;
    private javax.swing.JButton jB_PSet_minus;
    private javax.swing.JLabel jL_Measures_of_Interest_File_Name;
    private javax.swing.JButton jB_PSet_not;
    private javax.swing.JScrollPane jSP_Imp_Reward;
    private javax.swing.JButton jB_FSV_divide;
    private javax.swing.JToolBar jTB_FSV_buttons_2;
    private javax.swing.JToolBar jTB_FSV_buttons_1;
    private javax.swing.JScrollPane jSP_Conditional_variables;
    private javax.swing.JButton jB_FSV_percent;
    private javax.swing.JButton jB_Conditional_plus;
    private javax.swing.JButton jB_PSet_bigger;
    private javax.swing.JButton jB_Conditional_equal;
    private javax.swing.JButton jB_FSV_multiply;
    private javax.swing.JButton jB_PSet_or;
    private javax.swing.JTextField jTF_PSet_Function;
    private javax.swing.JButton jB_PSet_plus;
    private javax.swing.JButton jB_PMF_add;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jB_Conditional_percent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jP_Conditional;
    private javax.swing.JButton jB_FSV_bigger;
    private javax.swing.JScrollPane jSP_Selected_Variables;
    private javax.swing.JToolBar jTB_PSet_Buttons_3;
    private javax.swing.JToolBar jTB_PSet_Buttons_2;
    private javax.swing.JToolBar jTB_PSet_Buttons_1;
    private javax.swing.JButton jB_PMF_remove_all;
    private javax.swing.JButton jB_Conditional_minus;
    private javax.swing.JPanel jP_PMF;
    private javax.swing.JButton jB_Conditional_bigger_or_equal;
    private javax.swing.JPanel jP_AvgReward;
    private javax.swing.JList jL_Conditional_variables;
    private javax.swing.JButton jB_FSV_plus;
    private javax.swing.JToolBar jTB_Conditional_Buttons_3;
    private javax.swing.JToolBar jTB_Conditional_Buttons_2;
    private javax.swing.JToolBar jTB_Conditional_Buttons_1;
    private javax.swing.JScrollPane jSP_PSet_variables;
    private javax.swing.JTabbedPane jTP_Options;
    private javax.swing.JButton jB_FSV_less_or_equal;
    private javax.swing.JButton jB_PSet_multiply;
    private javax.swing.JCheckBox jCB_Conditional;
    private javax.swing.JTextField jTF_FSV_Function;
    private javax.swing.JButton jB_PSet_not_equal;
    private javax.swing.JButton jB_Close;
    private javax.swing.JButton jB_Conditional_or;
    private javax.swing.JButton jB_FSV_equal;
    private javax.swing.JPanel jP_Probability_of_a_set;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JButton jB_PMF_remove;
    private javax.swing.JLabel jL_Conditional_Function;
    private javax.swing.JButton jB_Conditional_and;
    private javax.swing.JList jL_Choose_Variable;
    private javax.swing.JButton jB_St_Prob_File_Chooser;
    // End of variables declaration//GEN-END:variables
  private java.util.Vector data1;
  private java.util.Vector data2;
  private java.util.Vector data3;
  //private JMultiFileChooser fchooser;
  private javax.swing.JFileChooser fchooser;
  private ExampleFileFilterEx objFilter;
  private TangramFilter objFilter2;
  private String strtmp;
  private String[] extensions = {".SS.",".TS.",".IM.",".SM."};

  java.util.Vector stationaryFileVect;

  public  T2modelenv modelenv;
  private T2plot plot;


  /* the following routines aren't called anymore
  private native int  init (String basename, String methodname);
  private native int  generate_variables_pmf (String modelname, String var_list, String condition, String measure_name);
  private native int  generate_function_pmf (String modelname, String function, String condition, String measure_name);
  private native int  generate_set_probability (String modelname, String set_description, String condition, String measure_name);
  private native void destroy();
  */


// End of variables declaration

  private String getVarList ()
  {
     String s = "";

     for(int i = 0; i < jL_Selected_Variable.getModel().getSize(); i++)
     {
        if (s!="") s += "@"; else s = new String();
        s = s + jL_Selected_Variable.getModel().getElementAt(i);
     }

     return (s);
  }

  private class TimeFilesComparator implements java.util.Comparator
  {
    public int compare( Object a, Object b )
    {
      String str1, str2;
      float t1, t2;
      int index;

      str1 = (String)a;
      str2 = (String)b;

      index = str1.lastIndexOf( '.', str1.lastIndexOf( '.' )-1 )+1;
      t1 = Float.parseFloat( str1.substring( index ) );

      index = str2.lastIndexOf( '.', str2.lastIndexOf( '.' )-1 )+1;
      t2 = Float.parseFloat( str2.substring( index ) );

      if( t1 < t2 ) return -1;
      else if( t1 == t2 ) return 0;
      else return 1;
    }
  };
}
