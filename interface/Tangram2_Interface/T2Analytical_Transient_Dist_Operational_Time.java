/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2Analytical_Transient_Dist_Operational_Time extends javax.swing.JPanel {

  /** Initializes the Form */
  public T2Analytical_Transient_Dist_Operational_Time(T2modelenv ModelEnv) {
    modelenv = ModelEnv;
    initComponents ();
    initComponentsManual ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
private void initComponents () {//GEN-BEGIN:initComponents
    jP_Operational_Time_Method = new javax.swing.JPanel ();
    jLabel4 = new javax.swing.JLabel ();
    jB_File_Chooser = new javax.swing.JButton ();
    jTF_Reward_name = new javax.swing.JTextField ();
    jLabel5 = new javax.swing.JLabel ();
    jScrollPane1 = new javax.swing.JScrollPane ();
    jTA_Reward_Levels = new javax.swing.JTextArea ();
    jLabel6 = new javax.swing.JLabel ();
    setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());

    jP_Operational_Time_Method.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
    jP_Operational_Time_Method.setBorder (new javax.swing.border.LineBorder(java.awt.Color.gray));

      jLabel4.setText ("Reward Name");
      jLabel4.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Operational_Time_Method.add (jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 271, -1, -1));
  
      jB_File_Chooser.setText ("...");
      jB_File_Chooser.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
              jB_File_ChooserActionPerformed (evt);
          }
      }
      );
  
      jP_Operational_Time_Method.add (jB_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints (508, 267, 22, 20));
  
  
      jP_Operational_Time_Method.add (jTF_Reward_name, new org.netbeans.lib.awtextra.AbsoluteConstraints (125, 267, 380, 20));
  
      jLabel5.setText ("Reward Levels");
      jLabel5.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Operational_Time_Method.add (jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 297, -1, -1));
  
  
    
        jScrollPane1.setViewportView (jTA_Reward_Levels);
    
      jP_Operational_Time_Method.add (jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints (125, 293, 405, 50));
  
      jLabel6.setText ("(Fraction of time)");
      jLabel6.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Operational_Time_Method.add (jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 315, -1, -1));
  

    add (jP_Operational_Time_Method, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 10, 540, 355));

}//GEN-END:initComponents

  private void jB_File_ChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_File_ChooserActionPerformed
    if ( fchooser.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION )
      jTF_Reward_name.setText( fchooser.getSelectedFile().getName().substring(new String(modelenv.curmodel).length()+13) );
  }//GEN-LAST:event_jB_File_ChooserActionPerformed

  private void initComponentsManual()
  {
    fchooser  = new javax.swing.JFileChooser();
    objFilter = new ExampleFileFilterEx(0, modelenv.curmodel, new String[] {".rate_reward."}, ".expr", "Rate reward files");
    fchooser.addChoosableFileFilter(objFilter);
    fchooser.setFileFilter( objFilter );
    fchooser.setDialogTitle("Choose Reward File");
    fchooser.setCurrentDirectory( new java.io.File (modelenv.curdir));

    jP_Probability_and_Intervals = new T2Analytical_Transient_Probability_and_Intervals();
    jP_Operational_Time_Method.add (jP_Probability_and_Intervals, new org.netbeans.lib.awtextra.AbsoluteConstraints (1, 1, 538, 270));
  }


  public void Evaluate()
  {
    String command, precision;

    precision = jP_Probability_and_Intervals.Is_some_field_missing_and_get_precision( modelenv.curmodel );

    // test Precision
    if ((precision.compareTo("999")==0) || (!T2functions.Is_Precision_valid(precision, this)))
      return;

    //Get and test Reward name
    if (jTF_Reward_name.getText().trim().compareTo("") == 0) {
      javax.swing.JOptionPane.showMessageDialog(this,"Reward name not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    try {
      java.io.FileReader fr = new java.io.FileReader( modelenv.curdir + "/" + modelenv.curmodel + ".rate_reward."+ jTF_Reward_name.getText());
      java.io.BufferedReader br = new java.io.BufferedReader(fr);
      String line = "", value = "";
      int p;

      line = br.readLine(); //First line contains the lower and upper bound
      while((line = br.readLine()) != null) {
        p = line.indexOf(' ');
        if (p > 0) {
          value = (line.substring(p+1, line.length())).trim();
          if ( ((new Float(value)).intValue() != 0 ) && ((new Float(value)).intValue() != 1 )) {
            javax.swing.JOptionPane.showMessageDialog(this,"Reward values must be either zero or one for the solution method.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
          }
        }
        else
        {
          javax.swing.JOptionPane.showMessageDialog(this,"Error in "+ modelenv.curdir + "/" + modelenv.curmodel + ".rate_reward."+ jTF_Reward_name.getText(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return;
        }
      }
    }catch(java.io.IOException e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + e.toString(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    //Get and test Reward levels
    if (jTA_Reward_Levels.getText().trim().compareTo("") == 0) {
      javax.swing.JOptionPane.showMessageDialog(this,"Reward Levels not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    //must create the Reward Levels File
    try {
      java.io.FileWriter     file   = new java.io.FileWriter( modelenv.curdir + "/" + modelenv.curmodel+".reward_levels."+jTF_Reward_name.getText());
      java.io.BufferedWriter buffer = new java.io.BufferedWriter( file );

      java.util.StringTokenizer st_tokens = new java.util.StringTokenizer(jTA_Reward_Levels.getText()," \n\t");
      buffer.write( st_tokens.countTokens() + "\n" );

      while (st_tokens.hasMoreTokens()) {
        buffer.write( st_tokens.nextToken() + "\n");
      }
      buffer.close();
    }
    catch (Exception e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Can't create the file "+ modelenv.curmodel+".reward_levels."+jTF_Reward_name.getText()+ "\nError -- "+e.toString(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    command = "solv " + modelenv.curmodel + " 10 " + jTF_Reward_name.getText() + " " + precision;

    modelenv.analytical.setEnabled(false);
    status = new T2status(modelenv.analytical, "Solver Status", "Solv is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
    status.show();
    status.start();
  }

  public String Get_Method_Name() {
    return "Operational time and related measures";
  }

  public void KillChild()
  {
    if( status != null )
    {
      status.Proc.destroy();
      status.dispose();
    }
  }

// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel jP_Operational_Time_Method;
private javax.swing.JLabel jLabel4;
private javax.swing.JButton jB_File_Chooser;
private javax.swing.JTextField jTF_Reward_name;
private javax.swing.JLabel jLabel5;
private javax.swing.JScrollPane jScrollPane1;
private javax.swing.JTextArea jTA_Reward_Levels;
private javax.swing.JLabel jLabel6;
// End of variables declaration//GEN-END:variables
// More variables...
  private javax.swing.JFileChooser fchooser;
  private ExampleFileFilterEx objFilter;
  private T2status status;
  private T2Analytical_Transient_Probability_and_Intervals jP_Probability_and_Intervals;
  private T2modelenv modelenv;
}


