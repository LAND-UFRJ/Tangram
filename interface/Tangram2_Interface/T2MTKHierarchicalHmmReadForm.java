/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * T2MTKHierarchicalHmmReadForm.java
 *
 * Created on Jul 3, 2009, 2:33:39 PM
 */

package Tangram2;

import java.awt.Component;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author balves
 */
public class T2MTKHierarchicalHmmReadForm extends javax.swing.JFrame {

    /** Creates new form T2MTKHierarchicalHmmReadForm */
    public T2MTKHierarchicalHmmReadForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tangram II");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters Extracted from Tangram-II Model"));

        jLabel2.setText("Number of Hidden States");

        jTextField1.setEditable(false);

        jLabel3.setText("Number of Symbols");

        jTextField2.setEditable(false);

        jLabel4.setText("Hidden States Transition Probability Matrix");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.setEnabled(false);
        jTable2.setMinimumSize(new java.awt.Dimension(300, 72));
        jTable2.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        jLabel5.setText("Lower-Level State Transition Probability Matrix in Hidden State");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable3.setEnabled(false);
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2, 0, 0, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)))
                    .addComponent(jLabel4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Additional Parameters"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Initial Probabilitiy of Hidden States"));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        jToggleButton1.setText("Equiprobable");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Random");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jToggleButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)))
                .addGap(33, 33, 33))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jToggleButton1, jToggleButton2});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton2)
                    .addComponent(jToggleButton1))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jToggleButton1, jToggleButton2});

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_hmmgen.gif"))); // NOI18N

        jLabel1.setText("Batch Size:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(214, 214, 214)
                        .addComponent(jLabel6))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(132, 132, 132))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)))
                .addGap(49, 49, 49))
        );

        jLabel7.setText(T2MTKCommon.statusBarUpdate());
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, 0, 524, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown


        SpinnerModel sModel = new SpinnerNumberModel(1,1,999999,1);
        jSpinner1.setModel(sModel);

        if(model.equals("hmm_batch_variable")){
            jLabel1.setVisible(false);
            jSpinner1.setVisible(false);
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(new File(modelDataFile)));
            hStates = Integer.parseInt(in.readLine());
            
            // For use on Matrix View
            if(model.equals("ghmm")) {
                T2MTKHierarchicalHmmMatrixperm.symbols = 2;
                symbols = 2;
            }
            else{
                symbols = Integer.parseInt(in.readLine());
                T2MTKHierarchicalHmmMatrixperm.symbols = symbols;
            }

            //Creating design for jTable1 (Hidden States Initial Distribution)
            String labels[] = new String[hStates];
            for(int i = 0;i<hStates;i++){
                labels[i]=i+"";
            }
            DefaultTableModel tModel = new DefaultTableModel(labels,1);
            pi = new double[labels.length];
            for(int i=0;i<pi.length;i++){
                pi[i]=-1;
            }
            //Creating Listener for update pi when the user update cell values
            tModel.addTableModelListener( new TableModelListener(){
                 public void tableChanged(TableModelEvent e){

                     int col = e.getColumn();
                     int row = e.getLastRow();

                     DefaultTableModel md = (DefaultTableModel)e.getSource();
                     if( col < 0 ){
                     }else{
                         if(md.getValueAt(row, col).toString().equals("")){
                             pi[col] = -1;
                         }else pi[col]=Double.parseDouble(md.getValueAt(row, col).toString());

                    }
                 }
            });
            //Override renderer for show hint with cell value on mouse move
             jTable1 = new JTable(tModel){
                @Override
                public Component prepareRenderer(TableCellRenderer renderer,
                                                 int rowIndex, int vColIndex) {
                    Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
                    if (c instanceof JComponent) {
                        JComponent jc = (JComponent)c;
                        if(pi[vColIndex]>=0.0){
                           jc.setToolTipText(""+pi[vColIndex]);
                        }else{
                           jc.setToolTipText(null);
                        }
                        
                    }
                    return c;
                }
            };
            jScrollPane1.setViewportView(jTable1);
            if(hStates<6){
                jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
            }else{
                jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            }
            in.close();

        } catch (FileNotFoundException ex) {
            T2MTKCommon.errorMessage("", "Error importing Tangram-II model: "+ex.getMessage());
        } catch (IOException e) {
            T2MTKCommon.errorMessage("", "Error importing Tangram-II model: "+e.getMessage());
        }



        //Creating design for jTable2 (Hidden States Transition Matrix)
        String[][] header = new String[hStates][];
        String[]  col = new String[hStates];
        for (int i = 0; i < header.length; i++) {
            header[i] = new String[] { Integer.toString(i) };
            col[i] = new String(""+i);
        }

        JTable rowHeader = new JTable(header, new String[] {"A"});
        rowHeader.setBackground(jLabel1.getBackground());
        rowHeader.setCellSelectionEnabled(false);
        rowHeader.setColumnSelectionAllowed(false);
        rowHeader.setFocusable(false);
        JViewport viewport = new JViewport();
        viewport.setView(rowHeader);
        viewport.setPreferredSize(new Dimension(30, 0));
        jScrollPane2.setRowHeader(viewport);

        DefaultTableModel modelA = new DefaultTableModel(col,hStates);
        jTable2.setModel(modelA);
        if(hStates<6){
            jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        }

        //Creating Design for jTable3 (Symbols Transition Matrix)
        header = new String[symbols][];
        col = new String[symbols];
        for (int i = 0; i < header.length; i++) {
            header[i] = new String[] { Integer.toString(i) };
            col[i] = new String(""+i);
        }

        rowHeader = new JTable(header, new String[] {"A"});
        rowHeader.setBackground(jLabel1.getBackground());
        rowHeader.setCellSelectionEnabled(false);
        rowHeader.setColumnSelectionAllowed(false);
        rowHeader.setFocusable(false);
        viewport = new JViewport();
        viewport.setView(rowHeader);
        viewport.setPreferredSize(new Dimension(30, 0));
        jScrollPane3.setRowHeader(viewport);

        DefaultTableModel modelB = new DefaultTableModel(col,symbols);
        jTable3.setModel(modelB);
        if(symbols<6){
                jTable3.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        }
        /*if(symbols<3){
                jScrollPane3.getViewport().setViewSize(new Dimension(300,20));
        }*/

        // Reading extracted data
        String buf = "";

        if(model.equals("ghmm")){
            T2MTKGhmm ghmm = T2MTKGhmmIO.read(currdir+currmodel+".HMM.parameters");
            jTextField1.setText(""+ghmm.getHStates());
            jTextField2.setText("2");
            for(int i=0;i<ghmm.getHStates();i++){
                for(int j=0;j<ghmm.getHStates();j++){
                    buf = T2MTKCommon.parseCientificNot(ghmm.getHStatesTransitionMatrix(i, j));
                    jTable2.setValueAt(buf, i, j);
                }
            }

            buf = T2MTKCommon.parseCientificNot(ghmm.get_0to1TransitionProb(0));
            jTable3.setValueAt(buf, 0, 1);
            buf = T2MTKCommon.parseCientificNot(ghmm.get_1to0TransitionProb(0));
            jTable3.setValueAt(buf, 1, 0);
            buf = T2MTKCommon.parseCientificNot(1-ghmm.get_0to1TransitionProb(0));
            jTable3.setValueAt(buf, 0, 0);
            buf = T2MTKCommon.parseCientificNot(1-ghmm.get_1to0TransitionProb(0));
            jTable3.setValueAt(buf, 1, 1);

            for(int i=0;i<ghmm.getHStates();i++){
                jComboBox1.addItem(""+i);
            }
        }

        if(!model.equals("ghmm")){
            T2MTKHierarchicalHmm hhmm = T2MTKHierarchicalHmmIO.read(currdir+currmodel+".HMM.parameters");
            jTextField1.setText(""+hhmm.getHStates());
            jTextField2.setText(""+hhmm.getSymbols());
            for(int i=0;i<hhmm.getHStates();i++){
                for(int j=0;j<hhmm.getHStates();j++){
                    buf = T2MTKCommon.parseCientificNot(hhmm.getHiddenStTransProb(i, j));
                    jTable2.setValueAt(buf, i, j);
                }
            }
            for(int i=0;i<hhmm.getHStates();i++){
                    jComboBox1.addItem(""+i);
            }
            for(int i=0;i<hhmm.getSymbols();i++){
                for(int j=0;j<hhmm.getSymbols();j++){
                    buf = T2MTKCommon.parseCientificNot(hhmm.getSymbolsTransProb(0, i, j));
                    jTable3.setValueAt(buf, i, j);
                }
            }

        }
    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean checkOK=true;
        T2MTKCommon.createCmds();
        T2MTKCommon.addCmd(model+" = new "+model+"()");
        T2MTKCommon.addCmd(T2MTKHierarchicalHmmImportFromTangram.importLine);
        for(int i = 0;i<hStates;i++){
            if(pi[i]<0.0) checkOK=false;
            else T2MTKCommon.addCmd(model+".pi["+i+"] = "+pi[i]);
        }
        if(!model.equals("hmm_batch_variable")){
            if(Integer.parseInt(jSpinner1.getValue().toString())<1) checkOK=false;
            else T2MTKCommon.addCmd(model+".B ="+jSpinner1.getValue());
        }
        if(checkOK == true){
            T2MTKCommon.addCmd(model+".save(\""+modelDataFile+"\",\"all\")");
            T2MTKCommon.addCmd(model+".load(\""+modelDataFile+"\",\"all\")");
            T2MTKMessages out = T2MTKCommon.exec();
            if(!out.getError().equals("")){
                if(out.getError().contains("normalize")){
                    int resp = JOptionPane.showConfirmDialog(null, out.getError()+"\n\n Do you want normalize it now?", "Tangram II", JOptionPane.YES_NO_OPTION);
                    if(resp==0){
                        //YES
                        T2MTKCommon.createCmds();
                        T2MTKCommon.addCmd(model+" = new "+model+"()");
                        T2MTKCommon.addCmd(model+".load(\""+modelDataFile+"\",\"all\")");
                        T2MTKCommon.addCmd(model+".normalize()");
                        T2MTKCommon.addCmd(model+".save(\""+modelDataFile+"\",\"all\")");

                        out = T2MTKCommon.exec();

                        if(!out.getOut().equals("")){
                            T2MTKCommon.infoMessage("", out.getOut());
                        }

                        // realoading HMM for check normalize successful

                        T2MTKCommon.createCmds();
                        T2MTKCommon.addCmd(model+" = new "+model+"()");
                        T2MTKCommon.addCmd(model+".load(\""+modelDataFile+"\",\"all\")");

                        out = T2MTKCommon.exec();

                        if(out.getError().equals("")){
                            T2MTKCommon.infoMessage("", "Model parameters were successfully normalized.");
                            T2MTKHierarchicalHmmMethods met = new T2MTKHierarchicalHmmMethods();
                            met.setVisible(true);
                            this.dispose();
                        }else{
                            T2MTKCommon.errorMessage("Hmm Create", out.getError());
                        }
                    }else{
                        //NO
                        // TODO: what do in this case?
                    }
                }else{
                    T2MTKCommon.errorMessage("importing model", out.getError());
                }
            }else{
                if(!out.getOut().equals("")){
                    T2MTKCommon.infoMessage("Importing From Model", out.getOut());
                }
                T2MTKHierarchicalHmmMethods met = new T2MTKHierarchicalHmmMethods();
                met.setVisible(true);
                this.dispose();
            }
        }else{
            T2MTKCommon.errorMessage("", "Null or incompatible values specified for the initial hidden state distribution and/or batch size.");
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

        if(jToggleButton1.isSelected()){
            //Turn On Equiprobable
            for(int i=0;i<hStates;i++){
                double value = 1.0/(double)hStates;
                jTable1.setValueAt(T2MTKCommon.parseCientificNot(value), 0, i);
                pi[i]=value;
            }
            jToggleButton2.setSelected(false);
        }else{
            //Turn Off Equiprobable
            for(int i=0;i<hStates;i++){
                jTable1.setValueAt("", 0, i);
                pi[i]=-1;
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        String buf = "";
        if(model.equals("ghmm")){
            T2MTKGhmm ghmm = T2MTKGhmmIO.read(currdir+currmodel+".HMM.parameters");
            int hiddenState = jComboBox1.getSelectedIndex();

            buf = T2MTKCommon.parseCientificNot(ghmm.get_0to1TransitionProb(hiddenState));
            jTable3.setValueAt(buf, 0, 1);
            buf = T2MTKCommon.parseCientificNot(ghmm.get_1to0TransitionProb(hiddenState));
            jTable3.setValueAt(buf, 1, 0);
            buf = T2MTKCommon.parseCientificNot(1-ghmm.get_0to1TransitionProb(hiddenState));
            jTable3.setValueAt(buf, 0, 0);
            buf = T2MTKCommon.parseCientificNot(1-ghmm.get_1to0TransitionProb(hiddenState));
            jTable3.setValueAt(buf, 1, 1);

        }

        if(!model.equals("ghmm")){
            T2MTKHierarchicalHmm hhmm = T2MTKHierarchicalHmmIO.read(currdir+currmodel+".HMM.parameters");
            int hiddenState = jComboBox1.getSelectedIndex();
            for(int i=0;i<hhmm.getSymbols();i++){
                for(int j=0;j<hhmm.getSymbols();j++){
                    buf = T2MTKCommon.parseCientificNot(hhmm.getSymbolsTransProb(hiddenState, i, j));
                    jTable3.setValueAt(buf, i, j);
                }
            }

        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if(jToggleButton2.isSelected()){
            //Turn On Random
            double[] random = T2MTKCommon.randomProbGen(hStates);
            for(int i=0;i<hStates;i++){
                jTable1.setValueAt(T2MTKCommon.parseCientificNot(random[i]), 0, i);
            }
            pi = random;
            jToggleButton1.setSelected(false);
        }else{
            //Turn Off Random
            for(int i=0;i<hStates;i++){
                jTable1.setValueAt("", 0, i);
                pi[i]=-1;
            }
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new T2MTKHierarchicalHmmReadForm().setVisible(true);
            }
        });
    }

    private String model = T2MTKMain.modelType;
    private String modelDataFile = T2MTKCommon.currdir+T2MTKCommon.currmodel+".HMM.parameters";
    private String currdir = T2MTKCommon.currdir;
    private String currmodel = T2MTKCommon.currmodel;
    public static int hStates;
    private int symbols;
    private double[] pi; // initial probabilities of hidden states


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables

}
