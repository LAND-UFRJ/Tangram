/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * T2MTKHmmReadFormSymbol.java
 *
 * Created on Jun 30, 2009, 12:41:04 PM
 */

package Tangram2;

import java.awt.Component;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author balves
 */
public class T2MTKHmmReadFormSymbol extends javax.swing.JFrame {

    /** Creates new form T2MTKHmmReadFormSymbol */
    public T2MTKHmmReadFormSymbol() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tangram II");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setMinimumSize(new java.awt.Dimension(372, 50));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Equiprobable");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Random");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jToggleButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jToggleButton1, jToggleButton2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jToggleButton2)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jToggleButton1, jToggleButton2});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        jLabel1.setText("Symbol emission probability distribution in Hidden State "+hState);
        symbolVector = new double[T2MTKHmmReadForm.symGenTables[hState].length];
        for(int i = 0;i<symbolVector.length;i++){
            symbolVector[i]=T2MTKHmmReadForm.symGenTables[hState][i];
        }
        String[]  col = new String[symbolVector.length];
        for (int i = 0; i < col.length; i++) {
            col[i] = new String(""+i);
        }
        DefaultTableModel tModel = new DefaultTableModel(col,1);
        //Creating Listener for update symbolVector on cell update
        tModel.addTableModelListener( new TableModelListener(){
             public void tableChanged(TableModelEvent e){

                 int col = e.getColumn();
                 int row = e.getLastRow();

                 DefaultTableModel md = (DefaultTableModel)e.getSource();
                 if( col < 0 ){
                 }else{
                     if(md.getValueAt(row, col).toString().equals("")){
                         symbolVector[col] = -1;
                     }else symbolVector[col]=Double.parseDouble(md.getValueAt(row, col).toString());

                }
             }
         });

         //Override renderer for show hint with cell value on mouse move
         jTable1 = new JTable(tModel){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer,
                                             int rowIndex, int vColIndex) {
                Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
                if (c instanceof JComponent) {
                    JComponent jc = (JComponent)c;
                    if(symbolVector[vColIndex]>=0){
                        jc.setToolTipText(""+symbolVector[vColIndex]);
                    }else{
                        jc.setToolTipText(null);
                    }
                }
                return c;
            }
        };
        jScrollPane1.setViewportView(jTable1);
        if(symbolVector.length<6){
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        }else{
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        }

        if(T2MTKCommon.sumVector(symbolVector)>0.0){
           for (int i = 0; i < symbolVector.length; i++) {
               double value = symbolVector[i];
               jTable1.setValueAt(T2MTKCommon.parseCientificNot(symbolVector[i]), 0, i);
               symbolVector[i] = value;
            }
        }else{
            for (int i = 0; i < symbolVector.length; i++) {
                jTable1.setValueAt("", 0, i);
                symbolVector[i] = -1;
            }
        }
        
    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for(int i = 0;i<symbolVector.length;i++){
            T2MTKHmmReadForm.symGenTables[hState][i]=symbolVector[i];
        }
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if(jToggleButton1.isSelected()){
            //Turn On Equiprobable emission probabilities of symbols on this hidden state
            for(int i = 0;i<symbolVector.length;i++){
                double value = 1.0/(double)symbolVector.length;
                jTable1.setValueAt(T2MTKCommon.parseCientificNot(value), 0, i);
                symbolVector[i]=value;
            }
            jToggleButton2.setSelected(false);
        }else{
            //Turn Off Equiprobable emission probabilities of symbols on this hidden state
            for(int i = 0;i<symbolVector.length;i++){
                jTable1.setValueAt("", 0, i);
                symbolVector[i] = -1;
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if(jToggleButton2.isSelected()){
            //Turn On Random emission probabilities of symbols on this hidden state
            double[] random = T2MTKCommon.randomProbGen(symbolVector.length);
            for(int i = 0;i<symbolVector.length;i++){
                jTable1.setValueAt(T2MTKCommon.parseCientificNot(random[i]), 0, i);
            }
            symbolVector = random;
            jToggleButton1.setSelected(false);
        }else{
            //Turn Off Equiprobable emission probabilities of symbols on this hidden state
            for(int i = 0;i<symbolVector.length;i++){
                jTable1.setValueAt("", 0, i);
                symbolVector[i] = -1;
            }
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new T2MTKHmmReadFormSymbol().setVisible(true);
            }
        });
    }

    public double symbolVector[];
    public int hState;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables

}
