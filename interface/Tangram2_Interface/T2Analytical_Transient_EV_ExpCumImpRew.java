/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2Analytical_Transient_EV_ExpCumImpRew extends javax.swing.JPanel {

  /** Initializes the Form */
  public T2Analytical_Transient_EV_ExpCumImpRew( T2modelenv ModelEnv ) {
    modelenv = ModelEnv;
    initComponents ();
    initComponentsManual ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
private void initComponents () {//GEN-BEGIN:initComponents
    jP_EV_Expected_CR_Method = new javax.swing.JPanel ();
    jLabel4 = new javax.swing.JLabel ();
    jB_File_Chooser = new javax.swing.JButton ();
    jTF_Reward_Name = new javax.swing.JTextField ();
    setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());

    jP_EV_Expected_CR_Method.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
    jP_EV_Expected_CR_Method.setBorder (new javax.swing.border.LineBorder(java.awt.Color.gray));

      jLabel4.setText ("Reward Name");
      jLabel4.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_EV_Expected_CR_Method.add (jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 271, -1, -1));
  
      jB_File_Chooser.setText ("...");
      jB_File_Chooser.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
              jB_File_ChooserActionPerformed (evt);
          }
      }
      );
  
      jP_EV_Expected_CR_Method.add (jB_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints (508, 267, 22, 20));
  
  
      jP_EV_Expected_CR_Method.add (jTF_Reward_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints (125, 267, 380, 20));
  

    add (jP_EV_Expected_CR_Method, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 10, 540, 310));

}//GEN-END:initComponents

  private void jB_File_ChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_File_ChooserActionPerformed
    if ( fchooser.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION )
      jTF_Reward_Name.setText( fchooser.getSelectedFile().getName().substring(new String(modelenv.curmodel).length()+16) );
  }//GEN-LAST:event_jB_File_ChooserActionPerformed

  private void initComponentsManual()
  {
    fchooser  = new javax.swing.JFileChooser();
    objFilter = new ExampleFileFilterEx(0, modelenv.curmodel, new String[] {".impulse_reward."}, ".expr", "Impulse reward files");
    fchooser.addChoosableFileFilter(objFilter);
    fchooser.setFileFilter( objFilter );
    fchooser.setDialogTitle("Choose Impulse Reward File");
    fchooser.setCurrentDirectory( new java.io.File (modelenv.curdir));

    jP_Probability_and_Intervals = new T2Analytical_Transient_Probability_and_Intervals();
    jP_EV_Expected_CR_Method.add (jP_Probability_and_Intervals, new org.netbeans.lib.awtextra.AbsoluteConstraints (1, 1, 538, 270));
  }


  public void Evaluate()
  {
    String command, precision;

    precision = jP_Probability_and_Intervals.Is_some_field_missing_and_get_precision( modelenv.curmodel );

    // test Precision
    if ((precision.compareTo("999")==0) || (!T2functions.Is_Precision_valid(precision, this)))
      return;

    //Get and test Reward name
    if (jTF_Reward_Name.getText().trim().compareTo("") == 0) {
      javax.swing.JOptionPane.showMessageDialog(this,"Reward name not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    java.io.File arq_rew = new java.io.File( modelenv.curmodel + ".impulse_reward."+ jTF_Reward_Name.getText());
    if (!(arq_rew.exists())) {
      javax.swing.JOptionPane.showMessageDialog(this,"File " + modelenv.curmodel + ".impulse_reward." + jTF_Reward_Name.getText() + " doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    command = "solv " + modelenv.curmodel + " 17 " + jTF_Reward_Name.getText() + " " + precision;

    modelenv.analytical.setEnabled(false);
    status = new T2status(modelenv.analytical, "Solver Status", "Solv is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
    status.show();
    status.start();
  }

  public String Get_Method_Name() {
    return "Expected cumulative impulse reward";
  }

  public void KillChild()
  {
    if( status != null )
    {
      status.Proc.destroy();
      status.dispose();
    }
  }

// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel jP_EV_Expected_CR_Method;
private javax.swing.JLabel jLabel4;
private javax.swing.JButton jB_File_Chooser;
private javax.swing.JTextField jTF_Reward_Name;
// End of variables declaration//GEN-END:variables
// More variables...
  private javax.swing.JFileChooser fchooser;
  private ExampleFileFilterEx objFilter;
  private T2modelenv modelenv;
  private T2Analytical_Transient_Probability_and_Intervals jP_Probability_and_Intervals;
  private T2status status;
}


