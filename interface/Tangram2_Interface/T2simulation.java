/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

import java.awt.*;
import javax.swing.*;
import java.util.*;
import java.io.*;

public class T2simulation extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2simulation(T2modelenv mainholder) {
    modelenv = mainholder;

    Vector reward_vector = get_reward_names( );

    String reward_names[] = new String[reward_vector.size( )];

    for( int i = 0; i < reward_vector.size( ); i++ )
        reward_names[i] = (String)reward_vector.elementAt( i );

    reward_data = new T2reward_data( reward_names );

    initComponents();
    initComponentsManual();
    pack();
    //init_combos();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jB_Simulate = new javax.swing.JButton();
        jB_Close = new javax.swing.JButton();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir = new javax.swing.JLabel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jL_Tangram_Picture = new javax.swing.JLabel();
        jP_Simulation = new javax.swing.JPanel();
        jTP_Simulation_Option = new javax.swing.JTabbedPane();
        jP_Batch_Simulation = new javax.swing.JPanel();
        jL_Simulation_Output = new javax.swing.JLabel();
        jP_Batch_Parameters = new javax.swing.JPanel();
        jL_Runs = new javax.swing.JLabel();
        jTF_Runs = new javax.swing.JTextField();
        jL_Confidence_Interval = new javax.swing.JLabel();
        jP_Confidence_Interval = new javax.swing.JPanel();
        jTB_90 = new javax.swing.JToggleButton();
        jTB_95 = new javax.swing.JToggleButton();
        jTB_99 = new javax.swing.JToggleButton();
        jChB_Rare_event_simulation = new javax.swing.JCheckBox();
        jL_Rare_event_simulation = new javax.swing.JLabel();
        jL_Variable_Name = new javax.swing.JLabel();
        jCB_Variable_Name = new javax.swing.JComboBox();
        jSP_Table_Rare = new javax.swing.JScrollPane();
        jT_Rare_event = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jChB_Parallelize_runs = new javax.swing.JCheckBox();
        jP_Stop_Condition = new javax.swing.JPanel();
        jTF_Time = new javax.swing.JTextField();
        jL_Time = new javax.swing.JLabel();
        jL_Transitions = new javax.swing.JLabel();
        jTF_Transitions = new javax.swing.JTextField();
        jTF_Event_Number_of_Triggers = new javax.swing.JTextField();
        jTF_State_Value1 = new javax.swing.JTextField();
        jL_State_Value = new javax.swing.JLabel();
        jL_Event_Number_of_Triggers = new javax.swing.JLabel();
        jL_Event_Object = new javax.swing.JLabel();
        jL_State_Object = new javax.swing.JLabel();
        jP_Stopmutex = new javax.swing.JPanel();
        jTB_Transitions = new javax.swing.JToggleButton();
        jTB_Event = new javax.swing.JToggleButton();
        jTB_State = new javax.swing.JToggleButton();
        jL_Event = new javax.swing.JLabel();
        jL_State = new javax.swing.JLabel();
        jChB_Time = new javax.swing.JCheckBox();
        jChB_TES = new javax.swing.JCheckBox();
        jTF_State_Value2 = new javax.swing.JTextField();
        jL_Stop_Condition = new javax.swing.JLabel();
        jP_Simulation_File_Name = new javax.swing.JPanel();
        jL_Simulation_File_Name = new javax.swing.JLabel();
        jTF_Simulation_File_Name = new javax.swing.JTextField();
        jL_Reward_Option = new javax.swing.JLabel();
        jP_Reward = new javax.swing.JPanel();
        jL_Obs_1 = new javax.swing.JLabel();
        jB_Configure = new javax.swing.JButton();
        jL_Batch_Parameters1 = new javax.swing.JLabel();
        jP_Interactive_Simulation = new javax.swing.JPanel();
        jP_Interactive_Parameters = new javax.swing.JPanel();
        jL_Step = new javax.swing.JLabel();
        jL_ani_Time_Scale = new javax.swing.JLabel();
        jL_Animation = new javax.swing.JLabel();
        jL_Delay = new javax.swing.JLabel();
        jTF_Step = new javax.swing.JTextField();
        jTF_ani_Time_Scale = new javax.swing.JTextField();
        jTF_Delay = new javax.swing.JTextField();
        jP_Animation = new javax.swing.JPanel();
        jTB_timebeesteps = new javax.swing.JToggleButton();
        jTB_timescale = new javax.swing.JToggleButton();
        jP_mode = new javax.swing.JPanel();
        jTB_step_simul = new javax.swing.JToggleButton();
        jTB_continuous_simul = new javax.swing.JToggleButton();
        jTB_animation = new javax.swing.JToggleButton();
        jL_step_simul = new javax.swing.JLabel();
        jL_continuous_simul = new javax.swing.JLabel();
        jL_ani_timebeesteps = new javax.swing.JLabel();
        jTF_ani_timebeesteps = new javax.swing.JTextField();
        jL_Interactive_Parameters = new javax.swing.JLabel();
        jB_Plot = new javax.swing.JButton();
        jB_Options = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Simulation]");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jB_Simulate.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Simulate.setLabel("Simulate");
        jB_Simulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_SimulateActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Simulate, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 10, 110, 30));

        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setLabel("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 130, 110, 30));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Status_Bar_Dir.setText("Directory:");
        jL_Status_Bar_Dir.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Dir, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, 10));

        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 4, 260, -1));

        jL_Status_Bar_Model.setText("Model:");
        jL_Status_Bar_Model.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, 10));

        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 4, 300, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 480, 715, 20));

        jL_Tangram_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_simulation.gif")));
        getContentPane().add(jL_Tangram_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 442, -1, -1));

        jP_Simulation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Simulation.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jTP_Simulation_Option.setFont(new java.awt.Font("Dialog", 1, 9));
        jP_Batch_Simulation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Batch_Simulation.setPreferredSize(new java.awt.Dimension(555, 450));
        jL_Simulation_Output.setText("Simulation Output");
        jL_Simulation_Output.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Batch_Simulation.add(jL_Simulation_Output, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 130, 20));

        jP_Batch_Parameters.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Batch_Parameters.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Runs.setText("Runs");
        jL_Runs.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Batch_Parameters.add(jL_Runs, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 40, 20));

        jTF_Runs.setText("1");
        jP_Batch_Parameters.add(jTF_Runs, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 110, 20));

        jL_Confidence_Interval.setText("Confidence Interval");
        jL_Confidence_Interval.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Batch_Parameters.add(jL_Confidence_Interval, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 57, 230, 20));

        jP_Confidence_Interval.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_90.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_90.setText("90 %");
        jP_Confidence_Interval.add(jTB_90, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 65, 20));

        jTB_95.setSelected(true);
        jTB_95.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_95.setText("95 %");
        jP_Confidence_Interval.add(jTB_95, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 0, 65, 20));

        jTB_99.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_99.setText("99 %");
        jP_Confidence_Interval.add(jTB_99, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 65, 20));

        jP_Batch_Parameters.add(jP_Confidence_Interval, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 195, 20));

        jChB_Rare_event_simulation.setFont(new java.awt.Font("Dialog", 1, 10));
        jChB_Rare_event_simulation.setText("Rare event simulation");
        jChB_Rare_event_simulation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCB_Rare_event_simulationStateChanged(evt);
            }
        });

        jP_Batch_Parameters.add(jChB_Rare_event_simulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jL_Rare_event_simulation.setText("Rare event simulation");
        jL_Rare_event_simulation.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Rare_event_simulation.setEnabled(false);
        jP_Batch_Parameters.add(jL_Rare_event_simulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 2, 150, 20));

        jL_Variable_Name.setText("Variable Name");
        jL_Variable_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Variable_Name.setEnabled(false);
        jP_Batch_Parameters.add(jL_Variable_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 25, 100, 20));

        jCB_Variable_Name.setEnabled(false);
        jP_Batch_Parameters.add(jCB_Variable_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 25, 200, 20));

        jSP_Table_Rare.setEnabled(false);
        jT_Rare_event.setEnabled(false);
        jT_Rare_event.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jT_Rare_eventFocusLost(evt);
            }
        });

        jSP_Table_Rare.setViewportView(jT_Rare_event);

        jP_Batch_Parameters.add(jSP_Table_Rare, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 52, 310, 78));

        jPanel2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Batch_Parameters.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 0, 1, 140));

        jChB_Parallelize_runs.setFont(new java.awt.Font("Dialog", 1, 10));
        jChB_Parallelize_runs.setText("Parallelize Runs");
        jP_Batch_Parameters.add(jChB_Parallelize_runs, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, -1, -1));

        jP_Batch_Simulation.add(jP_Batch_Parameters, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 545, 140));

        jP_Stop_Condition.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Stop_Condition.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Stop_Condition.add(jTF_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 145, 20));

        jL_Time.setText("Time");
        jL_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Stop_Condition.add(jL_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 10, -1, 20));

        jL_Transitions.setText("Transitions");
        jL_Transitions.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Transitions.setEnabled(false);
        jP_Stop_Condition.add(jL_Transitions, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 35, -1, 20));

        jTF_Transitions.setEnabled(false);
        jP_Stop_Condition.add(jTF_Transitions, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 35, 80, 20));

        jTF_Event_Number_of_Triggers.setEnabled(false);
        jP_Stop_Condition.add(jTF_Event_Number_of_Triggers, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 60, 70, 20));

        jTF_State_Value1.setEnabled(false);
        jTF_State_Value1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_State_Value1ActionPerformed(evt);
            }
        });

        jP_Stop_Condition.add(jTF_State_Value1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 85, 55, 20));

        jL_State_Value.setText("Values:");
        jL_State_Value.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_State_Value.setEnabled(false);
        jP_Stop_Condition.add(jL_State_Value, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 85, -1, 20));

        jL_Event_Number_of_Triggers.setText("N. of Triggers:");
        jL_Event_Number_of_Triggers.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Event_Number_of_Triggers.setEnabled(false);
        jP_Stop_Condition.add(jL_Event_Number_of_Triggers, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 60, -1, 20));

        jL_Event_Object.setText("Event:");
        jL_Event_Object.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Event_Object.setEnabled(false);
        jP_Stop_Condition.add(jL_Event_Object, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 60, -1, 20));

        jL_State_Object.setText("Variable:");
        jL_State_Object.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_State_Object.setEnabled(false);
        jP_Stop_Condition.add(jL_State_Object, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 85, -1, 20));

        jP_Stopmutex.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_Transitions.setSelected(true);
        jTB_Transitions.setEnabled(false);
        jTB_Transitions.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_TransitionsStateChanged(evt);
            }
        });

        jP_Stopmutex.add(jTB_Transitions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 2, 15, 15));

        jTB_Event.setEnabled(false);
        jTB_Event.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_EventStateChanged(evt);
            }
        });

        jP_Stopmutex.add(jTB_Event, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 27, 15, 15));

        jTB_State.setEnabled(false);
        jTB_State.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_TransitionsActionPerformed(evt);
            }
        });
        jTB_State.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_StateStateChanged(evt);
            }
        });

        jP_Stopmutex.add(jTB_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 52, 15, 15));

        jP_Stop_Condition.add(jP_Stopmutex, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 35, -1, -1));

        jL_Event.setText("Event");
        jL_Event.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Event.setEnabled(false);
        jP_Stop_Condition.add(jL_Event, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 60, -1, 20));

        jL_State.setText("State");
        jL_State.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_State.setEnabled(false);
        jP_Stop_Condition.add(jL_State, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 85, -1, 20));

        jChB_Time.setSelected(true);
        jChB_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jChB_Time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChB_TimeActionPerformed(evt);
            }
        });
        jChB_Time.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jChB_TimeStateChanged(evt);
            }
        });

        jP_Stop_Condition.add(jChB_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 15, -1));

        jChB_TES.setFont(new java.awt.Font("Dialog", 1, 10));
        jChB_TES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_TimeActionPerformed(evt);
            }
        });
        jChB_TES.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jChB_TESStateChanged(evt);
            }
        });

        jP_Stop_Condition.add(jChB_TES, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 15, -1));

        jTF_State_Value2.setEnabled(false);
        jTF_State_Value2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_State_Value2ActionPerformed(evt);
            }
        });

        jP_Stop_Condition.add(jTF_State_Value2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 85, 55, 20));

        jP_Batch_Simulation.add(jP_Stop_Condition, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 545, 120));

        jL_Stop_Condition.setText("Stop Condition");
        jL_Stop_Condition.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Batch_Simulation.add(jL_Stop_Condition, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 110, 20));

        jP_Simulation_File_Name.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Simulation_File_Name.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Simulation_File_Name.setText("File Name");
        jL_Simulation_File_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Simulation_File_Name.add(jL_Simulation_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jP_Simulation_File_Name.add(jTF_Simulation_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 5, 455, 20));

        jP_Batch_Simulation.add(jP_Simulation_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 545, 30));

        jL_Reward_Option.setText("Reward Options");
        jL_Reward_Option.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Batch_Simulation.add(jL_Reward_Option, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 120, 20));

        jP_Reward.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Reward.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Obs_1.setText("  Used to set up the reward options");
        jL_Obs_1.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Reward.add(jL_Obs_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 15, -1, -1));

        jB_Configure.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Configure.setText("Configure ...");
        jB_Configure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ConfigureActionPerformed(evt);
            }
        });

        jP_Reward.add(jB_Configure, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jP_Batch_Simulation.add(jP_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 545, 40));

        jL_Batch_Parameters1.setText("Parameters");
        jL_Batch_Parameters1.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Batch_Simulation.add(jL_Batch_Parameters1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 90, 20));

        jTP_Simulation_Option.addTab("Batch", null, jP_Batch_Simulation, "");

        jP_Interactive_Simulation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Interactive_Parameters.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Interactive_Parameters.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Step.setText("Number of transitions until next stopping point");
        jL_Step.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Interactive_Parameters.add(jL_Step, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, -1, 20));

        jL_ani_Time_Scale.setText("Time scale (milliseconds)");
        jL_ani_Time_Scale.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_ani_Time_Scale.setEnabled(false);
        jP_Interactive_Parameters.add(jL_ani_Time_Scale, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 144, 220, -1));

        jL_Animation.setText("Animation");
        jL_Animation.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Interactive_Parameters.add(jL_Animation, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 105, -1, -1));

        jL_Delay.setText("Time between steps (milliseconds)");
        jL_Delay.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Delay.setEnabled(false);
        jP_Interactive_Parameters.add(jL_Delay, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 75, 250, 20));

        jTF_Step.setToolTipText("Number of transitions");
        jP_Interactive_Parameters.add(jTF_Step, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 30, 150, 20));

        jTF_ani_Time_Scale.setToolTipText("Defines the simulation time unit ");
        jTF_ani_Time_Scale.setEnabled(false);
        jTF_ani_Time_Scale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_ani_Time_ScaleActionPerformed(evt);
            }
        });

        jP_Interactive_Parameters.add(jTF_ani_Time_Scale, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 140, 150, 20));

        jTF_Delay.setToolTipText("Sleep before execute next step");
        jTF_Delay.setEnabled(false);
        jP_Interactive_Parameters.add(jTF_Delay, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 75, 150, 20));

        jP_Animation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_timebeesteps.setSelected(true);
        jTB_timebeesteps.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_timebeesteps.setEnabled(false);
        jTB_timebeesteps.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_timebeestepsStateChanged(evt);
            }
        });

        jP_Animation.add(jTB_timebeesteps, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 15, 15));

        jTB_timescale.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_timescale.setEnabled(false);
        jTB_timescale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_timescaleStateChanged(evt);
            }
        });

        jP_Animation.add(jTB_timescale, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 15, 15));

        jP_Interactive_Parameters.add(jP_Animation, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 30, 40));

        jP_mode.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_step_simul.setSelected(true);
        jTB_step_simul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_step_simulActionPerformed(evt);
            }
        });
        jTB_step_simul.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_step_simulStateChanged(evt);
            }
        });

        jP_mode.add(jTB_step_simul, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 18, 18));

        jTB_continuous_simul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_continuous_simulActionPerformed(evt);
            }
        });
        jTB_continuous_simul.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_continuous_simulStateChanged(evt);
            }
        });

        jP_mode.add(jTB_continuous_simul, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 45, 18, 18));

        jTB_animation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_continuous_simulActionPerformed(evt);
            }
        });
        jTB_animation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_animationStateChanged(evt);
            }
        });

        jP_mode.add(jTB_animation, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 18, 18));

        jP_Interactive_Parameters.add(jP_mode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 20, 120));

        jL_step_simul.setText("Step Simulation");
        jL_step_simul.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Interactive_Parameters.add(jL_step_simul, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 15, -1, -1));

        jL_continuous_simul.setText("Continuous Simulation");
        jL_continuous_simul.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Interactive_Parameters.add(jL_continuous_simul, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        jL_ani_timebeesteps.setText("Time between steps (milliseconds)");
        jL_ani_timebeesteps.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_ani_timebeesteps.setEnabled(false);
        jP_Interactive_Parameters.add(jL_ani_timebeesteps, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 122, -1, -1));

        jTF_ani_timebeesteps.setToolTipText("Sleep before execute next step");
        jTF_ani_timebeesteps.setEnabled(false);
        jTF_ani_timebeesteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_ani_timebeestepsActionPerformed(evt);
            }
        });

        jP_Interactive_Parameters.add(jTF_ani_timebeesteps, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 118, 150, 20));

        jP_Interactive_Simulation.add(jP_Interactive_Parameters, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 545, 180));

        jL_Interactive_Parameters.setText("Parameters");
        jL_Interactive_Parameters.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Interactive_Simulation.add(jL_Interactive_Parameters, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 90, 20));

        jTP_Simulation_Option.addTab("Interactive", null, jP_Interactive_Simulation, "");

        jP_Simulation.add(jTP_Simulation_Option, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 7, 570, 450));

        getContentPane().add(jP_Simulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 590, 465));

        jB_Plot.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Plot.setText("Plot");
        jB_Plot.setEnabled(false);
        jB_Plot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PlotActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Plot, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 50, 110, 30));

        jB_Options.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Options.setText("Options");
        jB_Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_OptionsActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Options, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 90, 110, 30));

    }//GEN-END:initComponents

    private void jB_OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_OptionsActionPerformed
        if( simulation_options == null )            
            simulation_options = new T2simulation_options();
        simulation_options.setVisible(true);
    }//GEN-LAST:event_jB_OptionsActionPerformed

    private void jB_ConfigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ConfigureActionPerformed
        this.setEnabled(false);
        (new T2simulation_reward( this, reward_data )).show();
    }//GEN-LAST:event_jB_ConfigureActionPerformed

  private void formComponentShown (java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    // Add your handling code here:
  }//GEN-LAST:event_formComponentShown

  private void enable_plot() {

    java.io.File f = new java.io.File(".");
    String[] dirlist;
    ExampleFileFilterEx objFilter_aux = new ExampleFileFilterEx(0,modelenv.curmodel, extensions, "Plot Files");
    dirlist = f.list(objFilter_aux);
    if ((dirlist != null) && (dirlist.length > 0))
      jB_Plot.setEnabled(true);
    else
      jB_Plot.setEnabled(false);

  }



  private void jB_PlotActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PlotActionPerformed

    
    this.setEnabled(false);
    //call plot with the extensions to be filtered!
    plot = new T2plot(this, extensions);
    plot.show();


  }//GEN-LAST:event_jB_PlotActionPerformed

  private void jTB_timescaleStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_timescaleStateChanged
    //disable or enable related components
    jTF_ani_Time_Scale.setEnabled( jTB_timescale.isSelected() && jTB_timescale.isEnabled() );
    jL_ani_Time_Scale.setEnabled( jTB_timescale.isSelected() && jTB_timescale.isEnabled() );
  }//GEN-LAST:event_jTB_timescaleStateChanged

  private void jTB_timebeestepsStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_timebeestepsStateChanged
    //disable or enable related components
    jTF_ani_timebeesteps.setEnabled( jTB_timebeesteps.isSelected() && jTB_timebeesteps.isEnabled() );
    jL_ani_timebeesteps.setEnabled( jTB_timebeesteps.isSelected() && jTB_timebeesteps.isEnabled() );
  }//GEN-LAST:event_jTB_timebeestepsStateChanged

  private void jTF_ani_Time_ScaleActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_ani_Time_ScaleActionPerformed

  }//GEN-LAST:event_jTF_ani_Time_ScaleActionPerformed

  private void jTF_ani_timebeestepsActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_ani_timebeestepsActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jTF_ani_timebeestepsActionPerformed

  private void jTB_animationStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_animationStateChanged
    //disable or enable related components
    jTB_timescale.setEnabled( jTB_animation.isSelected() );
    jTB_timebeesteps.setEnabled( jTB_animation.isSelected() );

    //call the rotines to enable/disable related components
    jTB_timebeestepsStateChanged(evt);
    jTB_timescaleStateChanged(evt);

  }//GEN-LAST:event_jTB_animationStateChanged

  private void jTB_continuous_simulStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_continuous_simulStateChanged
    //disable or enable related components
    jL_Delay.setEnabled( jTB_continuous_simul.isSelected() );
    jTF_Delay.setEnabled( jTB_continuous_simul.isSelected() );
  }//GEN-LAST:event_jTB_continuous_simulStateChanged

  private void jTB_step_simulStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_step_simulStateChanged
    //disable or enable related components
    jL_Step.setEnabled( jTB_step_simul.isSelected() );
    jTF_Step.setEnabled( jTB_step_simul.isSelected() );
  }//GEN-LAST:event_jTB_step_simulStateChanged

  private void jTB_continuous_simulActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_continuous_simulActionPerformed

  }//GEN-LAST:event_jTB_continuous_simulActionPerformed

  private void jTB_step_simulActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_step_simulActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jTB_step_simulActionPerformed



  private void jTF_State_Value2ActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_State_Value2ActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jTF_State_Value2ActionPerformed

  private void jTF_State_Value1ActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_State_Value1ActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jTF_State_Value1ActionPerformed
  private void jCB_EventActionPerformed(java.awt.event.ActionEvent evt) {
  }

  private void jChB_TimeActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChB_TimeActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jChB_TimeActionPerformed

  private void jChB_TESStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jChB_TESStateChanged
    //disable or enable Transitions, Event and State components.
    jTB_Transitions.setEnabled( jChB_TES.isSelected() );
    jTB_TransitionsState_update( jChB_TES.isSelected() && jTB_Transitions.isSelected() );
    jL_Transitions.setEnabled( jChB_TES.isSelected() );

    jTB_Event.setEnabled( jChB_TES.isSelected() );
    jTB_EventState_update( jChB_TES.isSelected() && jTB_Event.isSelected() );
    jL_Event.setEnabled( jChB_TES.isSelected() );

    jTB_State.setEnabled( jChB_TES.isSelected() );
    jTB_StateState_update( jChB_TES.isSelected() && jTB_State.isSelected() );
    jL_State.setEnabled( jChB_TES.isSelected() );

  }//GEN-LAST:event_jChB_TESStateChanged

  private void jChB_TimeState_update(boolean var) {
    //disable or enable jL_Time and jTF_Time
    jL_Time.setEnabled( jChB_Time.isSelected() );
    jTF_Time.setEnabled( jChB_Time.isSelected() );
  }
  private void jChB_TimeStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jChB_TimeStateChanged
   // boolean var = jChB_Time.isSelected();
    if ( jTB_State.isSelected() && !jChB_Time.isSelected() && jChB_TES.isSelected() ) {
      javax.swing.JOptionPane.showMessageDialog(this,"When you choose State as stop condition you need to specify the time too!","Warning",javax.swing.JOptionPane.WARNING_MESSAGE);
      jChB_Time.setSelected( true );
      return;
    }
    jChB_TimeState_update( jChB_Time.isSelected() );
  }//GEN-LAST:event_jChB_TimeStateChanged

  private void jCB_TimeActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_TimeActionPerformed
    // Add your handling code here:
  }//GEN-LAST:event_jCB_TimeActionPerformed

  private void jT_Rare_eventFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jT_Rare_eventFocusLost
    jT_Rare_event.editingStopped(null);
  }//GEN-LAST:event_jT_Rare_eventFocusLost

//*********************************** initComponents Manual *********************************************
  private void initComponentsManual () {

    jL_Status_Bar_Dir_name.setText(T2functions.status_directory(modelenv.curdir));
    jL_Status_Bar_Model_name.setText(modelenv.curmodel);

    
    //notice that the combos aren't ready yet.
    combos_initialized = false;

    javax.swing.ButtonGroup group1 = new javax.swing.ButtonGroup();
    group1.add(jTB_90);
    group1.add(jTB_95);
    group1.add(jTB_99);

    javax.swing.ButtonGroup group2 = new javax.swing.ButtonGroup();
    group2.add(jTB_step_simul);
    group2.add(jTB_continuous_simul);
    group2.add(jTB_animation);

    javax.swing.ButtonGroup group4 = new javax.swing.ButtonGroup();
    group4.add(jTB_Transitions);
    group4.add(jTB_Event);
    group4.add(jTB_State);

    javax.swing.ButtonGroup group6 = new javax.swing.ButtonGroup();
    group6.add(jTB_timebeesteps);
    group6.add(jTB_timescale);

    // default option to the rewards
    rewopt=" -w 4";
    rewfiles="";
    
    jCB_Event = new myCombo();
    jCB_Event.setForeground(new java.awt.Color(0, 0, 0));
    jCB_Event.setEnabled(false);
    
    jP_Stop_Condition.add(jCB_Event, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 60, 200, 20));
    
    jCB_State_Var = new myCombo();
    jCB_State_Var.setForeground(new java.awt.Color(0, 0, 0));
    jCB_State_Var.setEnabled(false);
    
    jP_Stop_Condition.add(jCB_State_Var, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 85, 200, 20));

    // Verify if PVM is available
    if( System.getProperty( "HAVE_PVM" ) == null ) 
        jChB_Parallelize_runs.setEnabled( false );
    
    // Finally, we verify if there is available graphic data to plot...
    enable_plot();


  }

/*************************************** generate_parser function *******************************/
// generate <modelname>.parser file using tgif
  public int generate_parser() {

    Process tgif;
    File testParserFile = new File(modelenv.curmodel + ".parser");

    /* Delete existing .parser file */
    if( testParserFile.exists() )
    {
      if( !testParserFile.canWrite() )
      {
          javax.swing.JOptionPane.showMessageDialog(this,"Can't create "+modelenv.curmodel + ".parser file: Permission denied. \n Check file or directory permissions", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);    
          return(-1);
      } 
      testParserFile.delete();
    }
    else
    {
      try {
      testParserFile.createNewFile();
      testParserFile.delete();
      }
      catch( Exception e ){
        javax.swing.JOptionPane.showMessageDialog(this,"Can't create "+modelenv.curmodel + ".parser file: Permission denied. \n Check directory permissions", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);    
        return(-1);
      }

    } 

    try {
    

      //Runtime.getRuntime().exec( new String[] { "bash","-c","rm -f " + modelenv.curmodel + ".parser" } );    

      tgif = Runtime.getRuntime().exec( new String[] { "bash","-c","tgif " + T2main_app.tgif_flags + " -print -exec - " + modelenv.curmodel } );
      java.io.PrintWriter out = new java.io.PrintWriter( tgif.getOutputStream() );
      String parameter = new String(modelenv.debuglevel + ";0;" + (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
      out.println( "call_one_arg_shortcut(Tangram2GenerateChain,\"" + parameter + "\")" );
      out.flush();
      out.println( "set_file_not_modified()" );
      out.println( "call_simple_shortcut(Quit)" );
      out.flush();
      Thread.sleep( 1 );
      out.flush();
      out.close();
      tgif.waitFor();
      
      /* Check if new .parser was created*/
      testParserFile = new File(modelenv.curmodel + ".parser");
      if( !testParserFile.exists() )
      {
          
        javax.swing.JOptionPane.showMessageDialog(this,"No parser file was created ("+ modelenv.curmodel + ".parser). \n Possible cause: wrong tgif version. Check the INSTALL file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return (-1);
      }    
          
      //Runtime.getRuntime().exec( new String[] { "bash","-c","if [ -f  " + modelenv.curmodel + ".parser ]; then echo 0; fi;" } );    
      
      
      return(tgif.exitValue());
    }
    catch( Exception e ) {
      javax.swing.JOptionPane.showMessageDialog(this,"Error waiting for tgif - Can't simulate!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      return(-1);
    }
  }

/*************************************** gramatica function ************************************/
//call gramatica to generate <modelname>.user_code.c
//this uses gramatica with -S simulation option (necessary to skip <modelname>.maxvalues check)
  private int gramatica() {
    Process Proc;
    try {
      //call gramatica and redirect the stdout and stderr to the correct device
      Proc = Runtime.getRuntime().exec( "gramatica -S " + modelenv.curmodel + ".parser "+ modelenv.curmodel + " " + modelenv.debuglevel );
      new threadCapOut( Proc.getInputStream(),(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Parsing model...: " ).start();
      new threadCapOut( Proc.getErrorStream(),(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Parsing model...: " ).start();
      Proc.waitFor();
      return(Proc.exitValue());
    }
    catch( Exception ex ) {
      javax.swing.JOptionPane.showMessageDialog(this,"gramatica could not be executed - Can't compile model!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      return(-1);
    }
  }

/************************************** init_combos function **************************************************/
//put the state var names into the comboboxes jCB_State_Var and jCB_Variable_Name
//put the events into the combobox jCB_Event

  private int init_combos() {
    String line;
    Process Proc;

    if ( combos_initialized ) {
        jCB_Event.removeAllItems();
        jCB_State_Var.removeAllItems();
    }
    
   // if ( ! combos_initialized ) {

      combos_initialized = true;

      //generate parser using tgif
      if (generate_parser()!=0) {
         javax.swing.JOptionPane.showMessageDialog(this,"Error: "+ modelenv.curmodel + ".parser not created. Can't simulate!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         return(-2);
      }

      if (gramatica()<=-1)
      {
         javax.swing.JOptionPane.showMessageDialog(this,"The model has syntax errors.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         return(-2);
      }
      
      try {
        // Generate file .vstat with the state variables names
        // usage: getNames -v <modelname> 
        Proc = Runtime.getRuntime().exec( "getNames -v " + modelenv.curmodel);
        Proc.waitFor();
        if(Proc.exitValue() != 0) {
          javax.swing.JOptionPane.showMessageDialog(this,"Error: "+modelenv.curmodel + ".state_variables not created (getNames)","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return(-2);
        }
        // Generate file .events with the events names
        // usage: getName -e <modelname>
        Proc = Runtime.getRuntime().exec( "getNames -e " + modelenv.curmodel);
        Proc.waitFor();
        if(Proc.exitValue() != 0) {
          System.err.println("getNames exit value: " + Proc.exitValue());
          javax.swing.JOptionPane.showMessageDialog(this,"Error: "+modelenv.curmodel + ".events not created (getNames)","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return(-2);
        }
      }
      catch( Exception ex ) {
        javax.swing.JOptionPane.showMessageDialog(this,"getNames could not be executed","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return(-2);
      }

      
      // Read information from <MODELNAME>.state_variable and get the variables' names to put into
      // the comboboxes jCB_State_Var and jCB_Variable_Name
      try {
        java.io.FileReader f = new java.io.FileReader( modelenv.curmodel + ".state_variable" );
        java.io.BufferedReader b = new java.io.BufferedReader( f );
        while( (line = b.readLine()) != null ){
          if( line.trim().length() > 0 ){
            //add state variables to the comboboxes
            jCB_Variable_Name.addItem( line.trim() );
            jCB_State_Var.addItem( line.trim() );
          }
        }
        b.close();
        f.close();
      }
      catch( java.io.IOException e ) {
        javax.swing.JOptionPane.showMessageDialog(this,"Couldn't read information from " + modelenv.curmodel + ".vstat.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return(-2);
      }
      jCB_Variable_Name.setSelectedIndex(0);
      jCB_State_Var.setSelectedIndex(0);

      // Read information from <MODELNAME>.events and get the events' names to put into
      // the combobox jCB_Event
      try {
        java.io.FileReader f = new java.io.FileReader( modelenv.curmodel + ".events" );
        java.io.BufferedReader b = new java.io.BufferedReader( f );
        while( (line = b.readLine()) != null ){
          if( line.trim().length() > 0 ){
            //add events the combobox jCB_Event
            jCB_Event.addItem( line.trim() );
          }
        }
        b.close();
        f.close();
      }
      catch( java.io.IOException e ) {
        javax.swing.JOptionPane.showMessageDialog(this,"Couldn't read information from " + modelenv.curmodel + ".events.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return(-2);
      }
      jCB_Event.setSelectedIndex(0);
   // }
    return(0);
  }

/************************************** write_threshold function **************************************************/
//write the <modelname>.threshold file
//format:
// object.state_var_name
// threshold number_of_splits
// ...

  private int write_threshold() {
    try{
      java.io.FileWriter     f = new java.io.FileWriter( modelenv.curmodel + ".threshold" );
      java.io.BufferedWriter b = new java.io.BufferedWriter( f );

      b.write( (String)jCB_Variable_Name.getSelectedItem() + "\n" );

      int i = 0;
      String threshold, number_of_splits;

      threshold  = (String)jT_Rare_event.getValueAt( i, 0 );
      if( threshold == null )
      {
          javax.swing.JOptionPane.showMessageDialog(this,"Missing parameters threshold parameters for rare event simulation.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return (-2);
      }
      
      while( threshold != null && threshold.trim().length() > 0 ) {
          number_of_splits = (String)jT_Rare_event.getValueAt( i, 1 );

          if( threshold.trim().length() > 0 ) {
            if (T2functions.Is_not_number(threshold,0,this,"Threshold")!=0) {
              b.close();
              f.close();
              javax.swing.JOptionPane.showMessageDialog(this,"Threshold parameters must be integers.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
              return(-2);
            }
            b.write( threshold.trim() + " " );
            if( (number_of_splits != null) && (number_of_splits.trim().length() > 0) ){
              if (T2functions.Is_not_number(number_of_splits,0,this,"Number of splits")!=0) {
                b.close();
                f.close();
                javax.swing.JOptionPane.showMessageDialog(this,"Number of splits parameters must be integers.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                return(-2);
              }
              b.write( number_of_splits.trim() + "\n" );
            }
            else {
              javax.swing.JOptionPane.showMessageDialog(this,"You must specify the splits for "+ threshold,"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
              b.close();
              f.close();
              return(-2);
            }
          }
          i++;
          threshold  = (String)jT_Rare_event.getValueAt( i, 0 );
      } 
      
      b.close();
      f.close();
    }
    catch( java.io.IOException e ) {
      javax.swing.JOptionPane.showMessageDialog(this,"Couldn't write the file " + modelenv.curmodel + ".threshold","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return(-2);
    }
    return(0);
  }

/************************************** exec_rare function **************************************************/
//executes markfind file with the appropriate parameters
//Rare Event Simulation

//syntax: mark_find -S -B -R -f <modelname> -o <simul_output_file> -d <debuglevel> -u <runs> -w <rewardoption> [-y] -c <confidence interval> -t <time>

  private void exec_rare() {
    //common
    String command = "./mark_find -S -B -R -f " + modelenv.curmodel + " -o " + simul_output_file + " -d " + Integer.toString(modelenv.debuglevel) +
                     " -u " + jTF_Runs.getText() + rewopt + rewfiles + confidenceopt + " -t " + jTF_Time.getText();
    if( simulation_options != null )
    {
        if( simulation_options.jCB_interevent_time.isSelected() )
            command += " -i " + simulation_options.jTF_interevent_time.getText();
        if( simulation_options.jCB_probabilistic_action.isSelected() )
            command += " -a " + simulation_options.jTF_probabilistic_action.getText();
        if( simulation_options.jCB_get_random_function.isSelected() )
            command += " -g " + simulation_options.jTF_get_random_function.getText();
    }

    //redirecting the stdout and stderr to the appropriate device (terminal or file)
    //call the T2status class that will execute the make and mark_find
    status = new T2status( this, "Rare Event Simulation Status", "Simulation is running.",
                           command, 0 , false, true, modelenv.curmodel,
                           modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen,
                           modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen,
                           "Rare Event Simulation in progress...", "Rare Event Simulation finished!" );
    status.show();
    Process statusprocess = status.start();
    T2enable_plot enableplotbut = new T2enable_plot(statusprocess, modelenv.curmodel, extensions, jB_Plot, modelenv.curdir);
    enableplotbut.start();
 }

/************************************** exec_batch function **************************************************/
//executes markfind file with the appropriate parameters
//Batch Simulation

//case A - syntax: mark_find -S -B -f <modelname> -o <simul_output_file> -d <debuglevel> -u <runs> -w <rewardoption> [-y] -c <confidence interval> -t <time>
//case B - syntax: mark_find -S -B -f <modelname> -o <simul_output_file> -d <debuglevel> -u <runs> -w <rewardoption> [-y] -c <confidence interval> -r <transitions> [-t <time>]
//case C - syntax: mark_find -S -B -f <modelname> -o <simul_output_file> -d <debuglevel> -u <runs> -w <rewardoption> [-y] -c <confidence interval> -e <objname.eventname> -r <transitions> [-t <time>]
//case D - syntax: mark_find -S -B -f <modelname> -o <simul_output_file> -d <debuglevel> -u <runs> -w <rewardoption> [-y] -c <confidence interval> -t <time> -s <objname.statevarname> -l <lowerbound> -p <upperbound>

  private void exec_batch() {
/*
    //common
    String command = "./mark_find -S -B -f " + modelenv.curmodel + " -o " + simul_output_file + " -d " + Integer.toString(modelenv.debuglevel) +
                     " -u " + jTF_Runs.getText() + rewopt + rewfiles + confidenceopt;

    //case A
    if ( jChB_Time.isSelected() && !jChB_TES.isSelected() )
      command = command + " -t " + jTF_Time.getText();

    //case B and C
    if ( jChB_TES.isSelected() ) {
      if ( jTB_Transitions.isSelected() ) //case B
        command = command + " -r " + jTF_Transitions.getText();
      if ( jTB_Event.isSelected() ) //case C
        command = command + " -e " + (String)jCB_Event.getSelectedItem() + " -r " + jTF_Event_Number_of_Triggers.getText();
      //optional time
      if ( jChB_Time.isSelected() )
        command = command + " -t " + jTF_Time.getText();
    }

    //case D
    if ( jChB_TES.isSelected() && jTB_State.isSelected() ) {
      command = command + " -t " + jTF_Time.getText() + " -s " + (String)jCB_State_Var.getSelectedItem() + " -l "+ jTF_State_Value1.getText() + " -p " + jTF_State_Value2.getText();
    }

    System.out.println(command);

    //call the T2status class that will execute the mark_find (program that will simulate the model).

    status = new T2status( this, "Batch Simulation Status", "Simulation is running.", command, 0 , false, true, modelenv.curmodel, modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen, modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen, "Simulation in progress...", "Simulation finished!" );
    status.show();
    Process statusprocess = status.start();

    T2enable_plot enableplotbut = new T2enable_plot(statusprocess, modelenv.curmodel, extensions, jB_Plot, modelenv.curdir);
    enableplotbut.start();

*/
    java.util.Vector commands_vector = new java.util.Vector();
    String errorStream = modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen;

    String [] command_array = new String[3];
    command_array[0] = "bash";
    command_array[1] = "-c";
    command_array[2] = "echo Compiling model... >> " + errorStream;
    commands_vector.add(new T2command(command_array,errorStream,errorStream));

    if ( jChB_Parallelize_runs.isSelected() )
    {
        command_array = new String[6];
    }
    else
    {
        command_array = new String[5];
    }
    command_array[0] = "make";
    command_array[1] = "-f";
    command_array[2] = modelenv.tangrampath+"/lib/Makefile.mark_find";
    command_array[3] = "TANGRAM2_HOME="+ modelenv.tangrampath;
    command_array[4] = "BASE=" + modelenv.curmodel;
    if ( jChB_Parallelize_runs.isSelected() )
    {
        command_array[5] = "distributed";
    }

    commands_vector.add(new T2command(command_array,errorStream,errorStream));

    java.util.Vector temp_vector = new java.util.Vector();
    java.util.Vector temp_files_vector = new java.util.Vector();
    
    if ( jChB_Parallelize_runs.isSelected() )
    {
        temp_vector.add( "masternode" );
        temp_vector.add( jTF_Runs.getText() );
        temp_vector.add(  modelenv.curdir+"/mark_find" );
    }
    else
    {
        temp_vector.add( "./mark_find" );
    }
    temp_vector.add( "-S" );
    temp_vector.add( "-B" );
    temp_vector.add( "-f" );
    temp_vector.add( modelenv.curdir+"/"+modelenv.curmodel );
    temp_vector.add( "-o" );
    temp_vector.add( simul_output_file );

    temp_vector.add( "-d" );
    temp_vector.add( Integer.toString(modelenv.debuglevel) );
    temp_vector.add( "-u" );
    temp_vector.add( jTF_Runs.getText() );
    temp_vector.add( rewopt.trim() );
    temp_vector.add( rewfiles.trim() );
    temp_vector.add( confidenceopt.trim() );
    
    if ( jChB_Time.isSelected() && !jChB_TES.isSelected() ) // case A
    {
      temp_vector.add( "-t" );
      temp_vector.add( jTF_Time.getText() );
    }
    else if ( jChB_TES.isSelected() )
    {
      if ( jTB_Transitions.isSelected() ) //case B
      {
        temp_vector.add( "-r" );
        temp_vector.add( jTF_Transitions.getText() );
      }
      else if ( jTB_Event.isSelected() ) //case C
      {
        temp_vector.add( "-e" );
        temp_vector.add( (String)jCB_Event.getSelectedItem() );
        temp_vector.add( "-r" );
        temp_vector.add( jTF_Event_Number_of_Triggers.getText() );
      }
      //optional time
      if ( jChB_Time.isSelected() )
      {
        temp_vector.add( "-t" );
        temp_vector.add( jTF_Time.getText() );
      }
    }
    else if ( jChB_TES.isSelected() && jTB_State.isSelected() ) // case D
    {
      temp_vector.add( "-t" );
      temp_vector.add( jTF_Time.getText() );
      temp_vector.add( "-s" );
      temp_vector.add( (String)jCB_State_Var.getSelectedItem() );
      temp_vector.add( "-l" );
      temp_vector.add( jTF_State_Value1.getText() );
      temp_vector.add( "-p" );
      temp_vector.add( jTF_State_Value2.getText() );
    }
    /* Customized seeds */
    if( simulation_options != null )
    {
        if( simulation_options.jCB_interevent_time.isSelected() )
        {
            temp_vector.add( "-i" );
            temp_vector.add( simulation_options.jTF_interevent_time.getText() );
        }
        if( simulation_options.jCB_probabilistic_action.isSelected() )
        {
            temp_vector.add( "-a" );
            temp_vector.add( simulation_options.jTF_probabilistic_action.getText() );
        }
        if( simulation_options.jCB_get_random_function.isSelected() )
        {
            temp_vector.add( "-g" );
            temp_vector.add( simulation_options.jTF_get_random_function.getText() );
        }
    }
    
    // start animplot
    if( reward_data.generate_trace )
    {
        String animplot_command = reward_data.get_animplot_command(
                                                        modelenv.curmodel );

        if( animplot_command != null )
        {
            command_array = new String[3];

            command_array[0] = "bash";
            command_array[1] = "-c"; 
            command_array[2] = animplot_command + "&";

            commands_vector.add( new T2command( command_array,
                      modelenv.outputdevice ? modelenv.fileout :
                      modelenv.outputscreen, errorStream ) );
        }
    }    

    // mark_find command
    command_array = new String[3];
    
    command_array[0] = "bash";
    command_array[1] = "-c"; 
    command_array[2] = "";
    for( int i = 0; i < temp_vector.size( ); i++ )
    {
        if( i > 0 )
            command_array[2] += " ";
        command_array[2] += temp_vector.elementAt(i);
    }
   
    commands_vector.add( new T2command( command_array, modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen, errorStream ) );  
    
/*    
    System.out.print("Simulator command line: " );
    for (int i = 0; i < command_array.length; i++ )
    {
        System.out.print(command_array[i] + " " );
    }
    System.out.print("\n" );
*/

    T2progressDialog.showDialog( this, "Batch Simulation Status", "Simulation is running.",
                                 commands_vector, false, false );

  }

/************************************** exec_interactive function **************************************************/
//call another java class to deal with interactive simulation.
//Interactive Simulation

  private void exec_interactive() {
      
    int simulation_mode = 0;

    this.setEnabled(false);
    
    if ( jTB_step_simul.isSelected() )
        simulation_mode = STEP_SIMUL_MODE;
    else if ( jTB_continuous_simul.isSelected() )
        simulation_mode = CONTINUOUS_SIMUL_MODE;
    else if ( jTB_animation.isSelected() )
        simulation_mode = ANIMATION_SIMUL_MODE;
    
    intsimulation  = new T2intsimulation(this, simulation_mode );
    intsimulation.show();

  }

/************************************** get_param_interactive function **************************************************/
//get parameters necessary to the interactive simulation

  public String get_param_interactive() {
    String parameter = new String();

    parameter = "0;0;"+ (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) + ";0;ANY;0;0;I;";

    if ( jTB_animation.isSelected() && jTB_timescale.isSelected() )
      parameter += jTF_ani_Time_Scale.getText() + ";";
    else
      parameter += "0;";

    if ( jTB_animation.isSelected() )
      parameter += "ON;";
    else
      parameter += "OFF;";

    if ( jTB_continuous_simul.isSelected() )
      parameter += jTF_Delay.getText() + ";";
    else if ( jTB_animation.isSelected() && jTB_timebeesteps.isSelected() )
           parameter += jTF_ani_timebeesteps.getText() + ";";
         else
           parameter += "0;";

    if ( jTB_step_simul.isSelected() )
      parameter += jTF_Step.getText();
    else
      parameter += "0;";

    return(parameter);
  }

  private void jCB_Rare_event_simulationStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCB_Rare_event_simulationStateChanged
    jL_Rare_event_simulation.setEnabled(jChB_Rare_event_simulation.isSelected());
    jCB_Variable_Name.setEnabled(jChB_Rare_event_simulation.isSelected());
    jL_Variable_Name.setEnabled(jChB_Rare_event_simulation.isSelected());

    jT_Rare_event.setVisible(jChB_Rare_event_simulation.isSelected());
    jT_Rare_event.setEnabled(jChB_Rare_event_simulation.isSelected());

    if ( jChB_Rare_event_simulation.isSelected() ) {
      init_combos();
      jChB_Time.setSelected(true);
      jChB_TES.setSelected(false);
    }
    jChB_TES.setEnabled(!jChB_Rare_event_simulation.isSelected());
    jChB_Time.setEnabled(!jChB_Rare_event_simulation.isSelected());
  }//GEN-LAST:event_jCB_Rare_event_simulationStateChanged
  private void jTB_StateState_update(boolean var) {
    jCB_State_Var.setEnabled(var);
    jL_State_Object.setEnabled(var);
    jTF_State_Value1.setEnabled(var);
    jTF_State_Value2.setEnabled(var);
    jL_State_Value.setEnabled(var);
    if ( var ) {
      init_combos();
      jChB_Time.setSelected( true );
    }
  }
  private void jTB_StateStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_StateStateChanged
    jTB_StateState_update( jTB_State.isSelected() );
  }//GEN-LAST:event_jTB_StateStateChanged

  private void jTB_EventState_update(boolean var) {
    jL_Event_Object.setEnabled(var);
    jCB_Event.setEnabled(var);
    jTF_Event_Number_of_Triggers.setEnabled(var);
    jL_Event_Number_of_Triggers.setEnabled(var);
    if ( var )
      init_combos();
  }
  private void jTB_EventStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_EventStateChanged
    jTB_EventState_update( jTB_Event.isSelected() );
  }//GEN-LAST:event_jTB_EventStateChanged

  private void jTB_TransitionsState_update(boolean var) {
    jTF_Transitions.setEnabled(var);
  }
  private void jTB_TransitionsStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_TransitionsStateChanged
    jTB_TransitionsState_update(jTB_Transitions.isSelected());
  }//GEN-LAST:event_jTB_TransitionsStateChanged

  private void jTB_TransitionsActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_TransitionsActionPerformed

  }//GEN-LAST:event_jTB_TransitionsActionPerformed

  private void jCB_EventStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCB_EventStateChanged

  }//GEN-LAST:event_jCB_EventStateChanged

  private void jB_SimulateActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_SimulateActionPerformed
    //verify what kind of simulation will be executed

    //System.out.println("Simulating..." );

    if ( jTP_Simulation_Option.getSelectedIndex() == 0 ) 
    {
      if ( jChB_Time.isSelected() || jChB_TES.isSelected() ) 
      {
        if ( (!T2functions.Is_some_field_missing(jP_Batch_Simulation)) ) 
        {
          if (T2functions.Is_not_number(jTF_Runs.getText(),0,this,"Runs")!=0) return;

          if ( jChB_Time.isSelected() ) 
          {
            if (T2functions.Is_not_number(jTF_Time.getText(),1,this,"Time")!=0) return;
          }
          if ( jChB_TES.isSelected() ) 
          {
            if (jTB_Transitions.isSelected()) 
            {
              if (T2functions.Is_not_number(jTF_Transitions.getText(),0,this,"Transitions")!=0) return;
            }
            else if (jTB_Event.isSelected()) 
            {
                   if (T2functions.Is_not_number(jTF_Event_Number_of_Triggers.getText(),0,this,"Number of triggers")!=0) return;
            }
            else {
              try {
                Integer.parseInt(jTF_State_Value1.getText());
                Integer.parseInt(jTF_State_Value2.getText());
              }
              catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this,"Value must be an integer.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
              }
            }
          }
          //set the outputfile for the batch simulation or rare event simulation.
          simul_output_file = "SIMUL." + jTF_Simulation_File_Name.getText();

          //defines the confidence interval
          confidenceopt=" -c 1";
          if (jTB_90.isSelected()) confidenceopt = " -c 0";
          else if (jTB_99.isSelected()) confidenceopt = " -c 2";

          if (jChB_Rare_event_simulation.isSelected()) {
            //---- Rare Event Simulation ------------------------------------------------------------

            //generate threshold copying info from table
            if (write_threshold() != 0) {
              return;
            }

            //call gramatica
            if (gramatica()!=0) {
               javax.swing.JOptionPane.showMessageDialog(this,"Error - model not correctly parsed. Can't simulate!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
               return;
            }

            //System.out.println("Executing exec_rare()");

            //call the script
            exec_rare();
          }
          else {
            //---- Batch Simulation ----------------------------------------------------------------

            //generate parser using tgif
            if (generate_parser()!=0) {
              javax.swing.JOptionPane.showMessageDialog(this,"Error - "+ modelenv.curmodel + ".parser not created. Can't simulate!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
              return;
            }

            //call gramatica
            if (gramatica()!=0) {
               javax.swing.JOptionPane.showMessageDialog(this,"Error - model not correctly parsed. Can't simulate!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
               return;
            }

            //System.out.println("Executing exec_batch()");
            //call the script
            exec_batch();
          }
        }
      }
      else
        javax.swing.JOptionPane.showMessageDialog(this,"You must specify at least one stop condition!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    else {
      if ( !T2functions.Is_some_field_missing(jP_Interactive_Parameters) ) {
        //---- Interactive Simulation ----------------------------------------------------------

        //some semantic checks
        if ( jTB_step_simul.isSelected() ) {
          if (T2functions.Is_not_number(jTF_Step.getText(), 0,this,"Number of transitions") !=0) return;
        }
        else if ( jTB_continuous_simul.isSelected() ) {
          if (T2functions.Is_not_number(jTF_Delay.getText(), 0,this,"Time between steps") !=0) return;
        }
        else if ( jTB_animation.isSelected() ) {
          if ( jTB_timebeesteps.isSelected() ) {
            if (T2functions.Is_not_number(jTF_ani_timebeesteps.getText(), 0,this,"Time between steps") !=0) return;
          }
          else {
            if (T2functions.Is_not_number(jTF_ani_Time_Scale.getText(), 0,this,"Time scale") !=0) return;
            if (Integer.parseInt(jTF_ani_Time_Scale.getText()) <= 0) {
              javax.swing.JOptionPane.showMessageDialog(this,"Time scale must be greater than zero.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
              return;
            }
          }
        }

        //generate parser using tgif
        
        
        if (generate_parser()!=0) {
          javax.swing.JOptionPane.showMessageDialog(this,"Error - "+ modelenv.curmodel + ".parser not created. Can't simulate!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return;
        }
        
        //call gramatica
        if (gramatica()!=0) {
          javax.swing.JOptionPane.showMessageDialog(this,"Error - model not correctly parsed. Can't simulate!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return;
        }
        
        //System.out.println("Executing exec_interative()");
        //call the script
        exec_interactive();
      }
    }

    // System.out.println("Enabling plot..." );

    // Finally, we verify if there is available graphic data to plot...

    enable_plot();



  }//GEN-LAST:event_jB_SimulateActionPerformed

  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed
    //update the figs and buttons!
    modelenv.update_SIMUL();
    modelenv.update_INTSIMUL();
    //destroy the process and dispose the status if necessary!
    if (status != null) {
      status.Proc.destroy();
      status.dispose();
    }
    if (intsimulation != null) { intsimulation.dispose(); }

    modelenv.setEnabled(true);
    dispose();
  }//GEN-LAST:event_jB_CloseActionPerformed

  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CloseActionPerformed(null);
  }//GEN-LAST:event_exitForm

  Vector get_reward_names( )
  {
     Vector reward_vector = new Vector();
     // Generate file .rewards with the rewards names
     try
     {
         Process proc;
        // usage: getNames -r <modelname>
         //generate parser using tgif
        if( generate_parser() != 0 )
        {
           JOptionPane.showMessageDialog( this,
                                      "Error - "+ modelenv.curmodel +
                                      ".parser not created!",
                                      "Error",
                                      JOptionPane.ERROR_MESSAGE );
           return null;
        }

        proc = Runtime.getRuntime().exec( "getNames -r " + modelenv.curmodel );
        proc.waitFor();
        if( proc.exitValue() != 0 )
        {
          JOptionPane.showMessageDialog( this, "getNames error", "Error",
                                         JOptionPane.ERROR_MESSAGE );
        }
      }
      catch( Exception ex )
      {
        JOptionPane.showMessageDialog( this, "getNames could not be executed",
                                       "Error", JOptionPane.ERROR_MESSAGE );
      }

      /* Getting the number of rows of the <model_name>.rewards */
      try
      {
        String line;
        FileReader f     = new FileReader( modelenv.curmodel + ".rewards" );
        BufferedReader b = new BufferedReader( f );

        while( (line = b.readLine()) != null )
        {
            int i = line.indexOf( ".reward_levels." );
            reward_vector.add( line.substring( i+15 ) );
        }

        b.close();
        f.close();
      }
      catch( java.io.IOException e )
      {
        JOptionPane.showMessageDialog( this,
                        "Couldn't read information from " + modelenv.curmodel +
                        ".rewards.", "Error", JOptionPane.ERROR_MESSAGE );
      }
      return reward_vector;
  }
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Close;
    private javax.swing.JButton jB_Configure;
    private javax.swing.JButton jB_Options;
    private javax.swing.JButton jB_Plot;
    private javax.swing.JButton jB_Simulate;
    private javax.swing.JComboBox jCB_Variable_Name;
    private javax.swing.JCheckBox jChB_Parallelize_runs;
    private javax.swing.JCheckBox jChB_Rare_event_simulation;
    private javax.swing.JCheckBox jChB_TES;
    private javax.swing.JCheckBox jChB_Time;
    private javax.swing.JLabel jL_Animation;
    private javax.swing.JLabel jL_Batch_Parameters1;
    private javax.swing.JLabel jL_Confidence_Interval;
    private javax.swing.JLabel jL_Delay;
    private javax.swing.JLabel jL_Event;
    private javax.swing.JLabel jL_Event_Number_of_Triggers;
    private javax.swing.JLabel jL_Event_Object;
    private javax.swing.JLabel jL_Interactive_Parameters;
    private javax.swing.JLabel jL_Obs_1;
    private javax.swing.JLabel jL_Rare_event_simulation;
    private javax.swing.JLabel jL_Reward_Option;
    private javax.swing.JLabel jL_Runs;
    private javax.swing.JLabel jL_Simulation_File_Name;
    private javax.swing.JLabel jL_Simulation_Output;
    private javax.swing.JLabel jL_State;
    private javax.swing.JLabel jL_State_Object;
    private javax.swing.JLabel jL_State_Value;
    private javax.swing.JLabel jL_Status_Bar_Dir;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JLabel jL_Status_Bar_Model;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JLabel jL_Step;
    private javax.swing.JLabel jL_Stop_Condition;
    private javax.swing.JLabel jL_Tangram_Picture;
    private javax.swing.JLabel jL_Time;
    private javax.swing.JLabel jL_Transitions;
    private javax.swing.JLabel jL_Variable_Name;
    private javax.swing.JLabel jL_ani_Time_Scale;
    private javax.swing.JLabel jL_ani_timebeesteps;
    private javax.swing.JLabel jL_continuous_simul;
    private javax.swing.JLabel jL_step_simul;
    private javax.swing.JPanel jP_Animation;
    private javax.swing.JPanel jP_Batch_Parameters;
    private javax.swing.JPanel jP_Batch_Simulation;
    private javax.swing.JPanel jP_Confidence_Interval;
    private javax.swing.JPanel jP_Interactive_Parameters;
    private javax.swing.JPanel jP_Interactive_Simulation;
    private javax.swing.JPanel jP_Reward;
    private javax.swing.JPanel jP_Simulation;
    private javax.swing.JPanel jP_Simulation_File_Name;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JPanel jP_Stop_Condition;
    private javax.swing.JPanel jP_Stopmutex;
    private javax.swing.JPanel jP_mode;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jSP_Table_Rare;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jTB_90;
    private javax.swing.JToggleButton jTB_95;
    private javax.swing.JToggleButton jTB_99;
    private javax.swing.JToggleButton jTB_Event;
    private javax.swing.JToggleButton jTB_State;
    private javax.swing.JToggleButton jTB_Transitions;
    private javax.swing.JToggleButton jTB_animation;
    private javax.swing.JToggleButton jTB_continuous_simul;
    private javax.swing.JToggleButton jTB_step_simul;
    private javax.swing.JToggleButton jTB_timebeesteps;
    private javax.swing.JToggleButton jTB_timescale;
    private javax.swing.JTextField jTF_Delay;
    private javax.swing.JTextField jTF_Event_Number_of_Triggers;
    private javax.swing.JTextField jTF_Runs;
    private javax.swing.JTextField jTF_Simulation_File_Name;
    private javax.swing.JTextField jTF_State_Value1;
    private javax.swing.JTextField jTF_State_Value2;
    private javax.swing.JTextField jTF_Step;
    private javax.swing.JTextField jTF_Time;
    private javax.swing.JTextField jTF_Transitions;
    private javax.swing.JTextField jTF_ani_Time_Scale;
    private javax.swing.JTextField jTF_ani_timebeesteps;
    private javax.swing.JTabbedPane jTP_Simulation_Option;
    private javax.swing.JTable jT_Rare_event;
    // End of variables declaration//GEN-END:variables
  private T2status status;
  private boolean combos_initialized;
  private String simul_output_file;
  public  String rewopt;
  public  String rewfiles;
  private String confidenceopt;
  public  T2modelenv modelenv;
  
  public  T2intsimulation intsimulation;
  
  private ExampleFileFilterEx objFilter;
  private String[] extensions = {".trace"};

  private T2reward_data reward_data;

  private T2plot plot;
  private T2simulation_options simulation_options = null;
  
  static final int STEP_SIMUL_MODE = 1;
  static final int CONTINUOUS_SIMUL_MODE = 2;
  static final int ANIMATION_SIMUL_MODE = 3;

// End of variables declaration
  myCombo  jCB_Event;
  myCombo  jCB_State_Var;
}
