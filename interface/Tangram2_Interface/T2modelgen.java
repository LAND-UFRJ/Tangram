/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

import javax.swing.JTable;
import java.io.*;

public class T2modelgen extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2modelgen(T2modelenv mainholder) {
    modelenv=mainholder;
    initComponents ();
    initComponentsManual ();
    pack ();
  }

//  private static T2modelgen instance = new T2modelgen();
//  static public T2modelgen getInstance()
//  {
//    return instance;
//  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jP_State_Space_Gen = new javax.swing.JPanel();
        jL_Max_Number_of_States = new javax.swing.JLabel();
        jTF_Max_Number_of_States = new javax.swing.JTextField();
        jSP_Max_Values = new javax.swing.JScrollPane();
        jP_Line = new javax.swing.JPanel();
        jL_Max_Values = new javax.swing.JLabel();
        jP_Reward = new javax.swing.JPanel();
        jP_Reward_Option = new javax.swing.JPanel();
        jTB_Mean = new javax.swing.JToggleButton();
        jTB_Min = new javax.swing.JToggleButton();
        jTB_Max = new javax.swing.JToggleButton();
        jTB_Error = new javax.swing.JToggleButton();
        jL_Obs_1 = new javax.swing.JLabel();
        jL_Obs_2 = new javax.swing.JLabel();
        jL_Obs_3 = new javax.swing.JLabel();
        jP_Line2 = new javax.swing.JPanel();
        jL_Reward = new javax.swing.JLabel();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir = new javax.swing.JLabel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jB_Extract_model_info = new javax.swing.JButton();
        jB_Generate = new javax.swing.JButton();
        jB_Close = new javax.swing.JButton();
        jL_Picture = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [State Space Generation]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jP_State_Space_Gen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_State_Space_Gen.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Max_Number_of_States.setText("Max Number of States");
        jL_Max_Number_of_States.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_State_Space_Gen.add(jL_Max_Number_of_States, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 15, -1, -1));

        jTF_Max_Number_of_States.setToolTipText("Upper bound on the number of states to be generated");
        jTF_Max_Number_of_States.setText("0");
        jTF_Max_Number_of_States.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jP_State_Space_Gen.add(jTF_Max_Number_of_States, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 12, 190, 20));

        jP_State_Space_Gen.add(jSP_Max_Values, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 370, 215));

        jP_Line.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_State_Space_Gen.add(jP_Line, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 390, 1));

        jL_Max_Values.setText("Max Value for the State Variables");
        jL_Max_Values.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_State_Space_Gen.add(jL_Max_Values, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jP_Reward.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Reward_Option.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_Mean.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Mean.setText("Mean");
        jP_Reward_Option.add(jTB_Mean, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 20));

        jTB_Min.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Min.setText("Min");
        jP_Reward_Option.add(jTB_Min, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 80, 20));

        jTB_Max.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Max.setText("Max");
        jP_Reward_Option.add(jTB_Max, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 80, 20));

        jTB_Error.setSelected(true);
        jTB_Error.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Error.setText("Error");
        jP_Reward_Option.add(jTB_Error, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 80, 20));

        jP_Reward.add(jP_Reward_Option, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jL_Obs_1.setText("  Used when more than");
        jL_Obs_1.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Reward.add(jL_Obs_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 3, -1, -1));

        jL_Obs_2.setText("one reward is assigned");
        jL_Obs_2.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Reward.add(jL_Obs_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 16, -1, -1));

        jL_Obs_3.setText("to the same value.");
        jL_Obs_3.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Reward.add(jL_Obs_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 29, -1, -1));

        jP_State_Space_Gen.add(jP_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 325, 340, 50));

        jP_Line2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_State_Space_Gen.add(jP_Line2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 295, 390, 1));

        jL_Reward.setText("Reward Option");
        jL_Reward.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_State_Space_Gen.add(jL_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 305, -1, -1));

        getContentPane().add(jP_State_Space_Gen, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 390, 380));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Status_Bar_Dir.setText("Directory:");
        jL_Status_Bar_Dir.setForeground(java.awt.Color.black);
        jL_Status_Bar_Dir.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Dir, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        jL_Status_Bar_Dir_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 4, 260, -1));

        jL_Status_Bar_Model.setText("Model:");
        jL_Status_Bar_Model.setForeground(java.awt.Color.black);
        jL_Status_Bar_Model.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, -1));

        jL_Status_Bar_Model_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 4, 120, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 395, 515, 20));

        jB_Extract_model_info.setToolTipText("Extract textual model description from object(s)");
        jB_Extract_model_info.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Extract_model_info.setLabel("Extract");
        jB_Extract_model_info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Extract_model_infoActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Extract_model_info, new org.netbeans.lib.awtextra.AbsoluteConstraints(405, 10, 110, 30));

        jB_Generate.setToolTipText("Parse the model and generate chain");
        jB_Generate.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Generate.setText("Generate");
        jB_Generate.setEnabled(false);
        jB_Generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_GenerateActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Generate, new org.netbeans.lib.awtextra.AbsoluteConstraints(405, 50, 110, 30));

        jB_Close.setToolTipText("Close this window");
        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setText("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(405, 90, 110, 30));

        jL_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_modelgen.gif")));
        getContentPane().add(jL_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 350, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 420, 1, 1));

    }//GEN-END:initComponents

//************************************** Save info table ***********************************************
  private void jT_Max_ValuesFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jT_Max_ValuesFocusLost
    jT_Max_Values.editingStopped(null);
  }//GEN-LAST:event_jT_Max_ValuesFocusLost

  
//*********************************** initComponents Manual *********************************************
  private void initComponentsManual () {
    // Updates the window.
    jTF_Max_Number_of_States.setText( "0" );

    //set Status Bar
    jL_Status_Bar_Model_name.setText(modelenv.curmodel);
    jL_Status_Bar_Dir_name.setText(T2functions.status_directory(modelenv.curdir));

    javax.swing.ButtonGroup group1 = new javax.swing.ButtonGroup();
    group1.add(jTB_Mean);
    group1.add(jTB_Max);
    group1.add(jTB_Min);
    group1.add(jTB_Error);

  }
  
  //************************************* Generate Button *************************************************
  private void jB_GenerateActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_GenerateActionPerformed
    String last_msg = "";

    jT_Max_Values.editingStopped(null);
    
    if (jTF_Max_Number_of_States.getText().trim().compareTo("") == 0) {
      javax.swing.JOptionPane.showMessageDialog(this,"Max number of states of entire chain not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    if (T2functions.Is_not_number(jTF_Max_Number_of_States.getText(),0,this,"Max number of states") != 0) return;

    //try to write the .max_values file
    try{
      java.io.FileWriter     f = new java.io.FileWriter( modelenv.curmodel + ".maxvalues" );
      java.io.BufferedWriter b = new java.io.BufferedWriter( f );
      int i = 0;
      String dataName, dataValue;
      for (i=0;i<jT_Max_Values.getRowCount();i++) {
          dataName  = (String)jT_Max_Values.getValueAt( i, 0 );
          dataValue = (String)jT_Max_Values.getValueAt( i, 1 );
          if( dataName == null )
              break;
          if( dataName.trim().length() > 0 ) {
            b.write( dataName.trim() + "    " );
            if( (dataValue != null) && (dataValue.trim().length() > 0) ){
              if (T2functions.Is_not_number(dataValue,0,this,"Max value") != 0) {
                b.close();
                f.close();
                return;
              }
              b.write( dataValue.trim() + "\n" );
            }
            else {
              javax.swing.JOptionPane.showMessageDialog(this,"You must specify the max value for "+ dataName,"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
              b.close();
              f.close();
              return;
            }
          }
      } 
      b.close();
      f.close();
    }
    catch( java.io.IOException e ) {
      javax.swing.JOptionPane.showMessageDialog(this,"Couldn't write the .maxvalues file","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    //call gramatica
    try {
      //call gramatica and redirect the stdout and stderr to the correct device
      Proc = Runtime.getRuntime().exec( "gramatica -G " + modelenv.curmodel + ".parser "+ modelenv.curmodel + " " + modelenv.debuglevel );
      new threadCapOut( Proc.getInputStream(),(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Parsing model...: " ).start();
      new threadCapOut( Proc.getErrorStream(),(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Parsing model...: " ).start();

      Proc.waitFor();

    }
    catch( Exception ex ) {
      javax.swing.JOptionPane.showMessageDialog(this,"gramatica could not be executed - Can't create Mathematical Model","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    //Call generate_chain script through T2status.
    //syntax: generate_chain <curmodel> <maxnumberofstates> <debuglevel> <rewardoption>

    if (Proc.exitValue() == 0) {

      //defines the reward option
      rewopt=" 1";
      if (jTB_Max.isSelected()) rewopt = " 2";
      else if (jTB_Min.isSelected()) rewopt = " 3";
      else if (jTB_Error.isSelected()) rewopt = " 4";

      /* Old interface used to call T2status */
//      String parameter = new String(modelenv.curmodel + " " +  jTF_Max_Number_of_States.getText() + " " + modelenv.debuglevel + " " + rewopt);
//      this.setEnabled(false);

      //call the T2status class that will execute the generate_chain (the last 2 param are the stdout and stderr)
//      status = new T2status(this, "Math Model Generation Status", "Math Model is being generated.",
//              "generate_chain " + parameter ,0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) );
//      status.show();
//      status.start();

      /* New interface calls T2progressDialog */
      java.util.Vector commands_vector = new java.util.Vector( );

//      commands_vector.add( new T2command( "echo make -f "+T2modelenv.tangrampath+"/lib/Makefile.mark_find TANGRAM2_HOME="+T2modelenv.tangrampath+" BASE=" + modelenv.curmodel, "/dev/stdout", "/dev/stderr" ) );
      commands_vector.add( new T2command( "make -f "+T2modelenv.tangrampath+"/lib/Makefile.mark_find TANGRAM2_HOME="+T2modelenv.tangrampath+" BASE=" + modelenv.curmodel, "/dev/stdout", "/dev/stderr" ) );
//      commands_vector.add( new T2command( "echo ./mark_find -G -m " + jTF_Max_Number_of_States.getText() + " -f " + modelenv.curmodel + " -d " + modelenv.debuglevel + " -w " + rewopt, "/dev/stdout", "/dev/stderr" ) );
      commands_vector.add( new T2command( "./mark_find -G -m " + jTF_Max_Number_of_States.getText() + " -f " + modelenv.curmodel + " -d " + modelenv.debuglevel + " -w " + rewopt, "/dev/stdout", "/dev/stderr" ) );

      String [] pars_array = new String[3];
      pars_array[0] = "bash";
      pars_array[1] = "-c";
      pars_array[2] = "\\rm -f mark_find";
      commands_vector.add( new T2command( pars_array, "/dev/stdout", "/dev/stderr" ) );

      pars_array = new String[3];
      pars_array[0] = "bash";
      pars_array[1] = "-c";
      pars_array[2] = "\\rm -f " + modelenv.curmodel + ".user_code.o";
      commands_vector.add( new T2command( pars_array, "/dev/stdout", "/dev/stderr" ) );

       T2progressDialog.showDialog( this, "Math Model Generation Status", "Math Model is being generated.",
             commands_vector, false, false );
    }
    else {
      javax.swing.JOptionPane.showMessageDialog(this,"Error while generating the math model.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_jB_GenerateActionPerformed

  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed
    //update the figs and buttons!
    modelenv.update_states();
    //destroy the process and dispose the status if necessary!
    if (status != null) {
      status.Proc.destroy();
      status.dispose();
    }
    modelenv.setEnabled(true);
    dispose();
  }//GEN-LAST:event_jB_CloseActionPerformed

  private void jB_Extract_model_infoActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Extract_model_infoActionPerformed
    int col = 0;
    String line;
    Process tgif;
    
    java.util.Vector states_vector = new java.util.Vector();
    java.util.Vector maxvalues_lines = new java.util.Vector();
    
    if (jT_Max_Values != null )
        jT_Max_Values.editingStopped(null);      


      File testParserFile = new File(modelenv.curmodel + ".parser");

      /* Delete existing .parser file */
      if( testParserFile.exists() )
      {
        if( !testParserFile.canWrite() )
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Can't create "+modelenv.curmodel + ".parser file: Permission denied. \n Check file or directory permissions", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);    
            return;
        } 
        testParserFile.delete();
      }
      else
      {
        try {
        testParserFile.createNewFile();
        testParserFile.delete();
        }
        catch( Exception e ){
          javax.swing.JOptionPane.showMessageDialog(this,"Can't create "+modelenv.curmodel + ".parser file: Permission denied. \n Check directory permissions", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);    
          return;
        }

      } 

    try {
    

      //Runtime.getRuntime().exec( new String[] { "bash","-c","rm -f " + modelenv.curmodel + ".parser" } );    

      tgif = Runtime.getRuntime().exec( new String[] { "bash","-c","tgif " + T2main_app.tgif_flags + " -print -exec - " + modelenv.curmodel } );
      java.io.PrintWriter out = new java.io.PrintWriter( tgif.getOutputStream() );
      String parameter = new String(modelenv.debuglevel + ";0;" + (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
      out.println( "call_one_arg_shortcut(Tangram2GenerateChain,\"" + parameter + "\")" );
      out.flush();
      out.println( "set_file_not_modified()" );
      out.println( "call_simple_shortcut(Quit)" );
      out.flush();
      Thread.sleep( 1 );
      out.flush();
      out.close();
      tgif.waitFor();
      
      /* Check if new .parser was created*/
      File parserFile = new File(modelenv.curmodel + ".parser");
      if( !parserFile.exists() )
      {
          
        javax.swing.JOptionPane.showMessageDialog(this,"No parser file was created ("+ modelenv.curmodel + ".parser). \n Possible cause: wrong tgif version. Check the INSTALL file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }    
          
      //Runtime.getRuntime().exec( new String[] { "bash","-c","if [ -f  " + modelenv.curmodel + ".parser ]; then echo 0; fi;" } );    
    }
    catch( Exception e ) {
      javax.swing.JOptionPane.showMessageDialog(this,"Error waiting for tgif - Can't create Mathematical Model","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    // Generate file with the state variables names
    // usage: getName -v <modelname> 

    try {
      Proc = Runtime.getRuntime().exec( "getNames -v " + modelenv.curmodel);
      Proc.waitFor();
      if(Proc.exitValue() != 0) {
        javax.swing.JOptionPane.showMessageDialog(this,"Error: "+modelenv.curmodel + ".state_variables not created (getNames)","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }
    }
    catch( Exception ex ) {
      javax.swing.JOptionPane.showMessageDialog(this,"getNames could not be executed","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }
            
    // Read information from <MODELNAME>.state_variable and get the variables' names
    try {
      java.io.FileReader f = new java.io.FileReader( modelenv.curmodel + ".state_variable" );
      java.io.BufferedReader b = new java.io.BufferedReader( f );
      while( (line = b.readLine()) != null ){
        if( line.trim().length() > 0 ){                                            
          states_vector.add(line.trim());
        }
      }
      b.close();
      f.close();
    }
    catch( java.io.IOException e ) {
      javax.swing.JOptionPane.showMessageDialog(this,"Couldn't read information from " + modelenv.curmodel + ".state_variable.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    // Read <modelname>.maxvalues into lines vector...    
    try {
      int n;
      java.io.FileReader f = new java.io.FileReader( modelenv.curmodel + ".maxvalues" );
      java.io.BufferedReader b = new java.io.BufferedReader( f );
      while( (line = b.readLine()) != null ) {
        maxvalues_lines.add(line.trim());
      }
      b.close();
      f.close();
    }
    catch( java.io.IOException e ) {
    }

    if (states_vector.size() == 0)
    {
      javax.swing.JOptionPane.showMessageDialog(this,"Invalid model. You must define at least one state variable.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      //Disable the generate button
      jB_Generate.setEnabled(false);
      return;
    }
    else
    {
      //Enable the generate button
      jB_Generate.setEnabled(true);
    }
    
    boolean OK = true;

    /*
       maxvalue_lines stores the lines in the .maxvalues file.
       states_vector stores the lines which will fill the table.
    */
    
    //  Compare sizes.
    if(states_vector.size() != maxvalues_lines.size())
    {
       OK = false;
    }

    // Compare variable names.
    
    else 
    {
        for(int i = 0; (i < states_vector.size()) && OK; i++) {
          if( ((String)maxvalues_lines.get(i)).indexOf( ((String)states_vector.elementAt(i)).trim()) != 0)
            OK = false;
        }
    }   
    
    // If everything is ok, put the values on the table.
    
    Object[][] tableContents = new Object[states_vector.size()][2];    
    
    for(int i = 0; i < states_vector.size(); i++)
    { 
        tableContents[i][0] = states_vector.elementAt(i);
        tableContents[i][1] = null;           
    }    
    
        
    if (OK)
    {
        for(int i = 0; i < states_vector.size(); i++)
        {
            int index = ((String)maxvalues_lines.get(i)).indexOf(" ");
            String maxvalue = null;
            
                        
            if (index!=-1)
            {
                tableContents[i][1] = ((String)maxvalues_lines.get(i)).substring(index).trim();       
                
            } else {
                tableContents[i][1] = "0";           
            }
        } 
    }
    

        // --------- Creating the table dinamically --------- 
          
        jT_Max_Values = new javax.swing.JTable(states_vector.size(),2);
            jT_Max_Values.setModel(
               new javax.swing.table.DefaultTableModel(
                  tableContents,
                  new String [] {"Variable Names", "Max Values"}
               )
               {
                  Class[] types = new Class [] 
                  {
                     java.lang.String.class, java.lang.String.class
                  };

                  boolean[] canEdit = new boolean [] {
                     false, true
                  };
                  
                  public Class getColumnClass(int columnIndex) {
                     return types [columnIndex];
                  }
                  
                  public boolean isCellEditable(int rowIndex, int columnIndex) {
                     return canEdit [columnIndex];
                  }
               }
            );
            
        jT_Max_Values.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    jT_Max_ValuesFocusLost(evt);
                }
            });
            
        jT_Max_Values.setEnabled(true);
        
        jSP_Max_Values.setViewportView(jT_Max_Values);    

  }//GEN-LAST:event_jB_Extract_model_infoActionPerformed

  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CloseActionPerformed(null);
  }//GEN-LAST:event_exitForm

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton jTB_Error;
    private javax.swing.JLabel jL_Max_Values;
    private javax.swing.JPanel jP_State_Space_Gen;
    private javax.swing.JScrollPane jSP_Max_Values;
    private javax.swing.JLabel jL_Obs_3;
    private javax.swing.JLabel jL_Reward;
    private javax.swing.JLabel jL_Obs_2;
    private javax.swing.JLabel jL_Obs_1;
    private javax.swing.JPanel jP_Reward;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JPanel jP_Line;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JLabel jL_Picture;
    private javax.swing.JLabel jL_Status_Bar_Model;
    private javax.swing.JButton jB_Generate;
    private javax.swing.JPanel jP_Reward_Option;
    private javax.swing.JTextField jTF_Max_Number_of_States;
    private javax.swing.JPanel jP_Line2;
    private javax.swing.JLabel jL_Status_Bar_Dir;
    private javax.swing.JToggleButton jTB_Max;
    private javax.swing.JButton jB_Extract_model_info;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jL_Max_Number_of_States;
    private javax.swing.JToggleButton jTB_Mean;
    private javax.swing.JButton jB_Close;
    private javax.swing.JToggleButton jTB_Min;
    // End of variables declaration//GEN-END:variables
  private Process Proc;
  private T2status status;
  private String rewopt;

  public  T2modelenv modelenv;
  public  JTable jT_Max_Values = null;
// End of variables declaration

}
