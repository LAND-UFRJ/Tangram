/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2status extends javax.swing.JFrame implements java.lang.Runnable {

  /** Initializes the Form */

  // original constructor
  public T2status(javax.swing.JFrame holder, String title, String msgtop, String cmd, float maxtime, String output_std, String output_err ) {
    this( holder, null, title, msgtop, cmd, maxtime, false, false, false, "", output_std, output_err, "", "" );
  }

  // supports vector of commands
  public T2status(javax.swing.JFrame holder, String title, String msgtop, String[] cmdvect, float maxtime, String output_std, String output_err ) {
    this( holder, null,title, msgtop, cmdvect[0], maxtime, false, false, false, "", output_std, output_err, "", "" );
    vector  = true;
    CmdVector = cmdvect;
  }

  //constructor with a boolean that determine the dispose of the window in the end.
  //IMPORTANT: in this case the cancel button will be disable!
  // true - dispose window   false - normal operation
  public T2status(javax.swing.JFrame holder, String title, String msgtop, String cmd, float maxtime, boolean closewin, String output_std, String output_err) {
    this( holder, null,title, msgtop, cmd, maxtime, closewin, false, false, "", output_std ,output_err, "", "" );
  }

  //constructor with a boolean to indicate the requirement of the execution of make (to generate mark_find).
  // true - generate mark_find  false - normal operation
  public T2status(javax.swing.JFrame holder, String title, String msgtop, String cmd, float maxtime, boolean closewin, boolean make, String modelname, String output_std, String output_err, String msgbegin, String msgend ) {
    this( holder, null,title, msgtop, cmd, maxtime, closewin, make, false, modelname, output_std ,output_err, msgbegin, msgend );
  }

  //constructor with a boolean to indicate if this class should set the parent variable make_error.
  // true -set the parent make_error  false - do nothing.
  public T2status(javax.swing.JFrame holder, T2intsimulation intsi, String title, String msgtop, String cmd, float maxtime, boolean closewin, boolean make, boolean make_err, String modelname, String output_std, String output_err, String msgbegin, String msgend) {
    Holder = holder;
    if (intsi != null) Intsi = intsi;
    Closewin = closewin;
    Make = make;
    Cmd = cmd;
    Curmodel = modelname;
    //Output_err used to redirect stderr
    Output_err = output_err;
    //Output_std used to redirect stdout
    Output_std = output_std;
    Msgbegin = msgbegin;
    Msgend   = msgend;
    MaxTime  = maxtime;
    Make_err = make_err;
    initComponents ();
    initComponentsManual (title, msgtop);
    pack ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        timer1 = new org.netbeans.examples.lib.timerbean.Timer();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabelMsgtop = new javax.swing.JLabel();
        jLabelMsg = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        timer1.addTimerListener(new org.netbeans.examples.lib.timerbean.TimerListener() {
            public void onTime(java.awt.event.ActionEvent evt) {
                timer1OnTime(evt);
            }
        });

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButtonOk.setFont(new java.awt.Font("Dialog", 1, 10));
        jButtonOk.setText("Ok");
        jButtonOk.setEnabled(false);
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonOk, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 80, 22));

        jButtonCancel.setFont(new java.awt.Font("Dialog", 1, 10));
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        getContentPane().add(jButtonCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 80, 22));

        getContentPane().add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 280, 16));

        jLabelMsgtop.setFont(new java.awt.Font("Dialog", 1, 10));
        getContentPane().add(jLabelMsgtop, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 280, 16));

        jLabelMsg.setFont(new java.awt.Font("Dialog", 1, 10));
        getContentPane().add(jLabelMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 55, 280, 16));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 107, 1, 1));

    }//GEN-END:initComponents

  //initComponent Manually
  private void initComponentsManual(String title , String msgtop ) {
    TimeElapsed = 0;
    waitTerminationOfThread = false;
    setTitle( title );
    jLabelMsgtop.setText(msgtop);
    Canceled = false;
  }

  public Process start() {

    Proc = null;
    jButtonOk.setEnabled( false );
    if( Closewin )
        jButtonCancel.setEnabled( false );
    else
       jButtonCancel.setEnabled( true );

    // starts the timer
    if ( MaxTime > 0 )
      delta = ( (new Float(MaxTime)).intValue() * 1000/50 );
    else
      delta = 500;
    timer1.setDelay( delta );

    String cmdline = new String();
    //starts the process
    try {
      if (Make) {
        cmdline = "make -f "+Tangram2.T2modelenv.tangrampath+"/lib/Makefile.mark_find BASE=" + Curmodel;
        TmpProc = Runtime.getRuntime().exec(new String[] { "bash" , "-c" , "echo Compiling Model... >> " + Output_err} );
        //exec Cmd and capture the stdout and stderr
        Proc = Runtime.getRuntime().exec( cmdline );
        new threadCapOut( Proc.getInputStream(), Output_err ).start();
        new threadCapOut( Proc.getErrorStream(), Output_err ).start();
      }
      else {
        cmdline = Cmd;
        //exec Cmd and capture the stdout and stderr
        if( !vector )
        {

          Proc = Runtime.getRuntime().exec( cmdline );
        }
        else
        {

          Proc = ( Runtime.getRuntime() ).exec( CmdVector );
        }
        new threadCapOut( Proc.getInputStream(), Output_std ).start();
        new threadCapOut( Proc.getErrorStream(), Output_err ).start();
      }


      newThread = new Thread( this );

      // newThread.setContextClassLoader( new  Thread(this).getContextClassLoader()  );

      newThread.start();


      /*
        new Thread(this).start();

        Allocates a new thread object.

        The run() method of this class (T2status) will be called, as start() causes the thread to begin execution.

        The result is that the two threads will now run concurrently: the current thread, that continues bellow,
        and the other thread, which executes its run method.

       */


      if ( waitTerminationOfThread )
      {

        /*

        notify();

        try {
          Proc.waitFor();
        } catch ( java.lang.InterruptedException e) {
          System.out.println("Error while waiting for T2status process execution");
        }


        try {

          newThread.join();

        } catch ( java.lang.InterruptedException e) {

          System.out.println("join failed");

        }


        while (newThread.isAlive())
        {
          System.out.println(" ");
        }
        */

      }

    }
    catch( java.io.IOException ex ) {
      jLabelMsg.setText( "Could not start process" );
    }

    // Proc.waitFor();


    return( Proc );
  }

  private void timer1OnTime (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timer1OnTime

    jLabelMsg.setText( "Running... Real Time Elapsed: " + (++TimeElapsed)*delta/1000 + "secs" );
    if ( MaxTime > 0 )
      jProgressBar1.setValue( jProgressBar1.getValue() + 2 );
    else {
      if( jProgressBar1.getValue() < jProgressBar1.getMaximum() )
        jProgressBar1.setValue( jProgressBar1.getValue() + 10 );
      else
        jProgressBar1.setValue(0);
    }

    gr = getGraphics();
    update(gr);


  }//GEN-LAST:event_timer1OnTime

  private void jButtonOkActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed

    /* jButtonCancelActionPerformed(null); */


    Canceled = true;
    if ( Proc != null )     Proc.destroy();
    if ( TmpProc != null )  TmpProc.destroy();
    if ( Tmp2Proc != null ) Tmp2Proc.destroy();

    Holder.enable();
    dispose();
  }//GEN-LAST:event_jButtonOkActionPerformed

  private void jButtonCancelActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed

    Canceled = true;

    if ( Proc != null )     Proc.destroy();
    if ( TmpProc != null )  TmpProc.destroy();
    if ( Tmp2Proc != null ) Tmp2Proc.destroy();

    /* if ( newThread != null ) newThread.stop(); */

    javax.swing.JOptionPane.showMessageDialog(this,"The program is still running.  Please kill it before continuing.","Canceled",javax.swing.JOptionPane.WARNING_MESSAGE);

  }//GEN-LAST:event_jButtonCancelActionPerformed

  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jButtonOkActionPerformed(null);
  }//GEN-LAST:event_exitForm

  public void run() {
    try {


      Proc.waitFor();
      if ( Make && !Canceled) {
        if ( Proc.exitValue()==0 ) {
          //message
          if ( Msgbegin.trim() != "" )
            TmpProc = Runtime.getRuntime().exec(new String[] { "bash" , "-c" , "echo " + Msgbegin + " >> " + Output_err} );

          //exec Cmd and capture the stdout and stderr
          Proc = Runtime.getRuntime().exec( Cmd );
          new threadCapOut( Proc.getInputStream(), Output_std ).start();
          new threadCapOut( Proc.getErrorStream(), Output_err ).start();

          Proc.waitFor();

          //message printed in standart output
          if (!Canceled)
            if ( Msgend.trim() != "" )
              Tmp2Proc = Runtime.getRuntime().exec(new String[] { "bash" , "-c" , "echo " + Msgend + " >> " + Output_err} );

          //set the parent variable make_error
          if (Make_err)
            Intsi.make_error = 0;
        }
        else {
          javax.swing.JOptionPane.showMessageDialog(this,"Error - Make failed. There are errors in your model.","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          jButtonOkActionPerformed(null);
          //set the parent variable make_error
          if(Make_err)
            Intsi.make_error = Proc.exitValue();
        }
      }

      timer1.stop();

      if (!Canceled)
        T2functions.Print_Error_Message(Proc.exitValue(),this);

      //dispose the window - used when this class received the arg closewin (second constructor)
      if (Closewin) dispose();

      jButtonOk.setEnabled( true );
      jButtonCancel.setEnabled( false );
      jProgressBar1.setValue( jProgressBar1.getMaximum() );
      if ( MaxTime != 0)
        jLabelMsg.setText( "Finished.      Real time: "+ MaxTime + "secs");
      else
        jLabelMsg.setText( "Finished.      Real time: "+ (TimeElapsed)*delta/1000 + "secs");
    }
    catch( Exception e){
    }

//    System.out.println("finished run method" );
  }

  Process getProcess( )
  {
      return Proc;
  }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private org.netbeans.examples.lib.timerbean.Timer timer1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jLabelMsg;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabelMsgtop;
    private javax.swing.JButton jButtonOk;
    // End of variables declaration//GEN-END:variables
  private float MaxTime;
  private int TimeElapsed;
  private int delta;
  private String Cmd;
  private String[] CmdVector;
  private String Curmodel;
  private String Output_err;
  private String Output_std;
  private String Msgbegin;
  private String Msgend;
  private boolean Closewin;
  private boolean Make;
  private boolean vector;
  private boolean Canceled;
  private boolean Make_err;
  private javax.swing.JFrame Holder;
  private T2intsimulation Intsi;
  public  Process Proc;
  public  Process TmpProc;
  public  Process Tmp2Proc;
  public  boolean waitTerminationOfThread;
  private Thread newThread;
  private java.awt.Graphics gr;

// End of variables declaration

}
