/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2modelenv extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2modelenv() {
    initComponents ();
    initComponentsManual ();
    holder = null;
    pack ();
  }

  public T2modelenv(java.lang.String s) {

    initComponents ();
    initComponentsManual ();

    jButtonExitApp.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          jB_CloseAndExitActionPerformed (evt);
        }
      }
    );

    holder = s;

    pack();

  }



  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTB_file = new javax.swing.JToolBar();
        jButtonNew = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonViewFiles = new javax.swing.JButton();
        jButtonImport = new javax.swing.JButton();
        jButtonHelp = new javax.swing.JButton();
        jButtonExitApp = new javax.swing.JButton();
        jTB_tools = new javax.swing.JToolBar();
        jB_tgif = new javax.swing.JButton();
        jB_Model_Generation = new javax.swing.JButton();
        jB_Analytical_Methods = new javax.swing.JButton();
        jB_Measures_of_Interest = new javax.swing.JButton();
        jB_Traffic_Modeling = new javax.swing.JButton();
        jB_Batch_Simulation = new javax.swing.JButton();
        jB_hmm = new javax.swing.JButton();
        jP_model = new javax.swing.JPanel();
        jL_model = new javax.swing.JLabel();
        jL_mathematical_model = new javax.swing.JLabel();
        jL_analytical_resolution = new javax.swing.JLabel();
        jL_measure_of_interest = new javax.swing.JLabel();
        jL_traffic_modeling = new javax.swing.JLabel();
        jL_batch_simulation = new javax.swing.JLabel();
        jL_hmm = new javax.swing.JLabel();
        jL_interactive_simulation = new javax.swing.JLabel();
        jL_Tangram_Picture = new javax.swing.JLabel();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir = new javax.swing.JLabel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jMB_Menu = new javax.swing.JMenuBar();
        jM_File = new javax.swing.JMenu();
        jMI_New = new javax.swing.JMenuItem();
        jMI_Open = new javax.swing.JMenuItem();
        jMI_Close = new javax.swing.JMenuItem();
        jMI_Import = new javax.swing.JMenuItem();
        jMI_ViewFiles = new javax.swing.JMenuItem();
        jMI_Delete = new javax.swing.JMenuItem();
        jMI_Exit = new javax.swing.JMenuItem();
        jM_Tools = new javax.swing.JMenu();
        jMI_tgif = new javax.swing.JMenuItem();
        jMI_Model_Generation = new javax.swing.JMenuItem();
        jMI_Analytical_Methods = new javax.swing.JMenuItem();
        jMI_Measures_of_Interest = new javax.swing.JMenuItem();
        jMI_Traffic_Modeling = new javax.swing.JMenuItem();
        jMI_Batch_Simulation = new javax.swing.JMenuItem();
        jMI_hmm = new javax.swing.JMenuItem();
        jM_Options = new javax.swing.JMenu();
        jMI_Config = new javax.swing.JMenuItem();
        jM_Help = new javax.swing.JMenu();
        jMI_Help_Manual = new javax.swing.JMenuItem();
        jMI_Help_About = new javax.swing.JMenuItem();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Modeling Environment]");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jTB_file.setFloatable(false);
        jButtonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/new.gif")));
        jButtonNew.setToolTipText("New Model");
        jButtonNew.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonNew.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonNew.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonNew);

        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/open.gif")));
        jButtonOpen.setToolTipText("Open Model");
        jButtonOpen.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonOpen.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonOpen.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonOpen);

        jButtonClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/close.gif")));
        jButtonClose.setToolTipText("Close Model");
        jButtonClose.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonClose.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonClose.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonClose);

        jButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/trash.gif")));
        jButtonDelete.setToolTipText("Delete config specified file(s)");
        jButtonDelete.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonDelete.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonDelete.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonDelete);

        jButtonViewFiles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/see_files.gif")));
        jButtonViewFiles.setToolTipText("Select the file to view");
        jButtonViewFiles.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonViewFiles.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonViewFiles.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonViewFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewFilesActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonViewFiles);

        jButtonImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/import.jpg")));
        jButtonImport.setToolTipText("Import");
        jButtonImport.setBackground(new java.awt.Color(204, 204, 204));
        jButtonImport.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonImport.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonImport.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonImport);

        jButtonHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/help.gif")));
        jButtonHelp.setToolTipText("Help");
        jButtonHelp.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonHelp.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonHelp.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonHelp);

        jButtonExitApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/exit.gif")));
        jButtonExitApp.setToolTipText("Exit");
        jButtonExitApp.setPreferredSize(new java.awt.Dimension(42, 42));
        jButtonExitApp.setMaximumSize(new java.awt.Dimension(42, 42));
        jButtonExitApp.setMinimumSize(new java.awt.Dimension(42, 42));
        jButtonExitApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitAppActionPerformed(evt);
            }
        });

        jTB_file.add(jButtonExitApp);

        getContentPane().add(jTB_file, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 360, 45));

        jTB_tools.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jTB_tools.setFloatable(false);
        jB_tgif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/model.gif")));
        jB_tgif.setToolTipText("Model Specification");
        jB_tgif.setPreferredSize(new java.awt.Dimension(42, 42));
        jB_tgif.setMaximumSize(new java.awt.Dimension(42, 47));
        jB_tgif.setMinimumSize(new java.awt.Dimension(42, 47));
        jB_tgif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_tgifActionPerformed(evt);
            }
        });

        jTB_tools.add(jB_tgif);

        jB_Model_Generation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/generate.gif")));
        jB_Model_Generation.setToolTipText("Mathematical Model Generation");
        jB_Model_Generation.setPreferredSize(new java.awt.Dimension(42, 42));
        jB_Model_Generation.setMaximumSize(new java.awt.Dimension(42, 47));
        jB_Model_Generation.setMinimumSize(new java.awt.Dimension(42, 47));
        jB_Model_Generation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Model_GenerationActionPerformed(evt);
            }
        });

        jTB_tools.add(jB_Model_Generation);

        jB_Analytical_Methods.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/analytical.gif")));
        jB_Analytical_Methods.setToolTipText("Analytical Model Solution");
        jB_Analytical_Methods.setPreferredSize(new java.awt.Dimension(42, 42));
        jB_Analytical_Methods.setMaximumSize(new java.awt.Dimension(42, 47));
        jB_Analytical_Methods.setMinimumSize(new java.awt.Dimension(42, 47));
        jB_Analytical_Methods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Analytical_MethodsActionPerformed(evt);
            }
        });

        jTB_tools.add(jB_Analytical_Methods);

        jB_Measures_of_Interest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/measures.gif")));
        jB_Measures_of_Interest.setToolTipText("Measures of Interest");
        jB_Measures_of_Interest.setPreferredSize(new java.awt.Dimension(42, 42));
        jB_Measures_of_Interest.setMaximumSize(new java.awt.Dimension(42, 47));
        jB_Measures_of_Interest.setMinimumSize(new java.awt.Dimension(42, 47));
        jB_Measures_of_Interest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Measures_of_InterestActionPerformed(evt);
            }
        });

        jTB_tools.add(jB_Measures_of_Interest);

        jB_Traffic_Modeling.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/trafmodel.gif")));
        jB_Traffic_Modeling.setToolTipText("Traffic Modeling");
        jB_Traffic_Modeling.setPreferredSize(new java.awt.Dimension(42, 42));
        jB_Traffic_Modeling.setMaximumSize(new java.awt.Dimension(42, 47));
        jB_Traffic_Modeling.setMinimumSize(new java.awt.Dimension(42, 47));
        jB_Traffic_Modeling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Traffic_ModelingActionPerformed(evt);
            }
        });

        jTB_tools.add(jB_Traffic_Modeling);

        jB_Batch_Simulation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/simulation.gif")));
        jB_Batch_Simulation.setToolTipText("Simulation");
        jB_Batch_Simulation.setPreferredSize(new java.awt.Dimension(42, 42));
        jB_Batch_Simulation.setMaximumSize(new java.awt.Dimension(42, 47));
        jB_Batch_Simulation.setMinimumSize(new java.awt.Dimension(42, 47));
        jB_Batch_Simulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Batch_SimulationActionPerformed(evt);
            }
        });

        jTB_tools.add(jB_Batch_Simulation);

        jB_hmm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/hmm.gif")));
        jB_hmm.setToolTipText("HMM Module");
        jB_hmm.setPreferredSize(new java.awt.Dimension(42, 42));
        jB_hmm.setMaximumSize(new java.awt.Dimension(42, 47));
        jB_hmm.setMinimumSize(new java.awt.Dimension(42, 47));
        jB_hmm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_hmmActionPerformed(evt);
            }
        });

        jTB_tools.add(jB_hmm);

        getContentPane().add(jTB_tools, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 55, 45, -1));

        jP_model.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_model.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_model.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/model_off.jpg")));
        jP_model.add(jL_model, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 15, -1, -1));

        jL_mathematical_model.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/states_off.jpg")));
        jP_model.add(jL_mathematical_model, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 83, -1, -1));

        jL_analytical_resolution.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/analytical_off.jpg")));
        jP_model.add(jL_analytical_resolution, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 151, -1, -1));

        jL_measure_of_interest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/measures_off.jpg")));
        jP_model.add(jL_measure_of_interest, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 219, -1, -1));

        jL_traffic_modeling.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/traffic_modeling_off.jpg")));
        jP_model.add(jL_traffic_modeling, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 15, -1, -1));

        jL_batch_simulation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/batch_simulation_off.jpg")));
        jP_model.add(jL_batch_simulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 83, -1, -1));

        jL_interactive_simulation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/int_simulation_off.jpg")));
        jP_model.add(jL_interactive_simulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(265, 151, -1, -1));

        jL_hmm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/hmm_off.jpg")));
        jP_model.add(jL_hmm, new org.netbeans.lib.awtextra.AbsoluteConstraints(275, 219, -1, -1));

        getContentPane().add(jP_model, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 55, 510, 294));

        jL_Tangram_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_modeling.gif")));
        getContentPane().add(jL_Tangram_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, -1, -1));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Status_Bar_Dir.setText("Directory:");
        jL_Status_Bar_Dir.setForeground(java.awt.Color.black);
        jL_Status_Bar_Dir.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Dir, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        jL_Status_Bar_Dir_name.setText(" ");
        jL_Status_Bar_Dir_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 4, 260, -1));

        jL_Status_Bar_Model.setText("Model:");
        jL_Status_Bar_Model.setForeground(java.awt.Color.black);
        jL_Status_Bar_Model.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, -1));

        jL_Status_Bar_Model_name.setText(" ");
        jL_Status_Bar_Model_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 4, 165, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 355, 560, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 370, 1, 1));

        jMB_Menu.setFont(new java.awt.Font("Dialog", 1, 10));
        jM_File.setText("File");
        jM_File.setFont(new java.awt.Font("Dialog", 1, 10));
        jM_File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jM_FileActionPerformed(evt);
            }
        });

        jMI_New.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_New.setText("New");
        jMI_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jM_File.add(jMI_New);
        jMI_Open.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Open.setText("Open");
        jMI_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jM_File.add(jMI_Open);
        jMI_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Close.setText("Close");
        jMI_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jM_File.add(jMI_Close);
        jMI_Import.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Import.setText("Import");
        jMI_Import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_ImportActionPerformed(evt);
            }
        });

        jM_File.add(jMI_Import);
        jMI_ViewFiles.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_ViewFiles.setLabel("View");
        jMI_ViewFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewFilesActionPerformed(evt);
            }
        });

        jM_File.add(jMI_ViewFiles);
        jMI_Delete.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Delete.setText("Delete");
        jMI_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jM_File.add(jMI_Delete);
        jMI_Exit.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Exit.setText("Exit");
        jMI_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitAppActionPerformed(evt);
            }
        });

        jM_File.add(jMI_Exit);
        jMB_Menu.add(jM_File);
        jM_Tools.setText("Tools");
        jM_Tools.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_tgif.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_tgif.setText("Model Specification");
        jMI_tgif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_tgifActionPerformed(evt);
            }
        });

        jM_Tools.add(jMI_tgif);
        jMI_Model_Generation.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Model_Generation.setText("Mathematical Model Generation");
        jMI_Model_Generation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Model_GenerationActionPerformed(evt);
            }
        });

        jM_Tools.add(jMI_Model_Generation);
        jMI_Analytical_Methods.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Analytical_Methods.setText("Analytical Model Solution");
        jMI_Analytical_Methods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Analytical_MethodsActionPerformed(evt);
            }
        });

        jM_Tools.add(jMI_Analytical_Methods);
        jMI_Measures_of_Interest.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Measures_of_Interest.setText("Measures of Interest");
        jMI_Measures_of_Interest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Measures_of_InterestActionPerformed(evt);
            }
        });

        jM_Tools.add(jMI_Measures_of_Interest);
        jMI_Traffic_Modeling.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Traffic_Modeling.setText("Traffic Modeling");
        jMI_Traffic_Modeling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Traffic_ModelingActionPerformed(evt);
            }
        });

        jM_Tools.add(jMI_Traffic_Modeling);
        jMI_Batch_Simulation.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Batch_Simulation.setText("Simulation");
        jMI_Batch_Simulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Batch_SimulationActionPerformed(evt);
            }
        });

        jM_Tools.add(jMI_Batch_Simulation);
        jMI_hmm.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_hmm.setText("HMM Module");
        jMI_hmm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_hmmActionPerformed(evt);
            }
        });

        jM_Tools.add(jMI_hmm);
        jMB_Menu.add(jM_Tools);
        jM_Options.setText("Options");
        jM_Options.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Config.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Config.setText("Config");
        jMI_Config.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_ConfigActionPerformed(evt);
            }
        });

        jM_Options.add(jMI_Config);
        jMB_Menu.add(jM_Options);
        jM_Help.setText("Help");
        jM_Help.setFont(new java.awt.Font("Dialog", 1, 10));
        jM_Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jM_HelpActionPerformed(evt);
            }
        });

        jMI_Help_Manual.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Help_Manual.setText("Manual");
        jMI_Help_Manual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_Help_ManualActionPerformed(evt);
            }
        });

        jM_Help.add(jMI_Help_Manual);
        jMI_Help_About.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Help_About.setText("About");
        jMI_Help_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_Help_AboutActionPerformed(evt);
            }
        });

        jM_Help.add(jMI_Help_About);
        jMB_Menu.add(jM_Help);
        setJMenuBar(jMB_Menu);

    }//GEN-END:initComponents

    private void jM_HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jM_HelpActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jM_HelpActionPerformed

    private void jMI_ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_ImportActionPerformed
    
    ExampleFileFilter importObjFilter;
    javax.swing.JFileChooser fchooser_import;
    String fileName_import;
    Process proc_import;
    
    fchooser_import = new javax.swing.JFileChooser();
    importObjFilter = new ExampleFileFilter("markov_mtx", "Markov Matrix");
    fchooser_import.addChoosableFileFilter(importObjFilter);
    fchooser_import.setFileFilter( importObjFilter );
    fchooser_import.setCurrentDirectory( new java.io.File (System.getProperty("user.dir")));

    int retval = fchooser_import.showDialog(this,"Import");
    
    if ( retval == javax.swing.JFileChooser.APPROVE_OPTION ){

      if ( !fchooser_import.getSelectedFile().exists() ) {
        javax.swing.JOptionPane.showMessageDialog(this,"File doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }
      fileName_import = fchooser_import.getSelectedFile().getPath();
      System.out.println(fileName_import);
      try{
        proc_import = Runtime.getRuntime().exec( "nedit " +  fileName_import);
      }
      catch( Exception e){
        javax.swing.JOptionPane.showMessageDialog(this,"Error creating the process","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
    
      }

    }
        
    }//GEN-LAST:event_jMI_ImportActionPerformed

    private void jM_FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jM_FileActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jM_FileActionPerformed

    private void jButtonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportActionPerformed
    
    ExampleFileFilter importObjFilter;
    javax.swing.JFileChooser fchooser_import;
    Process proc_import;
    
    fchooser_import = new javax.swing.JFileChooser();
    importObjFilter = new ExampleFileFilter("markov_mtx", "Markov Matrix");
    fchooser_import.addChoosableFileFilter(importObjFilter);
    fchooser_import.setFileFilter( importObjFilter );
    fchooser_import.setCurrentDirectory( new java.io.File (System.getProperty("user.dir")));
    //fchooser.setCurrentDirectory( new java.io.File (modelenv.curdir));

    int retval = fchooser_import.showDialog(this,"Import");
    
    if ( retval == javax.swing.JFileChooser.APPROVE_OPTION ){

      if ( !fchooser_import.getSelectedFile().exists() ) {
        javax.swing.JOptionPane.showMessageDialog(this,"File doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }
      filename_import = fchooser_import.getSelectedFile().getName();

      T2output fileDialog = new T2output( true , this );
      this.setEnabled( false );
      fileDialog.show();

      try{
        String trcmdline= "bash -c \"markov_mtx2obj -P " +  filename_import + " "+ uniformization_rate + " 2> " + filename_import_output+ "\"";
        //System.out.println( trcmdline );
        proc_import = Runtime.getRuntime().exec(new String[] { "bash" , "-c" , trcmdline} );
        proc_import.waitFor();
      
        //System.out.println(this.isEnabled());
        if( this.isEnabled() == true )
        {
            proc_import = Runtime.getRuntime().exec(new String[] { "bash" , "-c" , "tgif " + T2main_app.tgif_flags + filename_import_output +"&"} );
        }else
        {
            this.setEnabled( true );
        }
             
        

        
      }
      catch( Exception e){
        javax.swing.JOptionPane.showMessageDialog(this,"Error creating the process","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
    
      }


    }
        
    }//GEN-LAST:event_jButtonImportActionPerformed

  private void formComponentShown (java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    // Add your handling code here:
  }//GEN-LAST:event_formComponentShown


  private void jButtonViewFilesActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewFilesActionPerformed

    int retval = fchooser_editor.showOpenDialog(this);
    if ( retval == javax.swing.JFileChooser.APPROVE_OPTION ) {
      if ( !fchooser_editor.getSelectedFile().exists() ) {
        javax.swing.JOptionPane.showMessageDialog(this,"File doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }
     try {
       Process proceditor;
       String fileName;

       fileName = fchooser_editor.getSelectedFile().getPath();

       if (fileName.indexOf(".obj",fileName.length()-4)!=-1)
       {
          // System.out.println("tgif " + T2main_app.tgif_flags +  fileName);
          proceditor = Runtime.getRuntime().exec( "tgif " + T2main_app.tgif_flags +  fileName);
       }
       else if (fileName.indexOf(".ps",fileName.length()-3)!=-1)
       {
          // System.out.println(curpsviewer +  fileName);
          proceditor = Runtime.getRuntime().exec( curpsviewer + " " +  fileName);
       }
       else
       {
          // System.out.println( "xterm -e " + cureditor + " " +  fileName);
          proceditor = Runtime.getRuntime().exec(  "xterm -e " + cureditor + " " +  fileName);
       }

     }catch (Exception E) {};
    }

  }//GEN-LAST:event_jButtonViewFilesActionPerformed


  //initComponent Manual
  private void initComponentsManual() {
    //init code here!

    data1 = new java.util.Vector (); //contains all extensions
//    helpOpened = false;

     //Extensions data vector - new extensions should stay here

    data1.add(".absorb_st");
    data1.add(".autocorrelation");
    data1.add(".autocovariance");
    data1.add(".chns_betw_embed_pnts");
    data1.add(".config");
    data1.add(".events");
    data1.add(".expected_imp_reward.");
    data1.add(".generator_mtx");
    data1.add(".GNUPlot.");
    data1.add(".idc");
    data1.add(".impulse_reward.");
    data1.add(".IM.");
    data1.add(".init_prob");
    data1.add(".int_direct");
    data1.add(".int_iterative");
    data1.add(".int_rewd");
    data1.add(".int_rewi");
    data1.add(".intervals");
    data1.add(".INTSIMUL");
    data1.add("mark_find");
    data1.add(".maxvalues");
    data1.add(".NM.");
    data1.add(".obj");
    data1.add(".OUT.");
    data1.add(".parameter");
    data1.add(".parser");
    data1.add(".partition");
    data1.add(".ps");
    data1.add(".rewards");
    data1.add(".rate_reward.");
    data1.add(".reward_levels.");
    data1.add(".seq_autocorrelation");
    data1.add(".seq_autocovariance");
    data1.add(".seq_idc");
    data1.add(".seq_stationary_Descriptors");
    data1.add(".SIMUL.");
    data1.add(".SS.");
    data1.add(".states");
    data1.add(".states_det_ev");
    data1.add(".state_variable");
    data1.add(".stationary_Descriptors");
    data1.add(".st_trans_prob_mtx");
    data1.add(".tables_dump");
    data1.add(".threshold");
    data1.add(".trace");
    data1.add(".trans_same_st");
    data1.add(".TS.");
    data1.add(".uniform_rate");
    data1.add(".user_code.c");
    data1.add(".user_code.o");
    data1.add(".vstat");
    data1.add(".HMM.");

    //End of extensions list


    //open model
    fchooser = new javax.swing.JFileChooser();
    objFilter = new ExampleFileFilter("obj", "OBJ Model Files");
    fchooser.addChoosableFileFilter(objFilter);
    fchooser.setFileFilter( objFilter );
    fchooser.setCurrentDirectory( new java.io.File (System.getProperty("user.dir")));

    //view files
    fchooser_editor = new javax.swing.JFileChooser();

    for (int index = 0; index < data1.size() ; index++ ) {

      /* Parameters to ExampleFileFilterEx: dir, modelname, extensions, description */

      Filter_editor = new ExampleFileFilterEx(0, "" ,new String [] {(String)data1.get(index)} ,(String)data1.get(index));

      Filter_editor.setExtensionListInDescription(false);

      fchooser_editor.addChoosableFileFilter(Filter_editor);
    }

    fchooser_editor.setFileFilter( Filter_editor );
    fchooser_editor.setCurrentDirectory( new java.io.File (System.getProperty("user.dir")));


   //set the config variables

    // (first step) set default values
    files2rm = new java.util.Vector();
    openlastmodel=false;
    curdir= " ";
    curmodel=" ";

       outputscreen=System.getProperty("STDOUT");
    if( outputscreen == null )
      outputscreen = "/dev/console";

    tangrampath=System.getProperty("TANGRAM2_HOME");
    if( tangrampath == null )
      tangrampath = "/usr/local/Tangram2";
    
    
    int t2configfileok = 1;
    
    // verify if the .tangram2.conf file exist
    java.io.File ftmp = new java.io.File( System.getProperty("user.home")+ "/.tangram2.conf" );
    if (! ftmp.exists())
       //create a default .tangram2.conf file
       t2configfileok = createtangram2configfile();

    if (t2configfileok!=-1)
    {
        // (second and third steps) read tangram2.conf file and .tangram.conf file
        String[] filetoread = new String[] { tangrampath+"/etc/tangram2.conf",System.getProperty("user.home")+"/.tangram2.conf"};
        for ( int i= 0; i < 2; i++) {
          try {
            int    p;
            String line, line2;
            java.io.FileReader     f  = new java.io.FileReader (filetoread[i]);
            java.io.BufferedReader b  = new java.io.BufferedReader (f);

            files2rm.removeAllElements();
           
            while ( (line = b.readLine()) != null ) {
              //extract the parameters
              if ( line.indexOf("OPENLASTMODEL") > -1 ) {
                p = line.indexOf("=");
                line = line.trim().substring( p+1 );
                if (line.indexOf("yes") > -1)
                  openlastmodel=true;
                else
                  openlastmodel=false;
              }
              if ( line.indexOf("CURDIR") > -1 ) {
                p = line.indexOf("=");
                curdir = line.trim().substring( p+1 );
              }
              if ( line.indexOf("CURMODEL") > -1 ) {
                p = line.indexOf("=");
                curmodel = line.trim().substring( p+1 );
               }
              if ( line.indexOf("FILES2RM") > -1 ) {
                p = line.indexOf("=");
                line = line.trim().substring( p+1 );
                while (line.trim().length() > 0) {
                  p = line.indexOf(" ");

                  if (!( p >-1) ) {
                    line2 = line.trim();
                    files2rm.add(line2);
                    break;
                  }
                  line2 = line.trim().substring( 0,p );
                  files2rm.add(line2);
                  line = line.trim().substring( p+1 );
                }
              }
              if( line.indexOf("EDITOR") > -1 )
              {
                p = line.indexOf("=");
                cureditor = line.trim().substring( p+1 );
              }
              if( line.indexOf("PSVIEWER") > -1 )
              {
                p = line.indexOf("=");
                curpsviewer = line.trim().substring( p+1 );
              }
              if( line.indexOf("PDFVIEWER") > -1 )
              {
                p = line.indexOf("=");
                curpdfviewer = line.trim().substring( p+1 );
              }

            }
            b.close();
          } catch (java.io.IOException e) {}
        }
    }
    
    //correct curdir and curmodel in the case openlastmodel==false
    if (!openlastmodel) {
      curdir   = " ";
      curmodel = " ";
    }

    //copy the value of curdir and curmodel to the status bar
    if ( openlastmodel && (curdir.trim().length() > 0) && (curmodel.trim().length() > 0) ) {
      //update the images and statusbar
      updatesystem();
      readmodelconfig();
    }
    else
      disablebuttons();
  }
/******************** read model config file procedure **********************/
// This function reads the .config file and sets the global variables.

  private void readmodelconfig() {
    try {
      int    p;
      String line;
      java.io.FileReader     f  = new java.io.FileReader (curmodel + ".config");
      java.io.BufferedReader b  = new java.io.BufferedReader (f);

      while( (line = b.readLine()) != null ) {
        //extract the parameters
        if ( line.indexOf("DEBUGLEVEL") > -1 ) {
          p = line.indexOf("=");
          line = line.trim().substring( p+1 );
          debuglevel = new Integer(line.trim()).intValue();
        }
        if ( line.indexOf("OUTPUTDEVICE") > -1 ) {
          p = line.indexOf("=");
          line = line.trim().substring( p+1 );
          if ( line.indexOf("screen") > -1 )
            outputdevice=false;
          else
            outputdevice=true;
        }
        if ( line.indexOf("OUTPUTFILE") > -1 ) {
          p = line.indexOf("=");
          outputfile = line.trim().substring( p+1 );
          p = outputfile.indexOf( ".OUT." );
          if (p > 0)
            //set the name of the outputfile
            outputfile = outputfile.trim().substring( p + 5 );
            fileout    = curdir + "/" + curmodel + ".OUT." + outputfile;
        }
      }
      b.close();
    } catch (java.io.IOException e) {}
  }
/******************** create tangram2 config file procedure **********************/
// This function copies the tangram2.conf file to .tangram2.conf file.

  public static int createtangram2configfile() {
    try {
      String line;
      java.io.FileReader fr = new java.io.FileReader( System.getProperty("TANGRAM2_HOME")+"/etc/tangram2.conf" );
      java.io.BufferedReader br = new java.io.BufferedReader(fr);

      java.io.FileWriter fw = new java.io.FileWriter( System.getProperty("user.home")+ "/.tangram2.conf" );
      java.io.BufferedWriter bw = new java.io.BufferedWriter(fw);

      while((line = br.readLine()) != null) {
        bw.write(line);
        bw.newLine();
      }
      bw.close();
      fw.close();
      br.close();
      fr.close();
      return 1;
    }
    catch (java.io.IOException e) {
      System.err.println("Error -- Can't create file .tangram2.conf in home directory (from " + T2modelenv.tangrampath+"/etc/tangram2.conf).");
      return -1;
    }
  }

/*********************************** disablebuttons Function ********************************/
  //disable all buttons and menus
  //except new , open and descriptors
  private void disablebuttons() {
    jButtonClose.setEnabled(false);
    jButtonViewFiles.setEnabled(false);
    jButtonDelete.setEnabled(false);
    jB_tgif.setEnabled(false);
    jB_Model_Generation.setEnabled(false);
    jB_Analytical_Methods.setEnabled(false);
    jB_Measures_of_Interest.setEnabled(false);
    jB_Batch_Simulation.setEnabled(false);
    jB_hmm.setEnabled(false);


    jMI_Close.setEnabled(false);
    jMI_ViewFiles.setEnabled(false);
    jMI_Delete.setEnabled(false);
    jMI_tgif.setEnabled(false);
    jMI_Model_Generation.setEnabled(false);
    jMI_Analytical_Methods.setEnabled(false);
    jMI_Measures_of_Interest.setEnabled(false);
    jMI_Batch_Simulation.setEnabled(false);
    jMI_hmm.setEnabled(false);
  }

/*********************************** updatesystem Function ********************************/
  private void updatesystem() {
    //set Status Bar

    T2MTKCommon.currdir = curdir+"/";
    T2MTKCommon.currmodel = curmodel;

    jL_Status_Bar_Model_name.setText(curmodel);

    jL_Status_Bar_Dir_name.setText(T2functions.status_directory(curdir));
    
    Processo a = new Processo();
    
    a.SetDir(curdir);
    
    fchooser.setCurrentDirectory( new java.io.File (curdir) );

    // search for files and turns the figs on and enable the correspondent
    // buttons if it's the case.
    update_obj();
    update_states();
    update_stdy();
    update_IM();
    update_descriptors();
    update_SIMUL();
    update_INTSIMUL();

    jButtonViewFiles.setEnabled(true);
    jButtonClose.setEnabled(true);
    jMI_ViewFiles.setEnabled(true);
    jMI_Close.setEnabled(true);
    verifydelete();
  }

/*********************************** verifydelete Function ********************************/
  public void verifydelete() {

    if (files2rm.size() > 0) {
      java.io.File f = new java.io.File(".");
      String[] dirlist, files;
      //filter
      files = new String [ files2rm.size() ];
      for (int i = 0; i < files2rm.size() ; i++)
        files[i] = (String)files2rm.get(i);
      ExampleFileFilterEx filter = new ExampleFileFilterEx(0,curmodel,files, "files to delete");
      dirlist = f.list(filter);
      // verify if there is something to delete.
      java.io.File mark_die = new java.io.File("mark_find");
      int test = 0;
      if ( files2rm.indexOf("mark_find") > -1 && mark_die.exists() )
        test = 1;
      if ( (dirlist.length > 0) || (test == 1 ) ) {
        jMI_Delete.setEnabled(true);
        jButtonDelete.setEnabled(true);
      }
      else {
        jButtonDelete.setEnabled(false);
        jMI_Delete.setEnabled(false);
      }
    }
    else {
      jButtonDelete.setEnabled(false);
      jMI_Delete.setEnabled(false);
    }
  }

/********** write the curdir and curmodel in .tangram2.conf *******************/
  private void updatelastmodel() {
    java.util.Hashtable t2conf = new java.util.Hashtable(10);

    //Read and parse tangram2.conf
    try
    {
      int p;
      String line;

      java.io.FileReader fr = new java.io.FileReader( System.getProperty("user.home")+"/.tangram2.conf" );
      java.io.BufferedReader br = new java.io.BufferedReader(fr);

      while((line = br.readLine()) != null)
      {
        p = line.indexOf('=');
        if(p > 0)
        {
          String key = (line.substring(0, p)).trim();
          String value = (line.substring(p+1, line.length())).trim();
          t2conf.put( key, (value != null ? value:" ") );
        }
        else
          javax.swing.JOptionPane.showMessageDialog(this,"Error in .tangram2.conf", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      }
    } catch(java.io.IOException e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + e.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    //Overwrite the hashtable with the changes
    t2conf.put("CURDIR", curdir);
    t2conf.put("CURMODEL", curmodel);

    //Write everything to the file
    try
    {
      java.io.FileWriter fw = new java.io.FileWriter( System.getProperty("user.dir")+"/.tangram2.conf" );
      java.io.BufferedWriter bw = new java.io.BufferedWriter(fw);

      for (java.util.Enumeration e = t2conf.keys() ; e.hasMoreElements() ;) {
          Object key = e.nextElement();
          bw.write(key + "=" + t2conf.get(key));
          bw.newLine();
      }

      bw.close();
      fw.close();
    } catch(java.io.IOException e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + e.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
  }

/***************** creates a default <curmodel>.config file  ***********************/
// This function creates the .config file and set the global variables.

  private void createmodelconfigfile() {
    try {
      java.io.FileWriter fw = new java.io.FileWriter( curdir + "/" + curmodel + ".config" );
      java.io.BufferedWriter bw = new java.io.BufferedWriter(fw);

      bw.write("DEBUGLEVEL=0");
      bw.newLine();
      bw.write("OUTPUTDEVICE=screen");
      bw.newLine();
      bw.write("OUTPUTFILE=");
      bw.newLine();

      bw.close();
      fw.close();
    } catch (java.io.IOException e) {
        javax.swing.JOptionPane.showMessageDialog(this,"Error - Can't create file "+ curmodel + ".config\n" + e.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    //set the global variables
    debuglevel=0;
    outputdevice=false;
    outputfile = " ";
    fileout = " ";
  }

/***************** fig and buttons  ***********************/
  public void update_obj() {
    if (T2functions.fexist(curmodel,".obj")) {
      jL_model.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/model_on.jpg")));
      jB_tgif.setEnabled(true);
      jB_Model_Generation.setEnabled(true);
      if (!T2functions.fexist(curmodel,".generator_mtx.param")) {
        jB_Batch_Simulation.setEnabled(true);
        jMI_Batch_Simulation.setEnabled(true);
      }
      jMI_tgif.setEnabled(true);
      jMI_Model_Generation.setEnabled(true);

      verifydelete();
    }
  }

  public void update_states() {
    if (T2functions.fexist(curmodel,".states")) {
      jL_mathematical_model.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/states_on.jpg")));
      jB_Analytical_Methods.setEnabled(true);
      jMI_Analytical_Methods.setEnabled(true);

      jB_hmm.setEnabled(true);
      jMI_hmm.setEnabled(true);
      jL_hmm.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/hmm_on.jpg")));
        
      verifydelete();
    }
  }

  public void update_stdy() {
    if ((T2functions.fexist(curmodel,".stdy_state_probs")) || (T2functions.fexist(curmodel,".SS.")) || (T2functions.fexist(curmodel,".TS."))) {
      jL_analytical_resolution.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/analytical_on.jpg")));
      jB_Measures_of_Interest.setEnabled(true);
      jMI_Measures_of_Interest.setEnabled(true);
      verifydelete();
    }
  }

  public void update_IM() {
    if (T2functions.fexist(curmodel,".IM.")) {
      jL_measure_of_interest.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/measures_on.jpg")));
      verifydelete();
    }
  }

  public void update_descriptors() {
    if ( T2functions.fexist(curmodel,new String[] {".autocorrelation",".autocovariance",".idc",".stationary_Descriptors",
         ".seq_autocorrelation",".seq_autocovariance",".seq_idc",".seq_stationary_Descriptors"})) {
      jL_traffic_modeling.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/traffic_modeling_on.jpg")));
      verifydelete();
    }
  }

  public void update_SIMUL() {
    if (T2functions.fexist(curmodel,".SIMUL.")) {
      jL_batch_simulation.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/batch_simulation_on.jpg")));
      verifydelete();
    }
  }

  public void update_INTSIMUL() {
    if (T2functions.fexist(curmodel,".INTSIMUL")) {
      jL_interactive_simulation.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/int_simulation_on.jpg")));
      verifydelete();
    }
  }

  private void jMI_ConfigActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_ConfigActionPerformed
    this.setEnabled(false);
    new T2config(this).show();
  }//GEN-LAST:event_jMI_ConfigActionPerformed

  private void jButtonNewActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
    // create a new project
    int retval = fchooser.showDialog(this,"Create");
    if(retval == javax.swing.JFileChooser.APPROVE_OPTION){
      String strname;
      String strpath;

      if ( fchooser.getSelectedFile().getName().indexOf(".obj") > -1 )
        strname  = new String ( fchooser.getSelectedFile().getName().substring( 0,fchooser.getSelectedFile().getName().length() - 4 ) );
      else
        strname  = new String ( fchooser.getSelectedFile().getName() );

      strpath = new String( fchooser.getSelectedFile().getPath().substring( 0,
                            fchooser.getSelectedFile().getPath().lastIndexOf( "/" )));

      if ( strname.indexOf(".") > -1 || strname.indexOf("?") > -1 || strname.indexOf("/") > -1 ) {
        javax.swing.JOptionPane.showMessageDialog(this,"Invalid model name!", "Error" , javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }

      java.io.File f = new java.io.File( strpath + "/" + strname + ".obj" );
      if ( f.exists() ) {
        //overwrite?
        retval = javax.swing.JOptionPane.showConfirmDialog(this,"File " + strname + ".obj already exists. Overwrite it ?", null, javax.swing.JOptionPane.YES_NO_OPTION);
        if ( retval == javax.swing.JOptionPane.YES_OPTION ) {
          try {
            f.delete();
            f.createNewFile();
          }
          catch(java.io.IOException exception) {
            javax.swing.JOptionPane.showMessageDialog(this,"Can't create the new model!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
            return;
          }
        }
        else
          return;
      }
      else {
        try {
          f.createNewFile();
        }
        catch(java.io.IOException exception) {
          javax.swing.JOptionPane.showMessageDialog(this,"Can't create the new model!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          return;
        }
      }

      //close old model
      jButtonCloseActionPerformed(evt);

      //update the model opened.
      curdir   = strpath;
      curmodel = strname;

      //update the images, statusbar, the buttons and change directory
      updatesystem();

      //update the config
      createmodelconfigfile();

      //call tgif
      jB_tgifActionPerformed(evt);
    }
  }//GEN-LAST:event_jButtonNewActionPerformed

  private void jButtonDeleteActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
    // delete some files of the project

    // get the files of this directory.
    java.io.File f = new java.io.File(".");
    String[] dirlist, files;

    // filter the files to delete.
    files = new String [ files2rm.size() ];
    for (int i = 0; i < files2rm.size() ; i++)
      files[i] = (String)files2rm.get(i);

    ExampleFileFilterEx filter = new ExampleFileFilterEx(0,curmodel,files, "files to delete");
    dirlist = f.list(filter);

    // ask if the user really wants to delete (if there is something to delete).
    java.io.File mark_die = new java.io.File("mark_find");
    int test = 0;
    if ( files2rm.indexOf("mark_find") > -1 && mark_die.exists() )
      test = 1;

    if ( (dirlist.length > 0) || (test == 1 ) ) {
      int retval = javax.swing.JOptionPane.showConfirmDialog(this,"Delete all config specified files?", null, javax.swing.JOptionPane.YES_NO_OPTION);
      if ( retval == javax.swing.JOptionPane.YES_OPTION ) {
        try {
          for (int i = 0; dirlist != null && i < dirlist.length; i++) {
            java.io.File die = new java.io.File(dirlist[i]);
            die.delete();
          }
          //necessary to erase mark_find (doesn't have the model name)
          mark_die.delete();

          //showmessage with the number of files delete!
          String straux;
          if ( test == 1 )
            straux = new String( Integer.toString(dirlist.length+1) );
          else
            straux = new String( Integer.toString(dirlist.length) );
          javax.swing.JOptionPane.showMessageDialog(this, straux + " files deleted!");
        }
        catch(Exception exception) {
          javax.swing.JOptionPane.showMessageDialog(this,"Can't delete all files!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE );
        }
        String strname  = new String(curmodel);
        String strpath  = new String(curdir);
        //close the images
        jButtonCloseActionPerformed(evt);

        curmodel = strname;
        curdir   = strpath;

        //update the images, statusbar, the buttons and change directory
        updatesystem();

        // it will be used in the case the user delete .config file
        // verify if the <curmodel>.config file exist
        java.io.File ftmp = new java.io.File( curmodel + ".config" );
        if (! ftmp.exists())
          //create a default <curmodel>.config file
          createmodelconfigfile();
      }
    }
  }//GEN-LAST:event_jButtonDeleteActionPerformed

  private void jMI_Help_AboutActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_Help_AboutActionPerformed
    this.setEnabled(false);
    about  = new T2about( (javax.swing.JFrame)this );
    about.show();
  }//GEN-LAST:event_jMI_Help_AboutActionPerformed
  
  public static void launch_document_viewer(java.lang.String viewer, 
                                            java.lang.String document_path,
                                            java.lang.String format_name,
                                            java.awt.Component parent)
  {
    
    java.io.File fdocument = new java.io.File (document_path);  
                
    if (fdocument.exists() == false)
    {
        javax.swing.JOptionPane.showMessageDialog(parent,"Could not locate " + document_path + ".","Error",javax.swing.JOptionPane.ERROR_MESSAGE);  
        
    } else { 
            
        try {

            Process help = Runtime.getRuntime().exec( new String[]  { "bash","-c",viewer + " " +  fdocument.getAbsolutePath() , " &" } );
            int retval = 0;

            Thread.sleep(100); /* waits 100 msecs */
            retval = help.exitValue();

            if (viewer.trim().compareTo("")!=0)
                javax.swing.JOptionPane.showMessageDialog(parent,"Could not launch " + viewer + ".\n\nYou may configure your preferred " + format_name + " viewer under the \"Options/Config\" menu.","Error opening " + format_name + ".",javax.swing.JOptionPane.ERROR_MESSAGE);
            else
                javax.swing.JOptionPane.showMessageDialog(parent,"You must configure your preferred " + format_name + " viewer under the \"Options/Config\" menu.","Error opening " + format_name + ".",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        catch ( Exception e )
        {
            /* System.err.println("Process is running."); */
        }
    }
  }
  private void jMI_Help_ManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_Help_ManualActionPerformed
    String manual_path = System.getProperty( "TANGRAM2_HOME"  ) + "/docs/Tangram-II_manual.pdf" ;
    launch_document_viewer(curpdfviewer,manual_path,"pdf",this);
  }//GEN-LAST:event_jMI_Help_ManualActionPerformed

  private void jB_Batch_SimulationActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Batch_SimulationActionPerformed
    this.setEnabled(false);
    simulation = new T2simulation(this);
    simulation.show();
  }//GEN-LAST:event_jB_Batch_SimulationActionPerformed

  private void jB_Traffic_ModelingActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Traffic_ModelingActionPerformed
    this.setEnabled(false);
    descriptors = new T2descriptors(this);
    descriptors.show();
  }//GEN-LAST:event_jB_Traffic_ModelingActionPerformed

  private void jB_Measures_of_InterestActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Measures_of_InterestActionPerformed
    this.setEnabled(false);
    measures = new T2measures(this);
    measures.show();
  }//GEN-LAST:event_jB_Measures_of_InterestActionPerformed

  private void jB_Analytical_MethodsActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Analytical_MethodsActionPerformed
    this.setEnabled(false);
    analytical = new T2analytical(this);
    analytical.show();
  }//GEN-LAST:event_jB_Analytical_MethodsActionPerformed

  private void jB_Model_GenerationActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Model_GenerationActionPerformed
    this.setEnabled(false);
    modelgen  = new T2modelgen(this);
    modelgen.show();
  }//GEN-LAST:event_jB_Model_GenerationActionPerformed

  private void jB_tgifActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_tgifActionPerformed
    //this method creates a thread to wait for the tgif but the main screen remains not updated!
//    if (tgif == null) {
      try {
        tgif = Runtime.getRuntime().exec(new String[] { "bash","-c","tgif "+ T2main_app.tgif_flags + curmodel + ".obj"});
        //create a thread to wait for the process termination and calls update_obj()
//        tgif_thread = new threadWaitFor(this,tgif,"tgif");
//        tgif_thread.run();
     }
      catch(Exception exception) {
        javax.swing.JOptionPane.showMessageDialog(this,"TGIF could not be started!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        exception.printStackTrace(); 
      }
//    }
  }//GEN-LAST:event_jB_tgifActionPerformed

  private void jB_hmmActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_hmmActionPerformed
        hmm = new T2MTKMain(this);
        hmm.show();
  }//GEN-LAST:event_jB_hmmActionPerformed

  private void jButtonExitAppActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitAppActionPerformed
    //kill the childs
    if (measures != null) { measures.dispose(); }
    if (analytical != null) { analytical.dispose(); }
    if (descriptors != null) { descriptors.dispose(); }
    if (modelgen != null) { modelgen.dispose(); }
    if (simulation != null) { simulation.dispose(); }
    if (about != null) { about.dispose(); }
    if (tgif != null) { tgif.destroy(); }
    if (hmm != null) { hmm.dispose(); }
    //update the config file with the last model
    if (openlastmodel) { updatelastmodel(); };

    dispose();
  }//GEN-LAST:event_jButtonExitAppActionPerformed

  private void jB_CloseAndExitActionPerformed (java.awt.event.ActionEvent evt) {
    jButtonExitAppActionPerformed (evt);
    System.exit(0);
  }


  private void jButtonHelpActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
    /*jMI_Help_ContentActionPerformed(null);*/
      jMI_Help_ManualActionPerformed(null);
  }//GEN-LAST:event_jButtonHelpActionPerformed

  private void jButtonCloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
    //close model
    jL_model.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/model_off.jpg")));
    jL_mathematical_model.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/states_off.jpg")));
    jL_analytical_resolution.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/analytical_off.jpg")));
    jL_measure_of_interest.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/measures_off.jpg")));
    jL_traffic_modeling.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/traffic_modeling_off.jpg")));
    jL_batch_simulation.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/batch_simulation_off.jpg")));
    jL_interactive_simulation.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/int_simulation_off.jpg")));
    jL_hmm.setIcon(new javax.swing.ImageIcon (getClass ().getResource ("/Tangram2/imgs/hmm_off.jpg")));
    jL_Status_Bar_Model_name.setText(" ");
    jL_Status_Bar_Dir_name.setText(" ");
    curdir=" ";
    curmodel=" ";
    
    disablebuttons();
  }//GEN-LAST:event_jButtonCloseActionPerformed

  private void jButtonOpenActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed

    int retval = fchooser.showOpenDialog(this);

    if ( retval == javax.swing.JFileChooser.APPROVE_OPTION ){

      // verify if the model exists!
      if ( !fchooser.getSelectedFile().exists() ) {
        javax.swing.JOptionPane.showMessageDialog(this,"Model doesn't exist!","Error",javax.swing.JOptionPane.INFORMATION_MESSAGE);
        return;
      }

      //close old model
      jButtonCloseActionPerformed(evt);
      //update the model opened.
      curdir   = fchooser.getSelectedFile().getAbsolutePath().substring( 0,
                 fchooser.getSelectedFile().getAbsolutePath().length() -
                 fchooser.getSelectedFile().getName().length() - 1 );

      curmodel = fchooser.getSelectedFile().getName().substring( 0,
                 fchooser.getSelectedFile().getName().length() - 4 );

      //update the images, statusbar and change directory
      updatesystem();
      
      //read the configuration files

      // verify if the <curmodel>.config file exist
      java.io.File ftmp = new java.io.File( curmodel + ".config" );
      if (! ftmp.exists())
        //create a default <curmodel>.config file
        createmodelconfigfile();
      else
        readmodelconfig();

      //sets the directory of the view files fchooser
      fchooser_editor.setCurrentDirectory( new java.io.File (curdir));


    }
  }//GEN-LAST:event_jButtonOpenActionPerformed



  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jButtonExitAppActionPerformed(null);
    if( holder != null ) System.exit(0);
  }//GEN-LAST:event_exitForm

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMI_Model_Generation;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JMenuItem jMI_Traffic_Modeling;
    private javax.swing.JButton jB_Measures_of_Interest;
    private javax.swing.JMenuItem jMI_Close;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JLabel jL_Status_Bar_Dir;
    private javax.swing.JButton jButtonViewFiles;
    private javax.swing.JMenu jM_Tools;
    private javax.swing.JLabel jL_mathematical_model;
    private javax.swing.JLabel jL_Status_Bar_Model;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JLabel jL_analytical_resolution;
    private javax.swing.JButton jB_Analytical_Methods;
    private javax.swing.JLabel jL_traffic_modeling;
    private javax.swing.JToolBar jTB_tools;
    private javax.swing.JToolBar jTB_file;
    private javax.swing.JMenuItem jMI_tgif;
    private javax.swing.JLabel jL_Tangram_Picture;
    private javax.swing.JButton jButtonImport;
    private javax.swing.JMenuItem jMI_Open;
    private javax.swing.JMenu jM_Options;
    private javax.swing.JMenuItem jMI_Measures_of_Interest;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JMenuItem jMI_Analytical_Methods;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem jMI_Import;
    private javax.swing.JMenuItem jMI_ViewFiles;
    private javax.swing.JLabel jL_measure_of_interest;
    private javax.swing.JLabel jL_model;
    private javax.swing.JMenuItem jMI_New;
    private javax.swing.JButton jButtonExitApp;
    private javax.swing.JMenuItem jMI_Delete;
    private javax.swing.JPanel jP_model;
    private javax.swing.JMenuItem jMI_Help_Manual;
    private javax.swing.JMenuItem jMI_Exit;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JMenuItem jMI_Config;
    private javax.swing.JMenu jM_File;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JMenuItem jMI_Help_About;
    private javax.swing.JButton jB_Batch_Simulation;
    private javax.swing.JButton jB_hmm;
    private javax.swing.JLabel jL_hmm;
    private javax.swing.JMenuItem jMI_hmm;
    private javax.swing.JMenu jM_Help;
    private javax.swing.JMenuBar jMB_Menu;
    private javax.swing.JLabel jL_batch_simulation;
    private javax.swing.JMenuItem jMI_Batch_Simulation;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jB_tgif;
    private javax.swing.JLabel jL_interactive_simulation;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jB_Model_Generation;
    private javax.swing.JButton jB_Traffic_Modeling;
    // End of variables declaration//GEN-END:variables
  private javax.swing.JFileChooser fchooser, fchooser_editor;
  private ExampleFileFilter objFilter;
  private ExampleFileFilterEx objFilterEx, Filter_editor;
  private java.util.Vector vector;
  private String holder = "";

  //config variables
  public java.util.Vector data1; //Extensions
  public String curdir,curmodel,outputfile,outputscreen,fileout,cureditor,curpsviewer,curpdfviewer;
  static public String tangrampath;
  public boolean openlastmodel,outputdevice;
  // outputdevice=false->screen   outputdevice=true->file
  public int debuglevel,maxstates;
  public java.util.Vector files2rm;

  //plot properties - future save it in a file
  public boolean xlog=false,ylog=false,grid=false;
  public boolean xrange=false, yrange=false;
  public String xrange_min,xrange_max;
  public String yrange_min,yrange_max, datastyle = "lines";
  public int output=1;

  public  T2analytical analytical;
  public  Process tgif = null;
  private T2MTKMain  hmm;
  private T2measures measures;
  private T2modelgen modelgen;
  private T2descriptors descriptors;
  private T2simulation simulation;
  private T2about about;
  private threadWaitFor tgif_thread;
//   private bool helpOpened;

  public String filename_import;
  public String filename_import_output;
  
  public Float uniformization_rate;

  // End of variables declaration

  public static void main(java.lang.String[] args) {
    new T2modelenv ("terminal").show ();
  }

}
