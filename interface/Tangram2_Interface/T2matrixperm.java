/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2matrixperm extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2matrixperm(T2modelenv mainholder) {
    modelenv=mainholder;
    initComponents ();
    initComponentsManual();
    pack ();
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPColorConfig = new javax.swing.JPanel();
        jCBHighProb = new javax.swing.JComboBox();
        jCBBackground = new javax.swing.JComboBox();
        jLLowProb = new javax.swing.JLabel();
        jLHighProb = new javax.swing.JLabel();
        jLBackground = new javax.swing.JLabel();
        jCBLowProb = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jCBColorDepth = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLVariables = new javax.swing.JList();
        jBFirst = new javax.swing.JButton();
        jBUp = new javax.swing.JButton();
        jBDown = new javax.swing.JButton();
        jBLast = new javax.swing.JButton();
        jCBPermutation = new javax.swing.JCheckBox();
        jBShow = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPExtraOptions = new javax.swing.JPanel();
        jCBExtension = new javax.swing.JCheckBox();
        jTFExtension = new javax.swing.JTextField();
        jLExtension = new javax.swing.JLabel();
        jLZoomOut = new javax.swing.JLabel();
        jCBZoomOut = new javax.swing.JComboBox();
        jBUpdate = new javax.swing.JButton();
        jL_Tangram_Picture = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Matrix Visualization]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPColorConfig.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPColorConfig.setBorder(new javax.swing.border.TitledBorder(null, " Color Options ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jCBHighProb.setFont(new java.awt.Font("Dialog", 1, 10));
        jPColorConfig.add(jCBHighProb, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 80, 100, -1));

        jCBBackground.setFont(new java.awt.Font("Dialog", 1, 10));
        jPColorConfig.add(jCBBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 125, 100, -1));

        jLLowProb.setText("Low Probability");
        jLLowProb.setFont(new java.awt.Font("Dialog", 1, 10));
        jPColorConfig.add(jLLowProb, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 20, -1, -1));

        jLHighProb.setText("High Probability");
        jLHighProb.setFont(new java.awt.Font("Dialog", 1, 10));
        jPColorConfig.add(jLHighProb, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 65, -1, -1));

        jLBackground.setText("Zero Probability");
        jLBackground.setFont(new java.awt.Font("Dialog", 1, 10));
        jPColorConfig.add(jLBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 110, -1, -1));

        jCBLowProb.setFont(new java.awt.Font("Dialog", 1, 10));
        jPColorConfig.add(jCBLowProb, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 35, 100, -1));

        jLabel1.setText("Color Depth");
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        jPColorConfig.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 155, -1, -1));

        jPColorConfig.add(jCBColorDepth, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 170, 100, -1));

        getContentPane().add(jPColorConfig, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 130, 205));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder(null, " State Variable Permutation ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jLVariables.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jLVariables);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 50, 200, 140));

        jBFirst.setFont(new java.awt.Font("Dialog", 0, 10));
        jBFirst.setText("First");
        jBFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFirstActionPerformed(evt);
            }
        });

        jPanel3.add(jBFirst, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 50, 70, -1));

        jBUp.setFont(new java.awt.Font("Dialog", 0, 10));
        jBUp.setText("Up");
        jBUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBUpActionPerformed(evt);
            }
        });

        jPanel3.add(jBUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 80, 70, -1));

        jBDown.setFont(new java.awt.Font("Dialog", 0, 10));
        jBDown.setText("Down");
        jBDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDownActionPerformed(evt);
            }
        });

        jPanel3.add(jBDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 110, 70, -1));

        jBLast.setFont(new java.awt.Font("Dialog", 0, 10));
        jBLast.setText("Last");
        jBLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLastActionPerformed(evt);
            }
        });

        jPanel3.add(jBLast, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 140, 70, -1));

        jCBPermutation.setFont(new java.awt.Font("Dialog", 1, 10));
        jCBPermutation.setText("Use a permutation");
        jCBPermutation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBPermutationActionPerformed(evt);
            }
        });

        jPanel3.add(jCBPermutation, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 20, -1, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 310, 205));

        jBShow.setFont(new java.awt.Font("Dialog", 1, 10));
        jBShow.setText("Show");
        jBShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBShowActionPerformed(evt);
            }
        });

        getContentPane().add(jBShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 15, 110, 30));

        jButton6.setFont(new java.awt.Font("Dialog", 1, 10));
        jButton6.setText("Close");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 95, 110, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 345, 1, 1));

        jPExtraOptions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPExtraOptions.setBorder(new javax.swing.border.TitledBorder(null, " Extra Options ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jCBExtension.setFont(new java.awt.Font("Dialog", 1, 10));
        jCBExtension.setText("Use another extension for the probabilities matrix file");
        jCBExtension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBExtensionActionPerformed(evt);
            }
        });

        jPExtraOptions.add(jCBExtension, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 20, -1, -1));

        jTFExtension.setText(".st_trans_prob_mtx");
        jPExtraOptions.add(jTFExtension, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 50, 320, 20));

        jLExtension.setText("File Extension");
        jLExtension.setFont(new java.awt.Font("Dialog", 1, 10));
        jPExtraOptions.add(jLExtension, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 50, -1, 20));

        jLZoomOut.setText("Zoom Out Strategy");
        jLZoomOut.setFont(new java.awt.Font("Dialog", 1, 10));
        jPExtraOptions.add(jLZoomOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 80, -1, 20));

        jCBZoomOut.setFont(new java.awt.Font("Dialog", 1, 10));
        jPExtraOptions.add(jCBZoomOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, -1, -1));

        getContentPane().add(jPExtraOptions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 225, 450, 115));

        jBUpdate.setFont(new java.awt.Font("Dialog", 1, 10));
        jBUpdate.setText("Update");
        jBUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBUpdateActionPerformed(evt);
            }
        });

        getContentPane().add(jBUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 55, 110, 30));

        jL_Tangram_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_st_perm-mtx_vis.gif")));
        getContentPane().add(jL_Tangram_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 298, -1, -1));

    }//GEN-END:initComponents

  private void jBUpdateActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBUpdateActionPerformed
    String cmdline;
    int npars=0;
    String[] parsarray;
    String permstring = new String();

    if(javax.swing.JOptionPane.showConfirmDialog(
            this,
            "Due to the way in which the states tuples\nare generated at the first time, the order\nof the states in your model may not\nrepresent any permutation.\nIf you choose to update your files, you may\nnot be able to recover the original states,\nunless you re-generate the entire chain.\n\nAre you sure you want to overwrite your\nmodel files?", "Warning",
            javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE
            ) == javax.swing.JOptionPane.NO_OPTION) return;

    java.util.Vector cmdpars = new java.util.Vector();

    cmdpars.add("mtx_vis-st_permut");
    cmdpars.add("-fn"); cmdpars.add(modelenv.curdir + "/" + modelenv.curmodel);
    cmdpars.add("-gf");
    cmdpars.add("-ng");

    if(jCBExtension.isSelected())
    {
      cmdpars.add("-ex");
      cmdpars.add(jTFExtension.getText());
    }

    if(jCBPermutation.isSelected())
    {
      int finalpermvect [] = new int[ permvect.size() ];
           
      cmdpars.add("-ps");

      for(int i = 0; i < permvect.size(); i++)
      {
        int j = ((Integer)(permvect.get(i))).intValue();
        
        finalpermvect[ j ] = i;
      }
      
      for(int i = 0; i < finalpermvect.length; i++)
      {
         permstring += finalpermvect[ i ] + " ";
         
      }
      cmdpars.add(permstring);
    }

    parsarray = new String[cmdpars.size()];

    cmdpars.copyInto(parsarray);
    
    
    try
    {
      modelenv.analytical.setEnabled(false);
      status = new T2status( this, "Updating", "Updating Model Files", parsarray, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
      status.show();
      status.start();
      (status.getProcess( )).waitFor( );
    }
    catch(Exception e)
    {
      System.out.println("Exception running mtx_vis-st_permut" + e.toString());
    }

    // Reset the list
    try  {
      int p;
      int cont=0;
      String line;
      namesvect = new java.util.Vector();

      java.io.FileReader fr = new java.io.FileReader( modelenv.curdir+"/"+modelenv.curmodel+".vstat" );
      java.io.BufferedReader br = new java.io.BufferedReader(fr);

      while((line = br.readLine()) != null)
          namesvect.add( "(" + (cont++) + ") " + line.trim());

      permvect = new java.util.Vector();
      for(int i=0; i < namesvect.size(); i++)
        permvect.add(new Integer(i));
    }
    catch(Exception e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Error opening " + modelenv.curmodel + ".vstat", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    jLVariables.setListData(namesvect);
  }//GEN-LAST:event_jBUpdateActionPerformed

  private void jCBExtensionActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBExtensionActionPerformed
    if(jCBExtension.isSelected())
    {
      jLExtension.setEnabled(true);
      jTFExtension.setEnabled(true);
    }
    else
    {
      jLExtension.setEnabled(false);
      jTFExtension.setEnabled(false);
    }
  }//GEN-LAST:event_jCBExtensionActionPerformed

  private void jCBPermutationActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBPermutationActionPerformed
    if(!jCBPermutation.isSelected())
    {
      jLVariables.setEnabled(false);
      jBFirst.setEnabled(false);
      jBUp.setEnabled(false);
      jBDown.setEnabled(false);
      jBLast.setEnabled(false);
      jBUpdate.setEnabled(false); // it is meaningless to update without a permutation
    }
    else
    {
      jLVariables.setEnabled(true);
      jBFirst.setEnabled(true);
      jBUp.setEnabled(true);
      jBDown.setEnabled(true);
      jBLast.setEnabled(true);
      jBUpdate.setEnabled(true);
    }
  }//GEN-LAST:event_jCBPermutationActionPerformed

  private void jButton6ActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    modelenv.analytical.setEnabled(true);
    dispose();
  }//GEN-LAST:event_jButton6ActionPerformed

  private void jBShowActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBShowActionPerformed
    String cmdline; int npars=0; String permstring = new String();

    java.util.Vector cmdpars = new java.util.Vector();

    String[] parsarray;
    
    int finalpermvect [] = new int[ permvect.size() ];

    cmdpars.add("mtx_vis-st_permut");
    cmdpars.add("-fn"); cmdpars.add(modelenv.curdir + "/" + modelenv.curmodel);
    cmdpars.add("-sc"); cmdpars.add((String)jCBLowProb.getSelectedItem());
    cmdpars.add("-fc"); cmdpars.add((String)jCBHighProb.getSelectedItem());
    cmdpars.add("-bc"); cmdpars.add((String)jCBBackground.getSelectedItem());
    cmdpars.add("-cd"); cmdpars.add((new Integer(jCBColorDepth.getSelectedIndex()+1)).toString());
    cmdpars.add("-zo"); cmdpars.add((new Integer(jCBZoomOut.getSelectedIndex())).toString());

    if(jCBExtension.isSelected())
    {
      cmdpars.add("-ex");
      cmdpars.add(jTFExtension.getText());
    }
    
    
    
    if(jCBPermutation.isSelected())
    {
      cmdpars.add("-ps");
      
      
      for(int i = 0; i < permvect.size(); i++)
      {
        int j = ((Integer)(permvect.get(i))).intValue();
        
        finalpermvect[ j ] = i;
      }
      
      for(int i = 0; i < finalpermvect.length; i++)
      {
         permstring += finalpermvect[ i ] + " ";
         
      }
      cmdpars.add(permstring);      

      /* for(int i = 0; i < permvect.size(); i++)
      {
         permstring += permvect.get(i) + " ";
      }
      cmdpars.add(permstring); */
    }

    parsarray = new String[cmdpars.size()];

    cmdpars.copyInto(parsarray);

    try
    {
      Process matrixpermproc;

      matrixpermproc = Runtime.getRuntime().exec(parsarray);

      threadCapOut.takeoutput_process(matrixpermproc, (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), "Matrix Visualization", modelenv.analytical );
      new threadCapOut( matrixpermproc.getErrorStream(), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) ).start();

      matrixpermproc.waitFor();

    }
    catch(Exception e)
    {
      System.out.println("Exception running " + e.toString());
      for (int i=0;i<parsarray.length;i++)
         System.out.println(parsarray[i]);
    }

  }//GEN-LAST:event_jBShowActionPerformed


  private void jBDownActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDownActionPerformed
    int index;
    Integer tempind;
    String temp;

    index = jLVariables.getSelectedIndex();
    if(index == -1) return;
    if(index == (namesvect.size()-1)) return;
    temp = (String)namesvect.remove(index);
    tempind = (Integer)permvect.remove(index);
    namesvect.add(index+1, temp);
    permvect.add(index+1, tempind);
    jLVariables.setListData(namesvect);
    jLVariables.setSelectedIndex(index+1);
  }//GEN-LAST:event_jBDownActionPerformed

  private void jBUpActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBUpActionPerformed
    int index;
    Integer tempind;
    String temp;

    index = jLVariables.getSelectedIndex();
    if(index == -1) return;
    if(index == 0) return;
    temp = (String)namesvect.remove(index);
    tempind = (Integer)permvect.remove(index);
    namesvect.add(index-1, temp);
    permvect.add(index-1, tempind);
    jLVariables.setListData(namesvect);
    jLVariables.setSelectedIndex(index-1);
  }//GEN-LAST:event_jBUpActionPerformed

  private void jBLastActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLastActionPerformed
    int index;
    Integer tempind;
    String temp;

    index = jLVariables.getSelectedIndex();
    if(index == -1) return;
    if(index == (namesvect.size()-1)) return;
    temp = (String)namesvect.remove(index);
    tempind = (Integer)permvect.remove(index);
    namesvect.add(temp);
    permvect.add(tempind);
    jLVariables.setListData(namesvect);
    jLVariables.setSelectedIndex(namesvect.size()-1);
  }//GEN-LAST:event_jBLastActionPerformed

  private void jBFirstActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFirstActionPerformed
    int index;
    Integer tempind;
    String temp;

    index = jLVariables.getSelectedIndex();
    if(index == -1) return;
    if(index == 0) return;
    temp = (String)namesvect.remove(index);
    tempind = (Integer)permvect.remove(index);
    namesvect.add(0, temp);
    permvect.add(0, tempind);
    jLVariables.setListData(namesvect);
    jLVariables.setSelectedIndex(0);

  }//GEN-LAST:event_jBFirstActionPerformed


  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    modelenv.analytical.setEnabled(true);
    dispose();
  }//GEN-LAST:event_exitForm


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCBHighProb;
    private javax.swing.JList jLVariables;
    private javax.swing.JComboBox jCBLowProb;
    private javax.swing.JButton jBUpdate;
    private javax.swing.JComboBox jCBColorDepth;
    private javax.swing.JLabel jL_Tangram_Picture;
    private javax.swing.JLabel jLExtension;
    private javax.swing.JLabel jLLowProb;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLBackground;
    private javax.swing.JCheckBox jCBExtension;
    private javax.swing.JTextField jTFExtension;
    private javax.swing.JLabel jLHighProb;
    private javax.swing.JComboBox jCBZoomOut;
    private javax.swing.JButton jBUp;
    private javax.swing.JLabel jLZoomOut;
    private javax.swing.JComboBox jCBBackground;
    private javax.swing.JPanel jPColorConfig;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jBLast;
    private javax.swing.JCheckBox jCBPermutation;
    private javax.swing.JButton jBDown;
    private javax.swing.JButton jBShow;
    private javax.swing.JPanel jPExtraOptions;
    private javax.swing.JButton jBFirst;
    // End of variables declaration//GEN-END:variables
  private java.util.Vector namesvect, permvect;
  private T2modelenv modelenv;
  private T2status status;

  private void initComponentsManual()
  {
    int ncolors=8;
    String[] colors= { "Black", "White", "Red", "Green", "Blue", "Yellow", "Cyan", "Purple" };
    String[] strategy = { "Maximum probability", "Minimum probability", "Average Probability" };

    for(int i = 0; i < ncolors; i++)
    {
        jCBLowProb.addItem(colors[i]);
        jCBHighProb.addItem(colors[i]);
        jCBBackground.addItem(colors[i]);
        jCBColorDepth.addItem(new Integer(i+1)); //nothing to do with the previous ones, just to use this same for loop
    }
    jCBLowProb.setSelectedIndex(5);
    jCBHighProb.setSelectedIndex(2);
    jCBBackground.setSelectedIndex(1);
    jCBColorDepth.setSelectedIndex(7);

    for(int i = 0; i < 3; i++)
    {
      jCBZoomOut.addItem(strategy[i]);
    }
    jCBZoomOut.setSelectedIndex(2);

    jLExtension.setEnabled(false);
    jTFExtension.setEnabled(false);

    try  {
      int p;
      int cont=0;
      String line;
      namesvect = new java.util.Vector();

      java.io.FileReader fr = new java.io.FileReader( modelenv.curdir+"/"+modelenv.curmodel+".vstat" );
      java.io.BufferedReader br = new java.io.BufferedReader(fr);

      while((line = br.readLine()) != null)
          namesvect.add( "(" + (cont++) + ") " + line.trim());

      permvect = new java.util.Vector();
      for(int i=0; i < namesvect.size(); i++)
        permvect.add(new Integer(i));
    }
    catch(Exception e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Error opening " + modelenv.curmodel + ".vstat", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    jLVariables.setListData(namesvect);

    jLVariables.setEnabled(false);
    jBFirst.setEnabled(false);
    jBUp.setEnabled(false);
    jBDown.setEnabled(false);
    jBLast.setEnabled(false);
    jBUpdate.setEnabled(false); // it is meaningless to update without a permutation
  }
}
