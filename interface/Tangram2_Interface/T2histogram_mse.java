/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

/******************************************************************************
 *
 *      Change Log:
 *
 *	Last Modifications:
 *           Hugo Sato: 27 Jan 2004 - Window was born.
 *           Hugo Sato: 16 Fev 2004 - Histogram for Band Capacity
 *
 *           ~~~~~~~~~~~~ DONT FORGET THE PROGRAMMING RULES ~~~~~~~~~~~~
 *
 *	Tool: Traffic Generator Interface
 *	LAND - UFRJ/COPPE/COS      
 *
 ******************************************************************************/

package Tangram2;

import javax.swing.JComponent;

public class T2histogram_mse extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2histogram_mse( T2plot parent, String filename , String Directory ) 
  {
     this.filename = filename;
     this.directory = Directory;
     this.holder = parent;
     holder.setEnabled( false );
     initComponents ();
     initComponentsManual( filename );
     pack();
  }
      
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jbG_PlotSelection = new javax.swing.ButtonGroup();
        jP_Plot = new javax.swing.JPanel();
        jL_Information = new javax.swing.JLabel();
        jSP_Information = new javax.swing.JScrollPane();
        jTA_Information = new javax.swing.JTextArea();
        jL_HistSlotSize = new javax.swing.JLabel();
        jTF_HistSlotSize = new javax.swing.JTextField();
        jP_Distribuition = new javax.swing.JPanel();
        jCB_ExpDist = new javax.swing.JCheckBox();
        jCB_GaussDist = new javax.swing.JCheckBox();
        jCB_LNormalDist = new javax.swing.JCheckBox();
        jCB_GammaDist = new javax.swing.JCheckBox();
        jCB_ParetoDist = new javax.swing.JCheckBox();
        jCB_WeibullDist = new javax.swing.JCheckBox();
        jCB_MSE = new javax.swing.JCheckBox();
        jP_PlotSelection = new javax.swing.JPanel();
        jRB_Dist = new javax.swing.JRadioButton();
        jRB_PMF = new javax.swing.JRadioButton();
        jRB_Comp = new javax.swing.JRadioButton();
        jB_Properties = new javax.swing.JButton();
        jB_Evaluate = new javax.swing.JButton();
        jB_Delete_All = new javax.swing.JButton();
        jB_Close = new javax.swing.JButton();
        jL_Tangram_Picture = new javax.swing.JLabel();
        jL_SelectedTraceMeasure = new javax.swing.JLabel();
        jL_TraceMeasure = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Plot Histogram]");
        setName("jF_Histogram");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jP_Plot.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Plot.setBorder(new javax.swing.border.TitledBorder(""));
        jL_Information.setText("MSE Information:");
        jL_Information.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Plot.add(jL_Information, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 225, -1, -1));

        jTA_Information.setToolTipText("Information about the selected graphic");
        jTA_Information.setEditable(false);
        jTA_Information.setBackground(new java.awt.Color(204, 204, 204));
        jSP_Information.setViewportView(jTA_Information);

        jP_Plot.add(jSP_Information, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 260, 60));

        jL_HistSlotSize.setText("Histogram Slot Size:");
        jL_HistSlotSize.setToolTipText("Histogram Slot Size.");
        jL_HistSlotSize.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Plot.add(jL_HistSlotSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jTF_HistSlotSize.setToolTipText("Histogram Slot Size must be bigger than one");
        jTF_HistSlotSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_HistSlotSizeFocusLost(evt);
            }
        });

        jP_Plot.add(jTF_HistSlotSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 130, 20));

        jP_Distribuition.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Distribuition.setBorder(new javax.swing.border.TitledBorder(null, " Distribuitions ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jP_Distribuition.setToolTipText("Distribuitions.");
        jCB_ExpDist.setToolTipText("Exponential");
        jCB_ExpDist.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_ExpDist.setText("Exponential(E)");
        jCB_ExpDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_ExpDistActionPerformed(evt);
            }
        });

        jP_Distribuition.add(jCB_ExpDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        jCB_GaussDist.setToolTipText("Gaussian");
        jCB_GaussDist.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_GaussDist.setText("Gaussian(N)");
        jCB_GaussDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_GaussDistActionPerformed(evt);
            }
        });

        jP_Distribuition.add(jCB_GaussDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jCB_LNormalDist.setToolTipText("Log Normal");
        jCB_LNormalDist.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_LNormalDist.setText("Log Normal(L)");
        jCB_LNormalDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_LNormalDistActionPerformed(evt);
            }
        });

        jP_Distribuition.add(jCB_LNormalDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jCB_GammaDist.setToolTipText("Gamma");
        jCB_GammaDist.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_GammaDist.setText("Gamma(G)");
        jCB_GammaDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_GammaDistActionPerformed(evt);
            }
        });

        jP_Distribuition.add(jCB_GammaDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, -1, -1));

        jCB_ParetoDist.setToolTipText("Pareto");
        jCB_ParetoDist.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_ParetoDist.setText("Pareto(P)");
        jCB_ParetoDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_ParetoDistActionPerformed(evt);
            }
        });

        jP_Distribuition.add(jCB_ParetoDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, -1, -1));

        jCB_WeibullDist.setToolTipText("Weibull");
        jCB_WeibullDist.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_WeibullDist.setText("Weibull(W)");
        jCB_WeibullDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_WeibullDistActionPerformed(evt);
            }
        });

        jP_Distribuition.add(jCB_WeibullDist, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, -1, -1));

        jP_Plot.add(jP_Distribuition, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 260, 90));

        jCB_MSE.setToolTipText("Calculate MSE");
        jCB_MSE.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_MSE.setText("Calculate MSE");
        jCB_MSE.setEnabled(false);
        jP_Plot.add(jCB_MSE, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jP_PlotSelection.setBorder(new javax.swing.border.TitledBorder(null, " Plot Selection ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jbG_PlotSelection.add(jRB_Dist);
        jRB_Dist.setFont(new java.awt.Font("Dialog", 1, 10));
        jRB_Dist.setSelected(true);
        jRB_Dist.setText("Dist");
        jRB_Dist.setToolTipText("Distribuition File Plot");
        jP_PlotSelection.add(jRB_Dist);

        jbG_PlotSelection.add(jRB_PMF);
        jRB_PMF.setFont(new java.awt.Font("Dialog", 1, 10));
        jRB_PMF.setText("PMF/PDF");
        jRB_PMF.setToolTipText("PMF/PDF File Plot");
        jP_PlotSelection.add(jRB_PMF);

        jbG_PlotSelection.add(jRB_Comp);
        jRB_Comp.setFont(new java.awt.Font("Dialog", 1, 10));
        jRB_Comp.setText("Comp");
        jRB_Comp.setToolTipText("Comp File Plot");
        jP_PlotSelection.add(jRB_Comp);

        jP_Plot.add(jP_PlotSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 260, 60));

        getContentPane().add(jP_Plot, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 280, 310));

        jB_Properties.setToolTipText("Configure GNUPlot Properties");
        jB_Properties.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Properties.setLabel("Properties");
        jB_Properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PropertiesActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Properties, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 110, 30));

        jB_Evaluate.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Evaluate.setText("Eval/Plot");
        jB_Evaluate.setToolTipText("Evaluate Histogram for Selected Trace Measure and Plot.");
        jB_Evaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_EvaluateActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Evaluate, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 110, 30));

        jB_Delete_All.setToolTipText("Delete all graphics from hard disk!");
        jB_Delete_All.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Delete_All.setLabel("Delete All");
        jB_Delete_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Delete_AllActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Delete_All, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 110, 30));

        jB_Close.setToolTipText("Close this window.");
        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setLabel("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 110, 30));

        jL_Tangram_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_plot.gif")));
        getContentPane().add(jL_Tangram_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, -1, 30));

        jL_SelectedTraceMeasure.setText("Selected Trace Measure:");
        jL_SelectedTraceMeasure.setToolTipText("Selected Traffic Measures for histogram plot");
        jL_SelectedTraceMeasure.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_SelectedTraceMeasure.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        getContentPane().add(jL_SelectedTraceMeasure, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        jL_TraceMeasure.setText(" ");
        jL_TraceMeasure.setToolTipText("Selected Traffic Measures for histogram plot");
        jL_TraceMeasure.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jL_TraceMeasure.setFont(new java.awt.Font("Dialog", 1, 10));
        getContentPane().add(jL_TraceMeasure, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 345, 400, 20));

    }//GEN-END:initComponents

    private void jTF_HistSlotSizeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_HistSlotSizeFocusLost
        if( jTF_HistSlotSize.getText().length() > 0  )
        {
            if( T2functions.Is_not_number( jTF_HistSlotSize.getText(), 1, this, "Histogram Slot Size" ) != 0 ) 
            {
                jTF_HistSlotSize.setText( "" );
                return;
            }
            if( Float.parseFloat( jTF_HistSlotSize.getText() ) < 1 )
            {
                jTF_HistSlotSize.setText( "" );
                javax.swing.JOptionPane.showMessageDialog(this,"Slot Size must be bigger than 1");
                return;
            }
        }
    }//GEN-LAST:event_jTF_HistSlotSizeFocusLost

    private void jCB_WeibullDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_WeibullDistActionPerformed
        if( jCB_ExpDist.isSelected() || jCB_GammaDist.isSelected() || 
            jCB_GaussDist.isSelected() || jCB_LNormalDist.isSelected() ||
            jCB_ParetoDist.isSelected() || jCB_WeibullDist.isSelected() )           
        {
            jB_Evaluate.setEnabled( true );
            jCB_MSE.setEnabled( true );
        }
        else
        {
            jCB_MSE.setSelected( false );
            jCB_MSE.setEnabled( false );
        }
    }//GEN-LAST:event_jCB_WeibullDistActionPerformed

    private void jCB_ParetoDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_ParetoDistActionPerformed
        if( jCB_ExpDist.isSelected() || jCB_GammaDist.isSelected() || 
            jCB_GaussDist.isSelected() || jCB_LNormalDist.isSelected() ||
            jCB_ParetoDist.isSelected() || jCB_WeibullDist.isSelected() )           
        {
            jB_Evaluate.setEnabled( true );
            jCB_MSE.setEnabled( true );
        }
        else
        {
            jCB_MSE.setSelected( false );
            jCB_MSE.setEnabled( false );
        }
    }//GEN-LAST:event_jCB_ParetoDistActionPerformed

    private void jCB_GammaDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_GammaDistActionPerformed
        if( jCB_ExpDist.isSelected() || jCB_GammaDist.isSelected() || 
            jCB_GaussDist.isSelected() || jCB_LNormalDist.isSelected() ||
            jCB_ParetoDist.isSelected() || jCB_WeibullDist.isSelected() )           
        {
            jB_Evaluate.setEnabled( true );
            jCB_MSE.setEnabled( true );
        }
        else
        {
            jCB_MSE.setSelected( false );
            jCB_MSE.setEnabled( false );
        }
    }//GEN-LAST:event_jCB_GammaDistActionPerformed

    private void jCB_LNormalDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_LNormalDistActionPerformed
        if( jCB_ExpDist.isSelected() || jCB_GammaDist.isSelected() || 
            jCB_GaussDist.isSelected() || jCB_LNormalDist.isSelected() ||
            jCB_ParetoDist.isSelected() || jCB_WeibullDist.isSelected() )           
        {
            jB_Evaluate.setEnabled( true );
            jCB_MSE.setEnabled( true );
        }
        else
        {
            jCB_MSE.setSelected( false );
            jCB_MSE.setEnabled( false );
        }
    }//GEN-LAST:event_jCB_LNormalDistActionPerformed

    private void jCB_GaussDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_GaussDistActionPerformed
        if( jCB_ExpDist.isSelected() || jCB_GammaDist.isSelected() || 
            jCB_GaussDist.isSelected() || jCB_LNormalDist.isSelected() ||
            jCB_ParetoDist.isSelected() || jCB_WeibullDist.isSelected() )           
        {
            jB_Evaluate.setEnabled( true );
            jCB_MSE.setEnabled( true );
        }
        else
        {
            jCB_MSE.setSelected( false );
            jCB_MSE.setEnabled( false );
            jB_Evaluate.setEnabled( false );
        }
    }//GEN-LAST:event_jCB_GaussDistActionPerformed

    private void jCB_ExpDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_ExpDistActionPerformed
        if( jCB_ExpDist.isSelected() || jCB_GammaDist.isSelected() || 
            jCB_GaussDist.isSelected() || jCB_LNormalDist.isSelected() ||
            jCB_ParetoDist.isSelected() || jCB_WeibullDist.isSelected() )           
        {
            jB_Evaluate.setEnabled( true );
            jCB_MSE.setEnabled( true );
        }
        else
        {
            jCB_MSE.setSelected( false );
            jCB_MSE.setEnabled( false );
        }
    }//GEN-LAST:event_jCB_ExpDistActionPerformed
    
    private void jB_HistMseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_HistMseActionPerformed
//Implementar
    }//GEN-LAST:event_jB_HistMseActionPerformed
 
  private void jB_PropertiesActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PropertiesActionPerformed
    plotprop = new T2plotprop(this);
    plotprop.show();
  }//GEN-LAST:event_jB_PropertiesActionPerformed

  private void jB_EvaluateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_EvaluateActionPerformed
    
    boolean debug = true;
    
    if( jTF_HistSlotSize.getText().length() == 0 )
    {       
        javax.swing.JOptionPane.showMessageDialog(this,"Empty argument: Slot Size");
        return;
    }
    
    // --------- EVALUATE ----------
    
    String bin_directory = "";
    if( holder.bin_directory != null )
    {
        bin_directory = holder.bin_directory;
        if( ( bin_directory.length() > 0 ) && !bin_directory.endsWith( "/" )  ) 
            bin_directory += "/";        
    }
    
    java.util.Vector cmdpars = new java.util.Vector();         /* stores the command line arguments */
        
    cmdpars.add("bash");
    cmdpars.add("-c");

    String command = "";
    
    // The output will be generated in the same directory where the trace file is found 
    command = "pushd " + directory + ";";
    
    // Removing old evaluated files 
    command += "rm -f *skew* *eq* *offset* *stack* *mse* *.MSE.txt"
            +  " tmp* temp* *comp *dist *.pdf *.pmf *descrit* ;";
    
    //System.err.println( "\nBinary Directory: " + bin_directory );    
   
    // Running Delay Histogram

    command += bin_directory + "delay_histogram -t" 
               + (jCB_ExpDist.isSelected()?"e":"")
               + (jCB_GammaDist.isSelected()?"g":"")
               + (jCB_GaussDist.isSelected()?"n":"")
               + (jCB_LNormalDist.isSelected()?"l":"")
               + (jCB_ParetoDist.isSelected()?"p":"")
               + (jCB_WeibullDist.isSelected()?"w":"");
               
   if( filename.endsWith( ".delay_trace" ) )
       command += " -2 " + filename + " " + jTF_HistSlotSize.getText() 
               +  " > " + filename + ".descrit_loc.txt;";
   else if( filename.endsWith( ".band" ) || filename.endsWith( ".band.new" ) )
       command += " -1 " + filename + " " + jTF_HistSlotSize.getText() 
               +  " > " + filename + ".descrit_loc.txt;";

   // Running MSE
   if( jCB_MSE.isSelected() )
       command += bin_directory + "mse -"
               + (jCB_ExpDist.isSelected()?"e":"")
               + (jCB_GammaDist.isSelected()?"g":"")
               + (jCB_GaussDist.isSelected()?"n":"")
               + (jCB_LNormalDist.isSelected()?"l":"")
               + (jCB_ParetoDist.isSelected()?"p":"")
               + (jCB_WeibullDist.isSelected()?"w":"") 
               + " " + filename + ";";
               
    command += "rm -f tmp* temp_*;";
    
    // Returning to the original path 
    command += "popd;";

    if( debug )
        System.err.print( command );
    
    cmdpars.add(command);    
    int size = cmdpars.size();
    String [] parsarray = new String[size];
    cmdpars.copyInto(parsarray);

    try
    {
        Process measuresproc;
        measuresproc = Runtime.getRuntime().exec(parsarray);

        int retval2 = measuresproc.waitFor();
        if (retval2 == 255)
            javax.swing.JOptionPane.showMessageDialog(this,"Error");
    }
    catch(Exception e)
    {
        System.out.println("Exception running " + e.toString());
        System.out.println(cmdpars);
    }
    
    if( jCB_MSE.isSelected() )
    {
        try 
        {
            String line;
            java.io.FileReader     f
               = new java.io.FileReader (directory + "/" + filename + ".mse.out" );
            java.io.BufferedReader b  = new java.io.BufferedReader (f);
            jTA_Information.setText("");
            while ((line = b.readLine()) != null) 
            {
                jTA_Information.append( line + "\n");          
            }
        }
        catch (java.io.FileNotFoundException e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"File not found "+ directory + "/" + filename + ".mse.out  - " + e.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);                
        }
        catch (java.io.IOException ex) 
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    else
        jTA_Information.setText("MSE information is not evaluated");
    
    // --------- PLOT ----------
    
     String outputFile = filename;

     //Based on: [Flaviop 19/11/99] - Now comunicate through pipe
     try 
     {
         java.lang.Process gnuplot = Runtime.getRuntime().exec( "gnuplot -persist" );
         java.io.PrintWriter out = new java.io.PrintWriter( gnuplot.getOutputStream() );

         out.println( "set data style " + T2plotprop.datastyle );

         if (T2plotprop.xlog)
              out.println("set logscale x");
         if (T2plotprop.ylog)
              out.println("set logscale y");
         if (T2plotprop.xrange)
              out.println("set xrange[" + T2plotprop.xrange_min + ":" + T2plotprop.xrange_max + "]");
         if (T2plotprop.yrange)
              out.println("set yrange[" + T2plotprop.yrange_min + ":" + T2plotprop.yrange_max + "]");
         if (T2plotprop.grid)
              out.println("set grid");
         
         switch (T2plotprop.output) 
         {
             case 2: out.println("set term postscript\n");
                     outputFile = directory + "/GNUPlot." + filename + ".ps"  ;
                     out.println("set output '" + outputFile + "'");
                     break;
             case 3: out.println("set term tgif");
                     outputFile = directory + "/GNUPlot." + filename + ".obj"  ;
                     out.println("set output '" + outputFile + "'");
                     break;
             default: outputFile = "";
         }     

        java.io.File ioOutputFile = new java.io.File( outputFile );

        if (T2plotprop.output == 2 || T2plotprop.output == 3)
        {
        // the output file can be generated ? 
            try 
            {
                java.io.FileWriter fWriter = new java.io.FileWriter( outputFile );
                fWriter.close();
            }
            catch (Exception e)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"File " + outputFile + " could not be generated!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }  
        
        String line = "";
        
        if( filename.endsWith( ".delay_trace" ) )
        {
        if( jRB_Dist.isSelected() )
        {
            java.io.FileReader f;
            java.io.BufferedReader b;
            if( jCB_ExpDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".EXP.dist" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".EXP.dist  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_GammaDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".GAMMA.dist" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".GAMMA.dist  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_GaussDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".GAUSS.dist" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".GAUSS.dist  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_LNormalDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".LNORM.dist" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".LNORM.dist  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_ParetoDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".PARETO.dist" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".PARETO.dist  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_WeibullDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".WEIBULL.dist" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".WEIBULL.dist  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }            
        }
        else if( jRB_PMF.isSelected() )        
        {
            java.io.FileReader f;
            java.io.BufferedReader b;
            if( jCB_ExpDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".EXP.pdf" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".EXP.pdf  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_GammaDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".GAMMA.pdf" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".GAMMA.pdf  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_GaussDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".GAUSS.pdf" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".GAUSS.pdf  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_LNormalDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".LNORM.pdf" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".LNORM.pdf  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_ParetoDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".PARETO.pdf" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".PARETO.pdf  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_WeibullDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".WEIBULL.pdf" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".WEIBULL.pdf  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
        }
        else if( jRB_Comp.isSelected() )
        {
            java.io.FileReader f;
            java.io.BufferedReader b;
            if( jCB_ExpDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".EXP.comp" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".EXP.comp  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_GammaDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".GAMMA.comp" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".GAMMA.comp  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_GaussDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".GAUSS.comp" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".GAUSS.comp  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_LNormalDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".LNORM.comp" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".LNORM.comp  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_ParetoDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".PARETO.comp" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".PARETO.comp  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
            if( jCB_WeibullDist.isSelected() )
            {
                try
                {
                    f = new java.io.FileReader (directory + "/" + filename + ".WEIBULL.comp" );
                    b = new java.io.BufferedReader (f);
                    if( line.length() > 0 ) line += "," + b.readLine();
                    else line = b.readLine();
                }
                catch (java.io.FileNotFoundException e)
                {
                    System.err.println( directory + "/" + filename + ".WEIBULL.comp  not found!" );               
                }            
                catch (java.io.IOException ex) 
                {
                    javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }                             
            }
        }
        }
        else if( filename.endsWith( ".band" ) || filename.endsWith( ".band.new" ) )
        {
            if( jRB_Comp.isSelected() ) line = "'" + filename + ".comp'" ;
            else if( jRB_Dist.isSelected() ) line = "'" + filename + ".dist'" ;
            else if( jRB_PMF.isSelected() ) line = "'" + filename + ".pmf'" ;            
        }
        
        if( debug )
            System.err.println( "debug: " + "plot " + line );        
            
        out.println("plot " + line );               
        out.println("quit");
        out.flush();        
     }
     catch(java.io.IOException exception) 
     {
         javax.swing.JOptionPane.showMessageDialog(this,"GnuPlot could not be started!");
     }     
     
  }//GEN-LAST:event_jB_EvaluateActionPerformed

  private void jB_Delete_AllActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Delete_AllActionPerformed
    
    
    int retval = 
       javax.swing.JOptionPane.showConfirmDialog(this, "Delete all evaluated files?",null, javax.swing.JOptionPane.YES_NO_OPTION);
    if(retval != javax.swing.JOptionPane.YES_OPTION) return;

    jTA_Information.setText("");

    java.util.Vector cmdpars = new java.util.Vector();
        
    cmdpars.add("bash");
    cmdpars.add("-c");

    String command = "";

    // The output will be generated in the same directory where the trace file is found 
    command = "pushd " + directory + ";";
    
    // Removing evaluated files 
    command += "rm -f *skew* *eq* *offset* *stack* *mse* *.MSE.txt"
            +  " tmp* temp* *comp *dist *.pdf *.pmf *descrit* ;";
    
    // Returning to the original path 
    command += "popd;";

    //System.err.print( command );
    cmdpars.add(command);
        
    int size = cmdpars.size();
    String [] parsarray = new String[size];
    cmdpars.copyInto(parsarray);

    try
    {
        Process measuresproc;
        measuresproc = Runtime.getRuntime().exec(parsarray);

        int retval2 = measuresproc.waitFor();
        if (retval2 == 255)
            javax.swing.JOptionPane.showMessageDialog(this,"Error removing files");
    }
    catch(Exception e)
    {
        System.out.println("Exception running " + e.toString());
        System.out.println(cmdpars);
    }        
  }//GEN-LAST:event_jB_Delete_AllActionPerformed

  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed

    //-- Removes evaluated files
      
    java.util.Vector cmdpars = new java.util.Vector();
        
    cmdpars.add("bash");
    cmdpars.add("-c");

    String command = "";

    // The output will be generated in the same directory where the trace file is found 
    command = "pushd " + directory + ";";
    
    // Removing evaluated files 
    command += "rm -f *skew* *eq* *offset* *stack* *mse* *.MSE.txt"
            +  " tmp* temp* *comp *dist *.pdf *.pmf *descrit* ;";
    
    // Returning to the original path 
    command += "popd;";

    //System.err.print( command );
    cmdpars.add(command);
        
    int size = cmdpars.size();
    String [] parsarray = new String[size];
    cmdpars.copyInto(parsarray);

    try
    {
        Process measuresproc;
        measuresproc = Runtime.getRuntime().exec(parsarray);

        int retval2 = measuresproc.waitFor();
        if (retval2 == 255)
            javax.swing.JOptionPane.showMessageDialog(this,"Error removing files");
    }
    catch(Exception e)
    {
        System.out.println("Exception running " + e.toString());
        System.out.println(cmdpars);
    }        
    
    //-----
      
      holder.setEnabled( true );
      dispose();
  }//GEN-LAST:event_jB_CloseActionPerformed

  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CloseActionPerformed(null);
  }//GEN-LAST:event_exitForm

  private void setState(JComponent cmp , boolean state)
  // This function sets the setState of a Component Set recursively
  {
      int count = cmp.getComponentCount();
      for( int i = 0 ; i < count ; i++ ) {
          JComponent cur = (JComponent) cmp.getComponent( i );
          setState( (JComponent)cur , state );
          cur.setEnabled( state );
      }
  }
    private void initComponentsManual( String filename )
    {
        jL_TraceMeasure.setText( filename );
        // it is not working: jL_TraceMeasure.setToolTipText( filename );
        if( filename.endsWith( "band" ) || filename.endsWith( "band.new" ) )
        {            
            setState( (JComponent)jP_Plot , false );
            setState( (JComponent)jP_PlotSelection , true );
            jL_HistSlotSize.setEnabled( true );
            jTF_HistSlotSize.setEnabled( true );
            jB_Evaluate.setEnabled( true );
            jRB_Dist.setEnabled( false );
            jRB_Comp.setEnabled( false );
            jRB_PMF.setSelected( true );
        }        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Close;
    private javax.swing.JButton jB_Delete_All;
    private javax.swing.JButton jB_Evaluate;
    private javax.swing.JButton jB_Properties;
    private javax.swing.JCheckBox jCB_ExpDist;
    private javax.swing.JCheckBox jCB_GammaDist;
    private javax.swing.JCheckBox jCB_GaussDist;
    private javax.swing.JCheckBox jCB_LNormalDist;
    private javax.swing.JCheckBox jCB_MSE;
    private javax.swing.JCheckBox jCB_ParetoDist;
    private javax.swing.JCheckBox jCB_WeibullDist;
    private javax.swing.JLabel jL_HistSlotSize;
    private javax.swing.JLabel jL_Information;
    private javax.swing.JLabel jL_SelectedTraceMeasure;
    private javax.swing.JLabel jL_Tangram_Picture;
    private javax.swing.JLabel jL_TraceMeasure;
    private javax.swing.JPanel jP_Distribuition;
    private javax.swing.JPanel jP_Plot;
    private javax.swing.JPanel jP_PlotSelection;
    private javax.swing.JRadioButton jRB_Comp;
    private javax.swing.JRadioButton jRB_Dist;
    private javax.swing.JRadioButton jRB_PMF;
    private javax.swing.JScrollPane jSP_Information;
    private javax.swing.JTextArea jTA_Information;
    private javax.swing.JTextField jTF_HistSlotSize;
    private javax.swing.ButtonGroup jbG_PlotSelection;
    // End of variables declaration//GEN-END:variables
    private String filename , directory;
    private T2plot holder;
    private T2plotprop plotprop;
}
