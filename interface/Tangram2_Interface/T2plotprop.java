/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2plotprop extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2plotprop(T2plot holder) {
    plot=holder;
    plot.setEnabled( false );
    initComponents ();
    initComponentsManual ();
    pack ();
  }
  
  public T2plotprop(T2histogram_mse holder) {
    histogram = holder;
    histogram.setEnabled( false );
    initComponents ();
    initComponentsManual ();
    pack ();
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
private void initComponents () {//GEN-BEGIN:initComponents
    jP_Plot_Properties = new javax.swing.JPanel ();
    jCB_X_log_scale = new javax.swing.JCheckBox ();
    jCB_Y_log_scale = new javax.swing.JCheckBox ();
    jCB_Grid = new javax.swing.JCheckBox ();
    jCB_X_range = new javax.swing.JCheckBox ();
    jCB_Y_range = new javax.swing.JCheckBox ();
    jTF_X_range_min = new javax.swing.JTextField ();
    jTF_X_range_max = new javax.swing.JTextField ();
    jTF_Y_range_min = new javax.swing.JTextField ();
    jTF_Y_range_max = new javax.swing.JTextField ();
    jL_X_two_points = new javax.swing.JLabel ();
    jL_Y_two_points = new javax.swing.JLabel ();
    jL_Output = new javax.swing.JLabel ();
    jP_Output_Options = new javax.swing.JPanel ();
    jTB_Output_Screen = new javax.swing.JToggleButton ();
    jTB_Output_PS_File = new javax.swing.JToggleButton ();
    jTB_Output_Tgif_File = new javax.swing.JToggleButton ();
    jL_Data_Style = new javax.swing.JLabel ();
    jCB_Data_Style = new javax.swing.JComboBox ();
    jB_Cancel = new javax.swing.JButton ();
    jB_Ok = new javax.swing.JButton ();
    jPanel1 = new javax.swing.JPanel ();
    getContentPane ().setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
    setTitle ("Tangram II [Plot Properties]");
    addWindowListener (new java.awt.event.WindowAdapter () {
        public void windowClosing (java.awt.event.WindowEvent evt) {
            exitForm (evt);
        }
    }
    );

    jP_Plot_Properties.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
    jP_Plot_Properties.setBorder (new javax.swing.border.TitledBorder(
    new javax.swing.border.EtchedBorder(), "Plot Properties", 1, 2,
    new java.awt.Font ("Dialog", 1, 10)));

      jCB_X_log_scale.setFont (new java.awt.Font ("Dialog", 1, 10));
      jCB_X_log_scale.setText ("X log scale");
  
      jP_Plot_Properties.add (jCB_X_log_scale, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 15, 90, 20));
  
      jCB_Y_log_scale.setFont (new java.awt.Font ("Dialog", 1, 10));
      jCB_Y_log_scale.setText ("Y log scale");
  
      jP_Plot_Properties.add (jCB_Y_log_scale, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 45, -1, -1));
  
      jCB_Grid.setFont (new java.awt.Font ("Dialog", 1, 10));
      jCB_Grid.setText ("Grid");
  
      jP_Plot_Properties.add (jCB_Grid, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 75, -1, -1));
  
      jCB_X_range.setFont (new java.awt.Font ("Dialog", 1, 10));
      jCB_X_range.setText ("X range");
      jCB_X_range.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
              jCB_X_rangeActionPerformed (evt);
          }
      }
      );
  
      jP_Plot_Properties.add (jCB_X_range, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 105, -1, -1));
  
      jCB_Y_range.setFont (new java.awt.Font ("Dialog", 1, 10));
      jCB_Y_range.setText ("Y range");
      jCB_Y_range.addActionListener (new java.awt.event.ActionListener () {
          public void actionPerformed (java.awt.event.ActionEvent evt) {
              jCB_Y_rangeActionPerformed (evt);
          }
      }
      );
  
      jP_Plot_Properties.add (jCB_Y_range, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 135, -1, -1));
  
      jTF_X_range_min.setEnabled (false);
  
      jP_Plot_Properties.add (jTF_X_range_min, new org.netbeans.lib.awtextra.AbsoluteConstraints (100, 105, 50, 20));
  
      jTF_X_range_max.setEnabled (false);
  
      jP_Plot_Properties.add (jTF_X_range_max, new org.netbeans.lib.awtextra.AbsoluteConstraints (165, 105, 50, 20));
  
      jTF_Y_range_min.setEnabled (false);
  
      jP_Plot_Properties.add (jTF_Y_range_min, new org.netbeans.lib.awtextra.AbsoluteConstraints (100, 135, 50, 20));
  
      jTF_Y_range_max.setEnabled (false);
  
      jP_Plot_Properties.add (jTF_Y_range_max, new org.netbeans.lib.awtextra.AbsoluteConstraints (165, 135, 50, 20));
  
      jL_X_two_points.setText (":");
      jL_X_two_points.setForeground (java.awt.Color.black);
      jL_X_two_points.setFont (new java.awt.Font ("Dialog", 1, 10));
      jL_X_two_points.setEnabled (false);
  
      jP_Plot_Properties.add (jL_X_two_points, new org.netbeans.lib.awtextra.AbsoluteConstraints (156, 105, -1, -1));
  
      jL_Y_two_points.setText (":");
      jL_Y_two_points.setForeground (java.awt.Color.black);
      jL_Y_two_points.setFont (new java.awt.Font ("Dialog", 1, 10));
      jL_Y_two_points.setEnabled (false);
  
      jP_Plot_Properties.add (jL_Y_two_points, new org.netbeans.lib.awtextra.AbsoluteConstraints (156, 135, -1, -1));
  
      jL_Output.setText ("Output:");
      jL_Output.setForeground (java.awt.Color.black);
      jL_Output.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Plot_Properties.add (jL_Output, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 215, -1, -1));
  
      jP_Output_Options.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());
      jP_Output_Options.setToolTipText ("Set GNUPlot output");
  
        jTB_Output_Screen.setSelected (true);
        jTB_Output_Screen.setFont (new java.awt.Font ("Dialog", 1, 10));
        jTB_Output_Screen.setText ("screen");
        jTB_Output_Screen.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                jTB_Output_ScreenActionPerformed (evt);
            }
        }
        );
    
        jP_Output_Options.add (jTB_Output_Screen, new org.netbeans.lib.awtextra.AbsoluteConstraints (0, 0, 90, 20));
    
        jTB_Output_PS_File.setFont (new java.awt.Font ("Dialog", 1, 10));
        jTB_Output_PS_File.setText ("PS file");
        jTB_Output_PS_File.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                jTB_Output_PS_FileActionPerformed (evt);
            }
        }
        );
    
        jP_Output_Options.add (jTB_Output_PS_File, new org.netbeans.lib.awtextra.AbsoluteConstraints (90, 0, 90, 20));
    
        jTB_Output_Tgif_File.setFont (new java.awt.Font ("Dialog", 1, 10));
        jTB_Output_Tgif_File.setText ("Tgif file");
        jTB_Output_Tgif_File.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                jTB_Output_Tgif_FileActionPerformed (evt);
            }
        }
        );
    
        jP_Output_Options.add (jTB_Output_Tgif_File, new org.netbeans.lib.awtextra.AbsoluteConstraints (180, 0, 90, 20));
    
      jP_Plot_Properties.add (jP_Output_Options, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 230, 270, 20));
  
      jL_Data_Style.setText ("Data Style:");
      jL_Data_Style.setForeground (java.awt.Color.black);
      jL_Data_Style.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Plot_Properties.add (jL_Data_Style, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 165, -1, -1));
  
      jCB_Data_Style.setToolTipText ("Set GNUPlot data style");
      jCB_Data_Style.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jP_Plot_Properties.add (jCB_Data_Style, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 180, 270, 20));
  

    getContentPane ().add (jP_Plot_Properties, new org.netbeans.lib.awtextra.AbsoluteConstraints (5, 5, 295, 260));

    jB_Cancel.setToolTipText ("Cancel configuration");
    jB_Cancel.setFont (new java.awt.Font ("Dialog", 1, 10));
    jB_Cancel.setText ("Cancel");
    jB_Cancel.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jB_CancelActionPerformed (evt);
        }
    }
    );


    getContentPane ().add (jB_Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints (310, 50, 110, 30));

    jB_Ok.setToolTipText ("Set configuration");
    jB_Ok.setFont (new java.awt.Font ("Dialog", 1, 10));
    jB_Ok.setText ("Ok");
    jB_Ok.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jB_OkActionPerformed (evt);
        }
    }
    );


    getContentPane ().add (jB_Ok, new org.netbeans.lib.awtextra.AbsoluteConstraints (310, 10, 110, 30));



    getContentPane ().add (jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints (430, 270, 1, 1));

}//GEN-END:initComponents

  private void jTB_Output_PS_FileActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_Output_PS_FileActionPerformed
    // Add your handling code here:



  }//GEN-LAST:event_jTB_Output_PS_FileActionPerformed

  private void jTB_Output_Tgif_FileActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_Output_Tgif_FileActionPerformed
    // Add your handling code here:


  }//GEN-LAST:event_jTB_Output_Tgif_FileActionPerformed

  private void jTB_Output_ScreenActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_Output_ScreenActionPerformed
    // Add your handling code here:

  }//GEN-LAST:event_jTB_Output_ScreenActionPerformed

  //initComponents Manual
  private void initComponentsManual(){


    group1 = new javax.swing.ButtonGroup();
    group1.add(jTB_Output_Screen);
    group1.add(jTB_Output_PS_File);
    group1.add(jTB_Output_Tgif_File);

    jCB_X_log_scale.setSelected(xlog);
    jCB_Y_log_scale.setSelected(ylog);
    jCB_Grid.setSelected(grid);
    if (xrange){
      jCB_X_range.setSelected(true);
      jTF_X_range_min.setText(xrange_min);
      jTF_X_range_max.setText(xrange_max);
      jTF_X_range_min.setEnabled(true);
      jTF_X_range_max.setEnabled(true);
      jL_X_two_points.setEnabled(true);
    }
    if (yrange){
      jCB_Y_range.setSelected(true);
      jTF_Y_range_min.setText(yrange_min);
      jTF_Y_range_max.setText(yrange_max);
      jTF_Y_range_min.setEnabled(true);
      jTF_Y_range_max.setEnabled(true);
      jL_Y_two_points.setEnabled(true);
    }
    if (output==1){
      jTB_Output_Screen.setSelected(true);
    }
    else {
      if (output==2){
        jTB_Output_PS_File.setSelected(true);
      }
      else {
        jTB_Output_Tgif_File.setSelected(true);
      }
    }

    //Arrange Combobox
    jCB_Data_Style.addItem("lines");
    jCB_Data_Style.addItem("linespoints");
    jCB_Data_Style.addItem("points");
    jCB_Data_Style.addItem("impulses");
    jCB_Data_Style.addItem("steps");
    jCB_Data_Style.addItem("histeps");
    jCB_Data_Style.setSelectedItem(datastyle);

  }

  private void jCB_Y_rangeActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_Y_rangeActionPerformed
    jTF_Y_range_min.setEnabled(jCB_Y_range.isSelected());
    jTF_Y_range_max.setEnabled(jCB_Y_range.isSelected());
    jL_Y_two_points.setEnabled(jCB_Y_range.isSelected());
  }//GEN-LAST:event_jCB_Y_rangeActionPerformed

  private void jCB_X_rangeActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_X_rangeActionPerformed
    jTF_X_range_min.setEnabled(jCB_X_range.isSelected());
    jTF_X_range_max.setEnabled(jCB_X_range.isSelected());
    jL_X_two_points.setEnabled(jCB_X_range.isSelected());
  }//GEN-LAST:event_jCB_X_rangeActionPerformed

  private void jB_OkActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_OkActionPerformed


    if( plot != null )
    if( plot.modelenv != null )
    {

      // **************************************************************************************

      // the following lines are here just to mantain compatibility with previous versions

      plot.modelenv.xlog=jCB_X_log_scale.isSelected();
      plot.modelenv.ylog=jCB_Y_log_scale.isSelected();
      plot.modelenv.grid=jCB_Grid.isSelected();
      if (jCB_X_range.isSelected()){
        plot.modelenv.xrange=true;
        plot.modelenv.xrange_min=jTF_X_range_min.getText();
        plot.modelenv.xrange_max=jTF_X_range_max.getText();
      }
      else{
        plot.modelenv.xrange=false;
      }
      if (jCB_Y_range.isSelected()){
        plot.modelenv.yrange=true;
        plot.modelenv.yrange_min=jTF_Y_range_min.getText();
        plot.modelenv.yrange_max=jTF_Y_range_max.getText();
      }
      else{
        plot.modelenv.yrange=false;
      }
      if (jTB_Output_Screen.isSelected()){
        plot.modelenv.output=1;
      }
      else {
        if (jTB_Output_PS_File.isSelected()){
           plot.modelenv.output=2;
        }
        else {
          plot.modelenv.output=3;
        }
      }
      plot.modelenv.datastyle = (jCB_Data_Style.getSelectedItem()).toString();
      // plot.setEnabled(true);


      // **************************************************************************************

    }


    xlog=jCB_X_log_scale.isSelected();
    ylog=jCB_Y_log_scale.isSelected();
    grid=jCB_Grid.isSelected();
    if (jCB_X_range.isSelected()){
      xrange=true;
      xrange_min=jTF_X_range_min.getText();
      xrange_max=jTF_X_range_max.getText();
    }
    else{
      xrange=false;
    }
    if (jCB_Y_range.isSelected()){
      yrange=true;
      yrange_min=jTF_Y_range_min.getText();
      yrange_max=jTF_Y_range_max.getText();
    }
    else{
      yrange=false;
    }
    if (jTB_Output_Screen.isSelected()){
      output=1;
    }
    else {
      if (jTB_Output_PS_File.isSelected()){
         output=2;
      }
      else {
        output=3;
      }
    }
    datastyle = (jCB_Data_Style.getSelectedItem()).toString();
    
    if( plot != null ) plot.setEnabled(true);
    if( histogram != null ) histogram.setEnabled( true );
    dispose();
  }//GEN-LAST:event_jB_OkActionPerformed

  private void jB_CancelActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CancelActionPerformed
    if( plot != null ) plot.setEnabled(true);
    if( histogram != null ) histogram.setEnabled( true );
    dispose();
  }//GEN-LAST:event_jB_CancelActionPerformed
  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CancelActionPerformed(null);
  }//GEN-LAST:event_exitForm

// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel jP_Plot_Properties;
private javax.swing.JCheckBox jCB_X_log_scale;
private javax.swing.JCheckBox jCB_Y_log_scale;
private javax.swing.JCheckBox jCB_Grid;
private javax.swing.JCheckBox jCB_X_range;
private javax.swing.JCheckBox jCB_Y_range;
private javax.swing.JTextField jTF_X_range_min;
private javax.swing.JTextField jTF_X_range_max;
private javax.swing.JTextField jTF_Y_range_min;
private javax.swing.JTextField jTF_Y_range_max;
private javax.swing.JLabel jL_X_two_points;
private javax.swing.JLabel jL_Y_two_points;
private javax.swing.JLabel jL_Output;
private javax.swing.JPanel jP_Output_Options;
private javax.swing.JToggleButton jTB_Output_Screen;
private javax.swing.JToggleButton jTB_Output_PS_File;
private javax.swing.JToggleButton jTB_Output_Tgif_File;
private javax.swing.JLabel jL_Data_Style;
private javax.swing.JComboBox jCB_Data_Style;
private javax.swing.JButton jB_Cancel;
private javax.swing.JButton jB_Ok;
private javax.swing.JPanel jPanel1;
// End of variables declaration//GEN-END:variables

private javax.swing.ButtonGroup group1;
public T2plot plot;
private T2histogram_mse histogram;

 // public class plotpropargs extends Object {

    //plot properties - future save it in a file
    public static boolean xlog=false,ylog=false,grid=false;
    public static boolean xrange=false, yrange=false;
    public static String xrange_min,xrange_max;
    public static String yrange_min,yrange_max, datastyle = "lines";
    public static int output=1;

 // };

// End of variables declaration

}


  /*  old version (1.8 packet) of initComponentsManual()

    group1 = new javax.swing.ButtonGroup();
    group1.add(jTB_Output_Screen);
    group1.add(jTB_Output_PS_File);
    group1.add(jTB_Output_Tgif_File);

    jCB_X_log_scale.setSelected(plot.modelenv.xlog);
    jCB_Y_log_scale.setSelected(plot.modelenv.ylog);
    jCB_Grid.setSelected(plot.modelenv.grid);
    if (plot.modelenv.xrange){
      jCB_X_range.setSelected(true);
      jTF_X_range_min.setText(plot.modelenv.xrange_min);
      jTF_X_range_max.setText(plot.modelenv.xrange_max);
      jTF_X_range_min.setEnabled(true);
      jTF_X_range_max.setEnabled(true);
      jL_X_two_points.setEnabled(true);
    }
    if (plot.modelenv.yrange){
      jCB_Y_range.setSelected(true);
      jTF_Y_range_min.setText(plot.modelenv.yrange_min);
      jTF_Y_range_max.setText(plot.modelenv.yrange_max);
      jTF_Y_range_min.setEnabled(true);
      jTF_Y_range_max.setEnabled(true);
      jL_Y_two_points.setEnabled(true);
    }
    if (plot.modelenv.output==1){
      jTB_Output_Screen.setSelected(true);
    }
    else {
      if (plot.modelenv.output==2){
        jTB_Output_PS_File.setSelected(true);
      }
      else {
        jTB_Output_Tgif_File.setSelected(true);
      }
    }

    //Arrange Combobox
    jCB_Data_Style.addItem("lines");
    jCB_Data_Style.addItem("linespoints");
    jCB_Data_Style.addItem("points");
    jCB_Data_Style.addItem("impulses");
    jCB_Data_Style.addItem("steps");
    jCB_Data_Style.addItem("histeps");
    jCB_Data_Style.setSelectedItem(plot.modelenv.datastyle);
   */

