/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * T2MTKHmmImportFromTangram.java
 *
 * Created on May 19, 2009, 9:17:10 PM
 */

package Tangram2;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.ListModel;

/**
 *
 * @author balves
 */
public class T2MTKHierarchicalHmmImportFromTangram extends javax.swing.JFrame {

    /** Creates new form T2MTKHmmImportFromTangram */
    public T2MTKHierarchicalHmmImportFromTangram() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tangram II");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tangram-II State Variables"));

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Upper-Level Model Variables"));

        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText(">>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select State Variables from Model");

        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Lower-Level Model Variables"));

        jScrollPane3.setViewportView(jList3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton4.setText(">>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("<<");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton4)
                                .addComponent(jButton5))
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if(jList2.getModel().getSize() == 0 || jList3.getModel().getSize() == 0){
            T2MTKCommon.errorMessage("", "You must select at least one Tangram-II state variable for the upper-level model, and one for the lower-level model.");
        }else{
            String obj = T2MTKMain.modelType;
            T2MTKMessages out = null;
            T2MTKCommon.createCmds();
            

            T2MTKCommon.addCmd(obj+" = new "+obj+"()");
            String states = "\"";
            for(int i = 0;i<JList2Model.getSize();i++){
                states += JList2Model.getElementAt(i)+"\", \"";
            }
            for(int i = 0;i<JList3Model.getSize();i++){
                states += JList3Model.getElementAt(i)+"\", \"";
            }
            states = states.substring(0, states.length()-3);
            T2MTKCommon.addCmd(obj+".import_from_tangram(\""+currdir+currmodel+".obj\", "+JList2Model.getSize()+", "+JList3Model.getSize()+", "+states+")");
             importLine = obj+".import_from_tangram(\""+currdir+currmodel+".obj\", "+JList2Model.getSize()+", "+JList3Model.getSize()+", "+states+")";
            T2MTKCommon.addCmd(obj+".save(\""+currdir+currmodel+".HMM.parameters\", \"all\")");
            out = T2MTKCommon.exec();
            if(!out.getError().equals("")){
                T2MTKCommon.errorMessage("importing model", out.getError());
            }else{
                if(!out.getOut().equals("")){
                    T2MTKCommon.infoMessage("Importing From Model", out.getOut());
                }
                T2MTKHierarchicalHmmReadForm readForm = new T2MTKHierarchicalHmmReadForm();
                readForm.setVisible(true);
                this.dispose();
            }
            
            //Creating needed files for View Matrix

            BufferedReader in = null;
            File stateVarsFile = new File(currdir + currmodel + ".vstat");
            List<String> state_vars = new LinkedList<String>();
            try {
                in = new BufferedReader(new FileReader(stateVarsFile));
                String state = "";
                while ((state = in.readLine()) != null) {
                    state_vars.add(new String(state));
                }
            } catch (IOException ex) {
                T2MTKCommon.errorMessage("", "Cannot read state variables from file: "+stateVarsFile.getName()+". "+ex.getMessage());
            }

            //ListModel JList1Model = jList1.getModel();
            List<Integer> hiddenPosition = new LinkedList<Integer>();
            List<Integer> SymbolPosition = new LinkedList<Integer>();
            PrintWriter vstatHidStFile = null;
            PrintWriter vstatSymbolsFile = null;
            try {
                vstatHidStFile = new PrintWriter(new FileWriter(new File(currdir + currmodel + ".HMM.hidden_st.vstat")), true);
                vstatSymbolsFile = new PrintWriter(new FileWriter(new File(currdir + currmodel + ".HMM.internal_st.vstat")), true);
            } catch (IOException ex) {
                T2MTKCommon.errorMessage("", "Error writing state vars file. "+ex.getMessage());
            }

       
            for(int j=0;j<state_vars.size();j++){
                if(JList2Model.contains(state_vars.get(j))){
                    hiddenPosition.add(j);
                    vstatHidStFile.println(state_vars.get(j));

                }
            }
            vstatHidStFile.close();
            for(int j=0;j<state_vars.size();j++){
                if(JList3Model.contains(state_vars.get(j))){
                    SymbolPosition.add(j);
                    vstatSymbolsFile.println(state_vars.get(j));

                }
            }
            vstatSymbolsFile.close();

            try {
                BufferedReader statesFile = new BufferedReader(new FileReader(new File(currdir + currmodel + ".states")));
                PrintWriter newHidStStatesFile = new PrintWriter(new FileWriter(new File(currdir + currmodel + ".HMM.hidden_st.states")),true);
                PrintWriter newSymbolsStatesFile = new PrintWriter(new FileWriter(new File(currdir + currmodel + ".HMM.internal_st.states")),true);
                int hiddenState = 1;
                int SymbolState = 1;
                List<String> hidStPermutations = new LinkedList<String>();
                List<String> symbolsPermutations = new LinkedList<String>();
                while(statesFile.ready()){

                    StringTokenizer st = new StringTokenizer(statesFile.readLine(), "(");
                    String stateId = st.nextToken();
                    String permutation = st.nextToken();
                    permutation = permutation.substring(0,permutation.indexOf(")"));
                    st = new StringTokenizer(permutation,",");
                    String permHidStOut = "";
                    String permSymbolsOut = "";
                    int statePos = 0;
                    while(st.hasMoreTokens()){
                        String stateValue = st.nextToken();
                        if(hiddenPosition.contains(statePos)){
                            permHidStOut += stateValue+",";
                        }
                        if(SymbolPosition.contains(statePos)){
                            permSymbolsOut += stateValue+",";
                        }
                        statePos++;

                    }
                    permHidStOut = permHidStOut.substring(0,permHidStOut.length()-1);
                    permSymbolsOut = permSymbolsOut.substring(0,permSymbolsOut.length()-1);
                    if(!hidStPermutations.contains(permHidStOut)){
                        hidStPermutations.add(permHidStOut);
                        newHidStStatesFile.println(hiddenState+" ("+permHidStOut+")");
                        hiddenState++;
                    }
                    if(!symbolsPermutations.contains(permSymbolsOut)){
                        symbolsPermutations.add(permSymbolsOut);
                        newSymbolsStatesFile.println(SymbolState+" ("+permSymbolsOut+")");
                        SymbolState++;
                    }


                }

                newHidStStatesFile.close();
                newSymbolsStatesFile.close();

            } catch (FileNotFoundException ex) {
                T2MTKCommon.errorMessage("", "Error reading "+currmodel+".states file. "+ex.getMessage());
            } catch (IOException ex) {
                T2MTKCommon.errorMessage("", "Error reading "+currmodel+".states file. "+ex.getMessage());
            }


            
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        BufferedReader in = null;
        File stateVarsFile = new File(currdir + currmodel + ".vstat");

        try {
            in = new BufferedReader(new FileReader(stateVarsFile));
            
        } catch (IOException ex) {
            T2MTKCommon.errorMessage("", "Cannot read state variables from file: "+stateVarsFile.getName()+". "+ex.getMessage());
        }
        List<String> state_vars = new LinkedList<String>();
        String state = "";

        int i =0;
        try {
            while ((state = in.readLine()) != null) {
                state_vars.add(new String(state));
            }
        } catch (IOException ex) {
            T2MTKCommon.errorMessage("", "Cannot read state variables from file: "+stateVarsFile.getName()+". "+ex.getMessage());
        }
        if(state_vars != null){
           jList1.setListData(state_vars.toArray());
        }

    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        Object[] values = jList1.getSelectedValues();
        for(int i = 0;i<jList1.getSelectedIndices().length;i++){
            JList2Model.addElement(values[i].toString());
        }

        jList2.setModel(JList2Model);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        //TODO bruno: Corrigir a remoção múltipla.

        Object[] values = jList2.getSelectedValues();
        for(int i = 0;i<jList2.getSelectedIndices().length;i++){
            JList2Model.removeElement(values[i].toString());
        }
        jList2.setModel(JList2Model);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Object[] values = jList1.getSelectedValues();
        for(int i = 0;i<jList1.getSelectedIndices().length;i++){
            JList3Model.addElement(values[i].toString());
        }

        jList3.setModel(JList3Model);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //TODO bruno: Corrigir a remoção múltipla.

        Object[] values = jList3.getSelectedValues();
        for(int i = 0;i<jList3.getSelectedIndices().length;i++){
            JList3Model.removeElement(values[i].toString());
        }
        jList3.setModel(JList3Model);
    }//GEN-LAST:event_jButton5ActionPerformed



    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new T2MTKHierarchicalHmmImportFromTangram().setVisible(true);
            }
        });
    }

    private String currdir = T2MTKCommon.currdir;
    private String currmodel = T2MTKCommon.currmodel;
    private DefaultListModel JList2Model = new DefaultListModel();
    private DefaultListModel JList3Model = new DefaultListModel();
    public static String importLine;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

}
