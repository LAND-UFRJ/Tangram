/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

public class T2Analytical_Transient_PP_ESPA_Direct extends javax.swing.JPanel {

  /** Initializes the Form */
  public T2Analytical_Transient_PP_ESPA_Direct(T2modelenv ModelEnv) {
    modelenv = ModelEnv;
    initComponents ();
    initComponentsManual ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
private void initComponents () {//GEN-BEGIN:initComponents
    jPanel1 = new javax.swing.JPanel ();
    jLabel1 = new javax.swing.JLabel ();
    jTB_State_Reward = new javax.swing.JToggleButton ();
    jLabel2 = new javax.swing.JLabel ();
    jTB_Set_Reward = new javax.swing.JToggleButton ();
    jLabel3 = new javax.swing.JLabel ();
    jTB_Expected_Value = new javax.swing.JToggleButton ();
    jLabel5 = new javax.swing.JLabel ();
    jB_File_Chooser = new javax.swing.JButton ();
    jL_State_Variable = new javax.swing.JLabel ();
    jTF_State_Var = new javax.swing.JTextField ();
    jPanel2 = new javax.swing.JPanel ();
    setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());

    jPanel1.setLayout (new org.netbeans.lib.awtextra.AbsoluteLayout ());

      jLabel1.setText ("Measures of Interest");
      jLabel1.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jPanel1.add (jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 10, -1, -1));
  
      jTB_State_Reward.setSelected (true);
  
      jPanel1.add (jTB_State_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints (37, 30, 15, 15));
  
      jLabel2.setText ("State Probability");
      jLabel2.setForeground (java.awt.Color.black);
      jLabel2.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jPanel1.add (jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints (57, 30, -1, 15));
  
  
      jPanel1.add (jTB_Set_Reward, new org.netbeans.lib.awtextra.AbsoluteConstraints (37, 55, 15, 15));
  
      jLabel3.setText ("Set Probability");
      jLabel3.setForeground (java.awt.Color.black);
      jLabel3.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jPanel1.add (jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints (57, 55, -1, 15));
  
      jTB_Expected_Value.addChangeListener (new javax.swing.event.ChangeListener () {
          public void stateChanged (javax.swing.event.ChangeEvent evt) {
              jTB_Expected_ValueStateChanged (evt);
          }
      }
      );
  
      jPanel1.add (jTB_Expected_Value, new org.netbeans.lib.awtextra.AbsoluteConstraints (37, 80, 15, 15));
  
      jLabel5.setText ("Expected Value");
      jLabel5.setForeground (java.awt.Color.black);
      jLabel5.setFont (new java.awt.Font ("Dialog", 1, 10));
  
      jPanel1.add (jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints (57, 80, -1, 15));
  

    add (jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints (10, 460, 520, 100));

    jB_File_Chooser.setText ("...");
    jB_File_Chooser.setEnabled (false);
    jB_File_Chooser.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
            jB_File_ChooserActionPerformed (evt);
        }
    }
    );


    add (jB_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints (500, 570, 22, 20));

    jL_State_Variable.setText ("State Variable");
    jL_State_Variable.setFont (new java.awt.Font ("Dialog", 1, 10));
    jL_State_Variable.setEnabled (false);


    add (jL_State_Variable, new org.netbeans.lib.awtextra.AbsoluteConstraints (20, 570, -1, 20));

    jTF_State_Var.setEnabled (false);


    add (jTF_State_Var, new org.netbeans.lib.awtextra.AbsoluteConstraints (130, 570, 360, 20));



    add (jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints (510, 600, 20, 10));

}//GEN-END:initComponents


  private void jTB_Expected_ValueStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_Expected_ValueStateChanged
    boolean state = jTB_Expected_Value.isSelected();
    jL_State_Variable.setEnabled(state);
    jTF_State_Var.setEnabled(state);
    jB_File_Chooser.setEnabled(state);
  }//GEN-LAST:event_jTB_Expected_ValueStateChanged

  private void jB_File_ChooserActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_File_ChooserActionPerformed
    if ( fchooser.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION )
      jTF_State_Var.setText( fchooser.getSelectedFile().getName().substring(new String(modelenv.curmodel).length()+13) );
  }//GEN-LAST:event_jB_File_ChooserActionPerformed

  private void initComponentsManual ()
  {
    fchooser  = new javax.swing.JFileChooser();
    objFilter = new ExampleFileFilterEx(0, modelenv.curmodel, new String[] {".rate_reward."}, ".expr", "Rate reward files");
    fchooser.addChoosableFileFilter(objFilter);
    fchooser.setFileFilter( objFilter );
    fchooser.setDialogTitle("Choose Reward File");
    fchooser.setCurrentDirectory( new java.io.File (modelenv.curdir));
    probint = new T2Analytical_Transient_Probability_and_Intervals(2);
    add(probint, new org.netbeans.lib.awtextra.AbsoluteConstraints (1, 1, 528, 230));

    partition = new T2Matrix_Blocks_Manager(modelenv.curdir, modelenv.curmodel);
    add(partition, new org.netbeans.lib.awtextra.AbsoluteConstraints (40, 241, -1, -1));

    javax.swing.ButtonGroup group = new javax.swing.ButtonGroup();
    group.add(jTB_State_Reward);
    group.add(jTB_Set_Reward);
    group.add(jTB_Expected_Value);


  }

  public String Get_Method_Name()
  {
    return "Direct";
  }

  public void Evaluate()
  {



    // System.out.println("Evaluating ESPA Direct!");

    String command;

    String erlang_stages    = probint.Get_Erlang_Stages();
    String num_of_subinterv = probint.Get_Number_of_Points();
    String final_time       = probint.Get_Final_Time();

    int measure = 0;

    if (jTB_State_Reward.isSelected()) measure = 1;
    else if (jTB_Set_Reward.isSelected()) measure = 2;
    else if (jTB_Expected_Value.isSelected()) measure = 3;

    String state_var =  jTF_State_Var.getText();

    if (probint.Is_some_field_missing_and_get_precision( modelenv.curmodel ) == "999")
    {
        return;
    }

    if (!partition.validateBlocks())
    {
        return;
    }



    if (erlang_stages.trim().compareTo("") == 0 )
    {
      javax.swing.JOptionPane.showMessageDialog(this,"Erlang stages is empty!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    if (num_of_subinterv.trim().compareTo("") == 0 )
    {
      javax.swing.JOptionPane.showMessageDialog(this,"Number of points is empty!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    if (final_time.trim().compareTo("") == 0 )
    {
      javax.swing.JOptionPane.showMessageDialog(this,"Final time is empty!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    if (measure == 3 )
    {
      if (state_var.trim().compareTo("") == 0)
      {
        javax.swing.JOptionPane.showMessageDialog(this,"State variable not specified!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
      }
      else
      {
        /* Now, we must verify if the file indicated by "state variable" exists. */

       java.io.File state_var_file = new java.io.File(modelenv.curmodel + ".rate_reward."+ state_var);
       if (!(state_var_file.exists())) {
         javax.swing.JOptionPane.showMessageDialog(this,"File " + modelenv.curmodel + ".rate_reward." + state_var + " doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         return;
       }
      }
    }
    else
    {
      state_var = "";
    }

    /* Finally, we should write the output file (curmodel.int_direct), and then execute the command line. */


    /* creating the .int_direct file */
    try {
           String last_token;
           java.io.FileWriter     file   = new java.io.FileWriter( modelenv.curdir + "/" +modelenv.curmodel+".int_direct" );
           java.io.BufferedWriter buffer = new java.io.BufferedWriter( file);

           buffer.write( num_of_subinterv + "\n");
           buffer.write( final_time + "\n");

           buffer.close();
    }
    catch (Exception e) {
      javax.swing.JOptionPane.showMessageDialog(this,"Can't create the file "+ modelenv.curmodel+".int_direct"+ "\nError -- "+e.toString(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      return;
    }

    command = "solv "  + modelenv.curmodel + " 15 " + erlang_stages + " " + measure + " " + state_var;

    // System.out.println(command);

    modelenv.analytical.setEnabled(false);
    status = new T2status(modelenv.analytical, "Solver Status", "Solv is running", command, 0 ,(modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen));
    status.show();
    status.start();

    /*
    try {
      Process solv = Runtime.getRuntime().exec( command );
      threadCapOut.takeoutput_process(solv, (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen), Get_Method_Name(), modelenv.analytical );
      new threadCapOut( solv.getErrorStream(), (modelenv.outputdevice ? modelenv.fileout : modelenv.outputscreen) ).start();
      solv.waitFor();
      T2functions.Print_Error_Message(solv.exitValue(),this);
    }
    catch (Exception e) {
      T2functions.Print_Error_Message(290,this);
    }
    */
  }



// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel jPanel1;
private javax.swing.JLabel jLabel1;
private javax.swing.JToggleButton jTB_State_Reward;
private javax.swing.JLabel jLabel2;
private javax.swing.JToggleButton jTB_Set_Reward;
private javax.swing.JLabel jLabel3;
private javax.swing.JToggleButton jTB_Expected_Value;
private javax.swing.JLabel jLabel5;
private javax.swing.JButton jB_File_Chooser;
private javax.swing.JLabel jL_State_Variable;
private javax.swing.JTextField jTF_State_Var;
private javax.swing.JPanel jPanel2;
// End of variables declaration//GEN-END:variables
  private T2Analytical_Transient_Probability_and_Intervals probint;
  private T2modelenv modelenv;
  private javax.swing.JFileChooser fchooser;
  private ExampleFileFilterEx objFilter;
  private T2Matrix_Blocks_Manager partition;
  private T2status status;
}
