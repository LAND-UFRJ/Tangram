/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

/******************************************************************************
 *
 *      Change Log:
 *
 *	Last Modifications:
 *           Hugo Sato: 26 Jan 2004 - Special plot (Using 1:3) for TwoWay and RTT
 *                                    trace files.
 *           Hugo Sato: 27 Jan 2004 - Histogram button implemented
 *           Hugo Sato: 02 Feb 2004 - Using vi for View File in Traffic 
                                      Measures Plot
 *
 *           ~~~~~~~~~~~~ DONT FORGET THE PROGRAMMING RULES ~~~~~~~~~~~~
 *
 *
 *	Tool: Traffic Generator Interface
 *	LAND - UFRJ/COPPE/COS      
 *
 ******************************************************************************/

package Tangram2;

import java.util.Properties;
import java.io.*;

public class T2plot extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2plot(T2descriptors parent, String filename, String directoryname, String[] files2filter) {
    modelenv = parent.modelenv;

    measures = null;
    descriptors = parent;
    simulation = null;
    traffic_measures = null;

    name = filename;
    directory = directoryname;
    initComponents ();
    initComponentsManual ( files2filter );
    pack ();
  }
  public T2plot(T2measures parent, String[] files2filter) {
    modelenv = parent.modelenv;

    measures = parent;
    descriptors = null;
    simulation = null;
    traffic_measures = null;

    name = modelenv.curmodel;
    directory = modelenv.curdir;
    initComponents ();
    initComponentsManual ( files2filter );
    pack ();
  }

  public T2plot(T2simulation parent, String[] files2filter) {
    modelenv = parent.modelenv;

    measures = null;
    descriptors = null;
    simulation = parent;
    traffic_measures = null;


    name = modelenv.curmodel;
    directory = modelenv.curdir;
    initComponents ();
    initComponentsManual ( files2filter );
    pack ();
  }

  public T2plot(T2traffic_measures parent, String directoryname, String[] files2filter) {
    modelenv = null;

    measures = null;
    descriptors = null;
    simulation = null;
    traffic_measures = parent;
    traffic_measures.setEnabled( false );
    name = "";
    directory = directoryname;
    initComponents ();
    initComponentsManual ( files2filter );

    this.bin_directory = traffic_measures.bin_directory;
    
    //jB_Properties.setEnabled(false);

    pack ();

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jP_Plot = new javax.swing.JPanel();
        jL_Choose_Graphic = new javax.swing.JLabel();
        jL_Information = new javax.swing.JLabel();
        jSP_Choose_Graphic = new javax.swing.JScrollPane();
        jL_Graphics = new javax.swing.JList();
        jSP_Information = new javax.swing.JScrollPane();
        jTA_Information = new javax.swing.JTextArea();
        jB_Properties = new javax.swing.JButton();
        jB_Delete = new javax.swing.JButton();
        jB_Delete_All = new javax.swing.JButton();
        jB_GNUPlot = new javax.swing.JButton();
        jB_Close = new javax.swing.JButton();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir = new javax.swing.JLabel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jL_Tangram_Picture = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jB_View_File = new javax.swing.JButton();
        jB_HistMse = new javax.swing.JButton();
        jMB_Menu = new javax.swing.JMenuBar();
        jM_Help = new javax.swing.JMenu();
        jMI_Help_Content = new javax.swing.JMenuItem();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Plot]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jP_Plot.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Plot.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Choose_Graphic.setText("Choose Graphic:");
        jL_Choose_Graphic.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Plot.add(jL_Choose_Graphic, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        jL_Information.setText("Information:");
        jL_Information.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Plot.add(jL_Information, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 225, -1, -1));

        jL_Graphics.setToolTipText("Click on the graphic(s)");
        jL_Graphics.setBackground(new java.awt.Color(204, 204, 204));
        jL_Graphics.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                jL_GraphicsAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jL_Graphics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_GraphicsMouseClicked(evt);
            }
        });

        jSP_Choose_Graphic.setViewportView(jL_Graphics);

        jP_Plot.add(jSP_Choose_Graphic, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 458, 200));

        jTA_Information.setToolTipText("Information about the selected graphic");
        jTA_Information.setBackground(new java.awt.Color(204, 204, 204));
        jSP_Information.setViewportView(jTA_Information);

        jP_Plot.add(jSP_Information, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 458, 100));

        getContentPane().add(jP_Plot, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 480, 352));

        jB_Properties.setToolTipText("Configure GNUPlot Properties");
        jB_Properties.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Properties.setLabel("Properties");
        jB_Properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_PropertiesActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Properties, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 5, 110, 30));

        jB_Delete.setToolTipText("Delete selected graphic(s) from hard disk!");
        jB_Delete.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Delete.setLabel("Delete");
        jB_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_DeleteActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 45, 110, 30));

        jB_Delete_All.setToolTipText("Delete all graphics from hard disk!");
        jB_Delete_All.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Delete_All.setLabel("Delete All");
        jB_Delete_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_Delete_AllActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Delete_All, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 85, 110, 30));

        jB_GNUPlot.setToolTipText("Show selected graphic at GNUPlot");
        jB_GNUPlot.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_GNUPlot.setLabel("GNUPlot");
        jB_GNUPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_GNUPlotActionPerformed(evt);
            }
        });

        getContentPane().add(jB_GNUPlot, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 125, 110, 30));

        jB_Close.setToolTipText("Close this window.");
        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setLabel("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 245, 110, 30));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Status_Bar_Dir.setText("Directory:");
        jL_Status_Bar_Dir.setToolTipText("Working Directory");
        jL_Status_Bar_Dir.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Dir, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 4, 260, -1));

        jL_Status_Bar_Model.setText("Model:");
        jL_Status_Bar_Model.setToolTipText("Model");
        jL_Status_Bar_Model.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, -1));

        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 4, 170, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 363, 605, 20));

        jL_Tangram_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_plot.gif")));
        getContentPane().add(jL_Tangram_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 328, -1, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 388, 1, 1));

        jB_View_File.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_View_File.setText("View File");
        jB_View_File.setToolTipText("View selected file in external program.");
        jB_View_File.setEnabled(false);
        jB_View_File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_View_FileActionPerformed(evt);
            }
        });

        getContentPane().add(jB_View_File, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 165, 110, 30));

        jB_HistMse.setToolTipText("Histogram and MSE plot.");
        jB_HistMse.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_HistMse.setText("Hist/MSE");
        jB_HistMse.setEnabled(false);
        jB_HistMse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_HistMseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_HistMse, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 205, 110, 30));

        jMB_Menu.setFont(new java.awt.Font("Dialog", 1, 10));
        jM_Help.setToolTipText("Help, I need somebody...");
        jM_Help.setText("Help");
        jM_Help.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Help_Content.setFont(new java.awt.Font("Dialog", 1, 10));
        jMI_Help_Content.setText("Content");
        jM_Help.add(jMI_Help_Content);

        jMB_Menu.add(jM_Help);

        setJMenuBar(jMB_Menu);

    }//GEN-END:initComponents

    private void jB_HistMseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_HistMseActionPerformed

    if( jL_Graphics.getSelectedIndex() == -1 ){
       javax.swing.JOptionPane.showMessageDialog( this , "File not selected" );
       return;
    } 
     
    String filename = (String) jL_Graphics.getSelectedValue();
    if( !filename.endsWith( ".delay_trace" ) && 
        !filename.endsWith( ".band" ) &&
        !filename.endsWith( ".band.new" ) )
    {
       javax.swing.JOptionPane.showMessageDialog( this , "Invalid File for Histogram Plotting" );
       return;           
    }
    
    T2histogram_mse histogram_mse = new T2histogram_mse( this , filename , directory );
    histogram_mse.show();
        
    }//GEN-LAST:event_jB_HistMseActionPerformed

    private void jL_GraphicsAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jL_GraphicsAncestorMoved

    }//GEN-LAST:event_jL_GraphicsAncestorMoved

  private void jB_View_FileActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_View_FileActionPerformed
   
  if( modelenv != null )
  {
      String cmdLine;
      cmdLine = modelenv.cureditor;
      
      if( jL_Graphics.getSelectedIndex() == -1 )
      {
          javax.swing.JOptionPane.showMessageDialog( this , "File not selected" );
          return;          
      }
      try
      {
          int i;
          for(i=0;i<vectorOfSelectedItems.size();i++)
          {
              cmdLine += " " + (String)vectorOfSelectedItems.elementAt( i );
          }          
          System.out.println( cmdLine );
          java.lang.Process textEditor = Runtime.getRuntime().exec( cmdLine );          
      }
      catch(java.io.IOException exception) 
      {
          javax.swing.JOptionPane.showMessageDialog( this , modelenv.cureditor + " could not be started!" );
      }
  }  
  else
  {   
      String editor = "";
      
      try
      {
          String tangrampath = System.getProperty("TANGRAM2_HOME");
          String[] filetoread = new String[] { tangrampath+"/etc/tangram2.conf",System.getProperty("user.home")+"/.tangram2.conf"};
          Properties propertiesFile = new Properties();
          propertiesFile.load( new FileInputStream( filetoread[0]) );
          editor = propertiesFile.getProperty("EDITOR");      
          propertiesFile.load( new FileInputStream( filetoread[1]) );
          editor = propertiesFile.getProperty("EDITOR");            
      }
      catch(java.io.IOException exception)
      {
         exception.printStackTrace();
      }     
      
      String filename = (String) jL_Graphics.getSelectedValue();
      java.util.Vector cmdpars = new java.util.Vector();         /* stores the command line arguments */
        
      cmdpars.add("bash");
      cmdpars.add("-c");
      if( editor=="vi" )      
        cmdpars.add("xterm -e vi " + directory + '/' + filename);      
      else
        cmdpars.add(editor + " " + directory + '/' + filename);           
      
      String [] parsarray = new String[cmdpars.size()];
      cmdpars.copyInto(parsarray);
      
      try
      {
          Process proc_editor;
          proc_editor = Runtime.getRuntime().exec(parsarray);
          proc_editor.waitFor();                       
      }
      catch(Exception e)
      {
          javax.swing.JOptionPane.showMessageDialog(this,"Unable to launch editor " + editor);
          System.out.println("Exception running " + e.toString());
      }            
  }
  
  }//GEN-LAST:event_jB_View_FileActionPerformed

  //initComponents Manual
  private void initComponentsManual( String[] files2filter )
  {
    jL_Status_Bar_Dir_name.setText(T2functions.status_directory(directory));
    jL_Status_Bar_Model_name.setText(name);

    //create an empty process vector
    vector_gnuplot = new java.util.Vector();

    //fulfill jL_Graphics with files to be displayed!
    java.io.File f = new java.io.File(directory);

    String[] dirlist;

    if (name.compareTo("")!=0)
    {
      ExampleFileFilterEx filter = 
           new ExampleFileFilterEx(0,name,files2filter, "files to plot");
      dirlist = f.list(filter);
    }
    else
    {
      // !!!!!!!!!!!!!!!!!FIX ME!!!!!!!!!!!!!!!!!!
      ExampleFileFilterEx filter = 
           new ExampleFileFilterEx(0,name,files2filter, "files to plot");
      dirlist = f.list(filter);
    }

    data1 = new java.util.Vector();
    data1.removeAllElements();
    for (int i = 0; dirlist != null && i < dirlist.length; i++)
    {
      if (dirlist[i].indexOf(".GNUPlot.")==-1)
      {
        // the .stationary_Descriptors and .seq_stationary_Descriptors files can't be plotted

        if (!((dirlist[i].indexOf(".stationary_Descriptors") > -1) || (dirlist[i].indexOf(".seq_stationary_Descriptors") > -1)))
        {
            data1.add(dirlist[i]);
        }
      }
    }

    jL_Graphics.setListData(data1);
    jB_Delete.setEnabled(false);
    jB_GNUPlot.setEnabled(false);
    if (data1.size() == 0)
      jB_Delete_All.setEnabled(false);

    vectorOfSelectedItems = new java.util.Vector();

  }
  private void jL_GraphicsMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_GraphicsMouseClicked
    if (!(jL_Graphics.isSelectionEmpty())) {
      try {
        String line;
        String filename = (String) jL_Graphics.getSelectedValue();
        java.io.FileReader     f  = new java.io.FileReader (directory + "/" + filename);
        java.io.BufferedReader b  = new java.io.BufferedReader (f);

        jTA_Information.setText("");
        while ((line = b.readLine()) != null) {
          if (line.startsWith("#"))
            jTA_Information.append(line.substring(1) + "\n");
          else
            break;
        }
      }
      catch (java.io.IOException ex) {
        javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      }
      
      jB_Delete.setEnabled( true );
      
      // Enable the Hist/MSE button if and if only one file is selected...    
      if( ( ((String)jL_Graphics.getSelectedValue()).indexOf("TM.band") > 0 || 
            ((String)jL_Graphics.getSelectedValue()).endsWith("delay_trace")) &&
          (jL_Graphics.getMaxSelectionIndex()-jL_Graphics.getMinSelectionIndex())==0) jB_HistMse.setEnabled( true );
      else
          jB_HistMse.setEnabled( false );
      
      // Enable the View File button if and if only one file is selected...    
      if( (jL_Graphics.getMaxSelectionIndex()-jL_Graphics.getMinSelectionIndex())==0)
          jB_View_File.setEnabled( true );
      else
          jB_View_File.setEnabled( false );      
      
      // Enable the GNUPlot button if at least one file is selected...    
      if ( !(jL_Graphics.isSelectionEmpty()) ) {

        int index = jL_Graphics.locationToIndex(evt.getPoint());

        if (index!=-1)
          str1 = (String)jL_Graphics.getModel().getElementAt(index);
        else
          return;


        if ((jL_Graphics.getMaxSelectionIndex()-jL_Graphics.getMinSelectionIndex())==0)
        {

           vectorOfSelectedItems.clear();
           vectorOfSelectedItems.add(jL_Graphics.getModel().getElementAt(jL_Graphics.getSelectedIndex()));

        }
        else
        {
          if (vectorOfSelectedItems.contains(str1)) // the user is turning off a selection?
          {
            vectorOfSelectedItems.remove(str1);

          }
          else
          {
            int anchor = jL_Graphics.getAnchorSelectionIndex();
            int aux,k;


            if (anchor == index)
            {
              vectorOfSelectedItems.add(str1);
            }
            else
            {
              vectorOfSelectedItems.clear();


              if (anchor < index)
              {
                for (k=anchor;k<=index;k++)
                {
                  str1 = (String)jL_Graphics.getModel().getElementAt(k);
                  vectorOfSelectedItems.add(str1);

                }

              }
              else
              {
                for (k=anchor;k>=index;k--)
                {
                  str1 = (String)jL_Graphics.getModel().getElementAt(k);
                  vectorOfSelectedItems.add(str1);

                }
              }

            }

          }
        }

        jB_GNUPlot.setEnabled(true);

      }
      else
      {

        vectorOfSelectedItems.clear();
        jB_GNUPlot.setEnabled( false );
      }

    }
    else {
      jB_Delete.setEnabled( false );
      jB_GNUPlot.setEnabled( false );
      jB_HistMse.setEnabled( false );
      jB_View_File.setEnabled( false );
    }
  }//GEN-LAST:event_jL_GraphicsMouseClicked

  private void jB_PropertiesActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_PropertiesActionPerformed
    plotprop = new T2plotprop(this);
    plotprop.show();
  }//GEN-LAST:event_jB_PropertiesActionPerformed

  private void jB_DeleteActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_DeleteActionPerformed
    //Get everything into filelist
    Object[] filelist = jL_Graphics.getSelectedValues();
    if(filelist.length > 0) {
      int retval = javax.swing.JOptionPane.showConfirmDialog(this, "Delete selected file" + (filelist.length == 1 ? "?":"s?"), null, javax.swing.JOptionPane.YES_NO_OPTION);
      if(retval != javax.swing.JOptionPane.YES_OPTION) return;

      try {
        for(int i = 0; i < filelist.length; i++) {
          java.io.File f = new java.io.File(directory + "/" + (String)filelist[i]);

          if (f.delete())
             data1.remove(filelist[i]);
          else
             javax.swing.JOptionPane.showMessageDialog(this,"File " + filelist[i] + " could not be deleted!");
          jTA_Information.setText("");
        }
        jL_Graphics.setListData(data1);
      }
      catch (SecurityException ex) {
        javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      }
    }
  }//GEN-LAST:event_jB_DeleteActionPerformed

  private void jB_Delete_AllActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_Delete_AllActionPerformed
    if(data1.size() > 0) {
      int retval = javax.swing.JOptionPane.showConfirmDialog(this, "Delete all files?",null, javax.swing.JOptionPane.YES_NO_OPTION);
      if(retval != javax.swing.JOptionPane.YES_OPTION) return;

      try {
        while(jL_Graphics.getModel().getSize()>0) {
          String filename = (String) jL_Graphics.getModel().getElementAt(0);
          java.io.File   f = new java.io.File(directory + "/" + filename);
          if (!f.delete())
            javax.swing.JOptionPane.showMessageDialog(this,"File " + filename + " could not be deleted!");
          else
            data1.remove(filename);
        }
        jL_Graphics.setListData(data1);
        jTA_Information.setText("");
      }
      catch (SecurityException ex) {
        javax.swing.JOptionPane.showMessageDialog(this,"Error -- " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      }
    }
  }//GEN-LAST:event_jB_Delete_AllActionPerformed

  private void jB_GNUPlotActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_GNUPlotActionPerformed
     String filename = (String) jL_Graphics.getSelectedValue();
     String outputFile = filename;
     int lastIndex;
     int couldGenerateOutput = 1;
     boolean debug = true;

     lastIndex = outputFile.indexOf(".");
     if (lastIndex != -1)
     {
        outputFile = outputFile.substring(lastIndex+1);
     }
     if (vectorOfSelectedItems.size() > 1)
     {
        outputFile = outputFile + (".etal");
     }

     if (jL_Graphics.getSelectedIndex()==-1){
       javax.swing.JOptionPane.showMessageDialog(this,"Graphic not selected");
       return;
     }
     
     //[Flaviop 19/11/99] - Now comunicate through pipe
     try {
         java.lang.Process gnuplot = Runtime.getRuntime().exec( "gnuplot -persist" );
         java.io.PrintWriter out = new java.io.PrintWriter( gnuplot.getOutputStream() );

         // Save the pointer to the process in the vector_gnuplot.
         // This will be used to kill all the gnuplot processes when close T2plot.
         vector_gnuplot.add(gnuplot);

         //if (modelenv!=null)

         {
           out.println( "set data style " + T2plotprop.datastyle );

           if (T2plotprop.xlog) {
              out.println("set logscale x");
           }

           if (T2plotprop.ylog) {
              out.println("set logscale y");
           }

           if (T2plotprop.xrange) {
              out.println("set xrange[" + T2plotprop.xrange_min + ":" + T2plotprop.xrange_max + "]");

           }

           if (T2plotprop.yrange) {
              out.println("set yrange[" + T2plotprop.yrange_min + ":" + T2plotprop.yrange_max + "]");

           }

           if (T2plotprop.grid) {
              out.println("set grid");
           }

           switch (T2plotprop.output) {
             case 2: out.println("set term postscript\n");
                     if (modelenv != null)
                      outputFile = directory + "/" + modelenv.curmodel + ".GNUPlot." + outputFile + ".ps"  ;
                     else
                      outputFile = directory + "/GNUPlot." + (String) jL_Graphics.getSelectedValue() + ".ps"  ;
                     out.println("set output '" + outputFile + "'");
                     break;
             case 3: out.println("set term tgif");
                     if (modelenv != null)
                      outputFile = directory + "/" + modelenv.curmodel + ".GNUPlot." + outputFile + ".obj"  ;
                     else
                      outputFile = directory + "/GNUPlot." + (String) jL_Graphics.getSelectedValue() + ".obj"  ;
                     out.println("set output '" + outputFile + "'");
                     break;
             default: outputFile = "";
           }

         }

         java.io.File ioOutputFile = new java.io.File( outputFile );

         //if (modelenv!=null)

         {

           if (T2plotprop.output == 2 || T2plotprop.output == 3)
           {
             /* the output file can be generated ? */

             try {
              java.io.FileWriter fWriter = new java.io.FileWriter( outputFile );
              fWriter.close();
             }
             catch (Exception e)
             {
                javax.swing.JOptionPane.showMessageDialog(this,"File " + outputFile + " could not be generated!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                couldGenerateOutput = 0;
             }
           }

         }

         if (vectorOfSelectedItems.size() == 1)
         {
            
            /*if ((((String)vectorOfSelectedItems.elementAt(0)).indexOf( "TwoWay" ) >0 || 
                 ((String)vectorOfSelectedItems.elementAt(0)).indexOf( "RTT" ) > 0 ) &&
                (((String)vectorOfSelectedItems.elementAt(0)).indexOf( "band" ) <= 0 ) )*/
            if (((String)vectorOfSelectedItems.elementAt(0)).endsWith("delay_trace"))
            {
                if( filename.lastIndexOf(".3d") == filename.length()-3 )
                    out.println("splot '" + directory + "/" + filename + "'"+ "title '" + filename + " using 1:3 with lines'" + " using 1:3 with lines" );
                else
                    out.println("plot '" + directory + "/" + filename + "'"+ "using 1:3 title '" + filename + " using 1:3 '" );                
                
                if( debug ) 
                    System.err.println( "plot '" + directory + "/" + filename + "'"+ "using 1:3 title '" + filename + " using 1:3 '" );
            }
            else
            {
                if( filename.lastIndexOf(".3d") == filename.length()-3 )
                    out.println("splot '" + directory + "/" + filename + "'"+ "title '" + filename + "'" + " with lines" );
                else
                    out.println("plot '" + directory + "/" + filename + "'"+ "title '" + filename + "'");                
            }            
         }
         else
         {
            int i;
            String cmdline = new String("plot ");
            String strtitle = new String();
            for(i=0;i<vectorOfSelectedItems.size();i++)
            {
                   cmdline += "'" + directory + "/" + (String)vectorOfSelectedItems.elementAt(i) + "'";
                 
                   /*if((((String)vectorOfSelectedItems.elementAt(i)).indexOf( "TwoWay" ) >0 || 
                       ((String)vectorOfSelectedItems.elementAt(i)).indexOf( "RTT" ) > 0 ) &&
                       (((String)vectorOfSelectedItems.elementAt(i)).indexOf( "band" ) <= 0 ) )*/
                   if (((String)vectorOfSelectedItems.elementAt(0)).endsWith("delay_trace"))
                   {
                       cmdline += " using 1:3 ";                                               
                   }
                   
                   if (i<(vectorOfSelectedItems.size() - 1))
                   {
                      cmdline += ",";
                   }
                   // strtitle += (String)vectorOfSelectedItems.elementAt(i);
            }

            if( debug ) 
                System.err.println(cmdline);
            
            // cmdline += " title '" + strtitle + "'";
            out.println(cmdline);

         }

         out.println("quit");
         out.flush();
         
         //if (modelenv!=null)
         {

           if (T2plotprop.output == 2 || T2plotprop.output == 3)
           {
             if (ioOutputFile.exists() && couldGenerateOutput == 1 )
             {
               lastIndex = outputFile.lastIndexOf("/",outputFile.length());

               if (lastIndex != -1)
                outputFile = outputFile.substring(lastIndex+1);

               javax.swing.JOptionPane.showMessageDialog(this,"File " + outputFile + " generated!");
             }
           }

         }

      } catch(java.io.IOException exception) {
           javax.swing.JOptionPane.showMessageDialog(this,"GnuPlot could not be started!");
      }
  }//GEN-LAST:event_jB_GNUPlotActionPerformed

  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed

    //kills all the gnuplot process
    while ( ! vector_gnuplot.isEmpty() ) {
      ((java.lang.Process) (vector_gnuplot.firstElement())).destroy();
      vector_gnuplot.remove(0);
    }

    //kill the child
    if (plotprop != null) 
    { 
        plotprop.dispose(); 
    }

    if (measures != null) measures.setEnabled(true);
    if (descriptors != null) descriptors.setEnabled(true);
    if (simulation != null) simulation.setEnabled(true);
    if( traffic_measures != null ) traffic_measures.setEnabled( true );    
    
    dispose();
    
  }//GEN-LAST:event_jB_CloseActionPerformed

  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CloseActionPerformed(null);
  }//GEN-LAST:event_exitForm

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Close;
    private javax.swing.JButton jB_Delete;
    private javax.swing.JButton jB_Delete_All;
    private javax.swing.JButton jB_GNUPlot;
    private javax.swing.JButton jB_HistMse;
    private javax.swing.JButton jB_Properties;
    private javax.swing.JButton jB_View_File;
    private javax.swing.JLabel jL_Choose_Graphic;
    private javax.swing.JList jL_Graphics;
    private javax.swing.JLabel jL_Information;
    private javax.swing.JLabel jL_Status_Bar_Dir;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JLabel jL_Status_Bar_Model;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JLabel jL_Tangram_Picture;
    private javax.swing.JMenuBar jMB_Menu;
    private javax.swing.JMenuItem jMI_Help_Content;
    private javax.swing.JMenu jM_Help;
    private javax.swing.JPanel jP_Plot;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jSP_Choose_Graphic;
    private javax.swing.JScrollPane jSP_Information;
    private javax.swing.JTextArea jTA_Information;
    // End of variables declaration//GEN-END:variables
  private java.util.Vector data1;
  private T2plotprop plotprop;

  public T2traffic_measures traffic_measures;
  private T2descriptors descriptors;
  private T2measures measures;
  private T2simulation simulation;

  private String str1;
  private java.util.Vector vector_gnuplot;

  public  T2modelenv modelenv;
  public  String name, directory, bin_directory;

  String[] files2filter;

  private java.util.Vector vectorOfSelectedItems;
// End of variables declaration

}

/*
     String filename = (String) jL_Graphics.getSelectedValue();
     String outputFile = filename;
     int lastIndex;

     int couldGenerateOutput = 1;

     lastIndex = outputFile.indexOf(".");
     if (lastIndex != -1)
     {
        outputFile = outputFile.substring(lastIndex+1);
     }
     if (vectorOfSelectedItems.size() > 1)
     {
        outputFile = outputFile + (".etal");
     }


     if (jL_Graphics.getSelectedIndex()==-1){
       javax.swing.JOptionPane.showMessageDialog(this,"Graphic not selected");
       return;
     }
     //[Flaviop 19/11/99] - Now comunicate through pipe
     try {
         java.lang.Process gnuplot = Runtime.getRuntime().exec( "gnuplot -persist" );
         java.io.PrintWriter out = new java.io.PrintWriter( gnuplot.getOutputStream() );

         // Save the pointer to the process in the vector_gnuplot.
         // This will be used to kill all the gnuplot processes when close T2plot.
         vector_gnuplot.add(gnuplot);

         if (modelenv!=null)

         {
           out.println( "set data style " + modelenv.datastyle );

           if (modelenv.xlog) {
              out.println("set logscale x");
           }

           if (modelenv.ylog) {
              out.println("set logscale y");
           }

           if (modelenv.xrange) {
              out.println("set xrange[" + modelenv.xrange_min + ":" + modelenv.xrange_max + "]");

           }

           if (modelenv.yrange) {
              out.println("set yrange[" + modelenv.yrange_min + ":" + modelenv.yrange_max + "]");

           }

           if (modelenv.grid) {
              out.println("set grid");
           }

           switch (modelenv.output) {
             case 2: out.println("set term postscript\n");
                     outputFile = directory + "/" + modelenv.curmodel + ".GNUPlot." + outputFile + ".ps"  ;
                     out.println("set output '" + outputFile + "'");
                     break;
             case 3: out.println("set term tgif");
                     outputFile = directory + "/" + modelenv.curmodel + ".GNUPlot." + outputFile + ".obj"  ;
                     out.println("set output '" + outputFile + "'");
                     break;
             default: outputFile = "";
           }

         }

         java.io.File ioOutputFile = new java.io.File( outputFile );

         if (modelenv!=null)

         {

           if (modelenv.output == 2 || modelenv.output == 3)
           {
             // the output file can be generated ?

             try {
              java.io.FileWriter fWriter = new java.io.FileWriter( outputFile );
              fWriter.close();
             }
             catch (Exception e)
             {
                javax.swing.JOptionPane.showMessageDialog(this,"File " + outputFile + " could not be generated!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                couldGenerateOutput = 0;
             }
           }

         }

         if (vectorOfSelectedItems.size() == 1)
         {
            if( filename.lastIndexOf(".3d") == filename.length()-3 )
              out.println("splot '" + directory + "/" + filename + "'"+ "title '" + filename + "'" + " with lines" );
            else
              out.println("plot '" + directory + "/" + filename + "'"+ "title '" + filename + "'");

         }
         else
         {
            int i;
            String cmdline = new String("plot ");
            String strtitle = new String();
            for(i=0;i<vectorOfSelectedItems.size();i++)
            {
                   cmdline += "'" + directory + "/" + (String)vectorOfSelectedItems.elementAt(i) + "'";
                   if (i<(vectorOfSelectedItems.size() - 1))
                   {
                      cmdline += ",";
                   }
                   // strtitle += (String)vectorOfSelectedItems.elementAt(i);
            }

            // cmdline += " title '" + strtitle + "'";
            out.println(cmdline);

         }

         out.println("quit");
         out.flush();


         if (modelenv!=null)
         {

           if (modelenv.output == 2 || modelenv.output == 3)
           {
             if (ioOutputFile.exists() && couldGenerateOutput == 1 )
             {
               lastIndex = outputFile.lastIndexOf("/",outputFile.length());

               if (lastIndex != -1)
                outputFile = outputFile.substring(lastIndex+1);

               javax.swing.JOptionPane.showMessageDialog(this,"File " + outputFile + " generated!");
             }
           }

         }

      } catch(java.io.IOException exception) {
           javax.swing.JOptionPane.showMessageDialog(this,"GnuPlot could not be started!");
      }

*/
