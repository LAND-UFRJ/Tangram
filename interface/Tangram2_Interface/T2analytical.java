/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package Tangram2;

import java.awt.*;

public class T2analytical extends javax.swing.JFrame {

  /** Initializes the Form */
  public T2analytical(T2modelenv mainholder) {
    modelenv=mainholder;
    initComponents ();
    initComponentsManual ();
    pack ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTP_Stationary_or_Transient = new javax.swing.JTabbedPane();
        jP_Stationary = new javax.swing.JPanel();
        jTP_Stationary = new javax.swing.JTabbedPane();
        jP_Transient = new javax.swing.JPanel();
        jTP_Transient_Methods = new javax.swing.JTabbedPane();
        jP_Point_Probabilities = new javax.swing.JPanel();
        jTP_PP = new javax.swing.JTabbedPane();
        jTP_ESPA = new javax.swing.JTabbedPane();
        jP_Distributions = new javax.swing.JPanel();
        jTP_Dist = new javax.swing.JTabbedPane();
        jP_Expected_Values = new javax.swing.JPanel();
        jTP_EV = new javax.swing.JTabbedPane();
        jTP_EV_ECR = new javax.swing.JTabbedPane();
        jTP_ESRA = new javax.swing.JTabbedPane();
        jB_Evaluate = new javax.swing.JButton();
        jP_Status_Bar = new javax.swing.JPanel();
        jL_Status_Bar_Dir = new javax.swing.JLabel();
        jL_Status_Bar_Dir_name = new javax.swing.JLabel();
        jL_Status_Bar_Model = new javax.swing.JLabel();
        jL_Status_Bar_Model_name = new javax.swing.JLabel();
        jL_Analytical_Picture = new javax.swing.JLabel();
        jB_Close = new javax.swing.JButton();
        jB_Parameters = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jB_Matrix = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Analytical Methods]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jTP_Stationary_or_Transient.setFont(new java.awt.Font("Dialog", 1, 9));
        jP_Stationary.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTP_Stationary.setFont(new java.awt.Font("Dialog", 1, 9));
        jP_Stationary.add(jTP_Stationary, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 570, 435));

        jTP_Stationary_or_Transient.addTab("Stationary", null, jP_Stationary, "");

        jP_Transient.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTP_Transient_Methods.setFont(new java.awt.Font("Dialog", 1, 9));
        jP_Point_Probabilities.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTP_PP.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_ESPA.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_PP.addTab("ESPA", null, jTP_ESPA, "");

        jP_Point_Probabilities.add(jTP_PP, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 560, 405));

        jTP_Transient_Methods.addTab("Point Probabilities", null, jP_Point_Probabilities, "");

        jP_Distributions.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTP_Dist.setFont(new java.awt.Font("Dialog", 1, 9));
        jP_Distributions.add(jTP_Dist, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 560, 405));

        jTP_Transient_Methods.addTab("Distributions", null, jP_Distributions, "");

        jP_Expected_Values.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTP_EV.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_EV_ECR.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_ESRA.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_EV_ECR.addTab("ESRA", null, jTP_ESRA, "");

        jTP_EV.addTab("Expected Cumulative Reward", null, jTP_EV_ECR, "");

        jP_Expected_Values.add(jTP_EV, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 560, 405));

        jTP_Transient_Methods.addTab("Expected Values", null, jP_Expected_Values, "");

        jP_Transient.add(jTP_Transient_Methods, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 570, 435));

        jTP_Stationary_or_Transient.addTab("Transient", null, jP_Transient, "");

        getContentPane().add(jTP_Stationary_or_Transient, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 580, 465));

        jB_Evaluate.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Evaluate.setText("Evaluate");
        jB_Evaluate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_EvaluateActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Evaluate, new org.netbeans.lib.awtextra.AbsoluteConstraints(595, 5, 113, 30));

        jP_Status_Bar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Status_Bar.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jL_Status_Bar_Dir.setText("Directory:");
        jL_Status_Bar_Dir.setForeground(java.awt.Color.black);
        jL_Status_Bar_Dir.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Dir, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        jL_Status_Bar_Dir_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Dir_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 4, 260, -1));

        jL_Status_Bar_Model.setText("Model:");
        jL_Status_Bar_Model.setForeground(java.awt.Color.black);
        jL_Status_Bar_Model.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_Status_Bar.add(jL_Status_Bar_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, -1));

        jL_Status_Bar_Model_name.setForeground(java.awt.Color.black);
        jP_Status_Bar.add(jL_Status_Bar_Model_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 4, 300, -1));

        getContentPane().add(jP_Status_Bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 475, 705, 20));

        jL_Analytical_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_analytical.gif")));
        getContentPane().add(jL_Analytical_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 443, -1, 30));

        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setText("Close");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(595, 125, 113, 30));

        jB_Parameters.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Parameters.setText("Parameters");
        jB_Parameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ParametersActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Parameters, new org.netbeans.lib.awtextra.AbsoluteConstraints(595, 45, 113, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 500, 1, 1));

        jB_Matrix.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Matrix.setLabel("View matrix");
        jB_Matrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_MatrixActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Matrix, new org.netbeans.lib.awtextra.AbsoluteConstraints(595, 85, 113, 30));

    }//GEN-END:initComponents

  private void jB_MatrixActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_MatrixActionPerformed
    this.setEnabled(false);
    (new T2matrixperm( modelenv )).show();
  }//GEN-LAST:event_jB_MatrixActionPerformed


  private void jB_ParametersActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ParametersActionPerformed
    this.setEnabled(false);
    literal.show();
  }//GEN-LAST:event_jB_ParametersActionPerformed


/**********************************************************************************/
/************************ initComponentsManual procedure **************************/

  private void initComponentsManual () {

    //set directory and model in status panel (jP_Status_Bar)
    jL_Status_Bar_Dir_name.setText(T2functions.status_directory(modelenv.curdir));
    jL_Status_Bar_Model_name.setText(modelenv.curmodel);

    jP_Iterative = new T2Analytical_Stationary_Iterative(modelenv);
    jTP_Stationary.addTab(jP_Iterative.Get_Method_Name(), jP_Iterative);

    jP_Exact = new T2Analytical_Stationary_Exact(modelenv);
    jTP_Stationary.addTab(jP_Exact.Get_Method_Name(), jP_Exact);

    jP_Non_markovian = new T2Analytical_Stationary_Non_markovian(modelenv);
    jTP_Stationary.addTab(jP_Non_markovian.Get_Method_Name(), jP_Non_markovian);

    jP_PP_Uniformization = new T2Analytical_Transient_PP_Uniformization(modelenv);
//    jTP_PP.addTab(jP_PP_Uniformization.Get_Method_Name(), jP_PP_Uniformization);
//  Fernando & Daniel - 08/12/00 - inserts the tab in the first position
    jTP_PP.insertTab(jP_PP_Uniformization.Get_Method_Name(),
                     null,
                     jP_PP_Uniformization,
                     null,
                     0
                     );

    jP_ESPA_Direct = new T2Analytical_Transient_PP_ESPA_Direct(modelenv);
    javax.swing.JScrollPane jS_ESPA_Direct = new javax.swing.JScrollPane();
    jTP_ESPA.addTab(jP_ESPA_Direct.Get_Method_Name(), jS_ESPA_Direct);
    jS_ESPA_Direct.setViewportView(jP_ESPA_Direct);

    jP_ESPA_Iterative = new T2Analytical_Transient_PP_ESPA_Iterative(modelenv);
    javax.swing.JScrollPane jS_ESPA_Iterative = new javax.swing.JScrollPane();
    jTP_ESPA.addTab(jP_ESPA_Iterative.Get_Method_Name(), jS_ESPA_Iterative);
    jS_ESPA_Iterative.setViewportView(jP_ESPA_Iterative);

    jP_ESRA_Direct = new T2Analytical_Transient_EV_ECR_ESRA_Direct(modelenv);
    javax.swing.JScrollPane jS_ESRA_Direct = new javax.swing.JScrollPane();
    jTP_ESRA.addTab(jP_ESRA_Direct.Get_Method_Name(), jS_ESRA_Direct);
    jS_ESRA_Direct.setViewportView(jP_ESRA_Direct);

    jP_ESRA_Iterative = new T2Analytical_Transient_EV_ECR_ESRA_Iterative(modelenv);
    javax.swing.JScrollPane jS_ESRA_Iterative = new javax.swing.JScrollPane();
    jTP_ESRA.addTab(jP_ESRA_Iterative.Get_Method_Name(), jS_ESRA_Iterative);
    jS_ESRA_Iterative.setViewportView(jP_ESRA_Iterative);

    jP_Dist_CR = new T2Analytical_Transient_Dist_Cumulative_Reward(modelenv);
    jTP_Dist.addTab(jP_Dist_CR.Get_Method_Name(), jP_Dist_CR);

    jP_Dist_OT = new T2Analytical_Transient_Dist_Operational_Time(modelenv);
    jTP_Dist.addTab(jP_Dist_OT.Get_Method_Name(), jP_Dist_OT);

    jP_EV_Exp_CR = new T2Analytical_Transient_EV_ExpCumRew(modelenv);
//    jTP_EV_ECR.addTab(jP_EV_Exp_CR.Get_Method_Name(), jP_EV_Exp_CR);
//  Fernando & Daniel - 08/12/00 - inserts the tab in the first position
    jTP_EV_ECR.insertTab(jP_EV_Exp_CR.Get_Method_Name(),
                     null,
                     jP_EV_Exp_CR,
                     null,
                     0
                     );

    jP_EV_Fraction = new T2Analytical_Transient_EV_FracTime_CR_AbLev(modelenv);
    jTP_EV.addTab(jP_EV_Fraction.Get_Method_Name(), jP_EV_Fraction);

    jP_EV_Exp_Imp_CR = new T2Analytical_Transient_EV_ExpCumImpRew(modelenv);
    jTP_EV.addTab(jP_EV_Exp_Imp_CR.Get_Method_Name(), jP_EV_Exp_Imp_CR);


    java.io.File arq_params = new java.io.File(modelenv.curmodel + ".generator_mtx.param");
    if (arq_params.exists()) {
      jB_Parameters.setEnabled(true);
      literal = new T2literal(this, jB_Evaluate);
      java.io.File arq_mtx = new java.io.File(modelenv.curmodel + ".generator_mtx");
      if (arq_mtx.exists())
        jB_Evaluate.setEnabled(true);
      else
        jB_Evaluate.setEnabled(false);
    }
    else {
      jB_Parameters.setEnabled(false);
      jB_Evaluate.setEnabled(true);
    }
  }

/****************************************************************************************************/
/******************************** Evaluate Button ***************************************************/

  private void jB_EvaluateActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_EvaluateActionPerformed

    java.io.File arq = new java.io.File(modelenv.curmodel + ".generator_mtx");
    if (!(arq.exists())) {
       javax.swing.JOptionPane.showMessageDialog(this,"File " + modelenv.curmodel + ".generator_mtx doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
       return;
    }

/**********************************************************************************/
/************** Means that the user is on Tab Stationary | Iterative **************/

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 0) && (jTP_Stationary.getSelectedIndex() == 0)) {
      jP_Iterative.Evaluate();
    }

/**********************************************************************************/
/************** Means that the user is on Tab Stationary | Exact ******************/

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 0) && (jTP_Stationary.getSelectedIndex() == 1)) {
      jP_Exact.Evaluate();
    }

/**********************************************************************************/
/********* Means that the user is on Tab Stationary | Non-markovian models ********/

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 0) && (jTP_Stationary.getSelectedIndex() == 2)) {
      jP_Non_markovian.Evaluate();
    }

/**********************************************************************************/
/* Means that the user is on Tab Transient | Point Probabilities | Uniformization */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 0) && (jTP_PP.getSelectedIndex() == 0)) {
      jP_PP_Uniformization.Evaluate();
    }

/**********************************************************************************/
/* Means that the user is on Tab Transient | Point Probabilities | ESPA | Direct */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 0) && (jTP_PP.getSelectedIndex() == 1) && (jTP_ESPA.getSelectedIndex() == 0)) {
      // System.out.println("Transient | Point Probabilities | ESPA | Direct");
      jP_ESPA_Direct.Evaluate();
    }
/**********************************************************************************/
/* Means that the user is on Tab Transient | Point Probabilities | ESPA | Iterative */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 0) && (jTP_PP.getSelectedIndex() == 1) && (jTP_ESPA.getSelectedIndex() == 1)) {
      // System.out.println("Transient | Point Probabilities | ESPA | Iterative");
      jP_ESPA_Iterative.Evaluate();
    }



/**********************************************************************************/
/*** Means that the user is on Tab Transient | Distributions | Cumulative Reward **/

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 1) && (jTP_Dist.getSelectedIndex() == 0)) {
      jP_Dist_CR.Evaluate();
    }

/**********************************************************************************/
/*** Means that the user is on Tab Transient | Distributions | Operational Time **/

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 1) && (jTP_Dist.getSelectedIndex() == 1)) {
      jP_Dist_OT.Evaluate();
    }

/**********************************************************************************/
/* Means that the user is on Tab Transient | Expected Values | Expected Cumulative Reward | Uniformization */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 2) && (jTP_EV.getSelectedIndex() == 0) && (jTP_EV_ECR.getSelectedIndex() == 0)){
      jP_EV_Exp_CR.Evaluate();
    }


/**********************************************************************************/
/* Means that the user is on Tab Transient | Expected Values | Expected Cumulative Reward | ESRA | Direct */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 2) && (jTP_EV.getSelectedIndex() == 0) && (jTP_EV_ECR.getSelectedIndex() == 1) && (jTP_ESRA.getSelectedIndex() ==0 )) {
      // System.out.println("Transient | Point Probabilities | ESRA | Direct");
      jP_ESRA_Direct.Evaluate();
    }

/**********************************************************************************/
/* Means that the user is on Tab Transient | Expected Values | Expected Cumulative Reward | ESRA | Iteractive */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 2) && (jTP_EV.getSelectedIndex() == 0) && (jTP_EV_ECR.getSelectedIndex() == 1) && (jTP_ESRA.getSelectedIndex() ==1 )) {
       // System.out.println("Transient | Point Probabilities | ESRA | Iterative");
       jP_ESRA_Iterative.Evaluate();
    }



/**********************************************************************************/
/* Means that the user is on Tab Transient | Expected Values | Fraction of time a accumulated reward is above a level */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 2) && (jTP_EV.getSelectedIndex() == 1)) {
      jP_EV_Fraction.Evaluate();
    }
/**********************************************************************************/
/* Means that the user is on Tab Transient | Expected Values | Expected Cumulative Impulse Reward */

    if ((jTP_Stationary_or_Transient.getSelectedIndex() == 1) && (jTP_Transient_Methods.getSelectedIndex() == 2) && (jTP_EV.getSelectedIndex() == 2)) {
      jP_EV_Exp_Imp_CR.Evaluate();
    }
  }//GEN-LAST:event_jB_EvaluateActionPerformed

  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed
    //update the figs and buttons!
    modelenv.update_stdy();
    //destroy the process and dispose the status if necessary!

    jP_Iterative.KillChild();
    jP_Exact.KillChild();
    jP_Non_markovian.KillChild();
    jP_PP_Uniformization.KillChild();
    jP_Dist_CR.KillChild();
    jP_Dist_OT.KillChild();
    jP_EV_Exp_CR.KillChild();
    jP_EV_Fraction.KillChild();

    modelenv.setEnabled(true);
    dispose();
  }//GEN-LAST:event_jB_CloseActionPerformed

  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    jB_CloseActionPerformed(null);
  }//GEN-LAST:event_exitForm


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Parameters;
    private javax.swing.JPanel jP_Point_Probabilities;
    private javax.swing.JButton jB_Evaluate;
    private javax.swing.JPanel jP_Expected_Values;
    private javax.swing.JLabel jL_Analytical_Picture;
    private javax.swing.JTabbedPane jTP_Stationary;
    private javax.swing.JButton jB_Matrix;
    private javax.swing.JPanel jP_Distributions;
    private javax.swing.JLabel jL_Status_Bar_Model_name;
    private javax.swing.JPanel jP_Status_Bar;
    private javax.swing.JTabbedPane jTP_ESRA;
    private javax.swing.JPanel jP_Transient;
    private javax.swing.JLabel jL_Status_Bar_Dir_name;
    private javax.swing.JPanel jP_Stationary;
    private javax.swing.JTabbedPane jTP_EV;
    private javax.swing.JLabel jL_Status_Bar_Model;
    private javax.swing.JTabbedPane jTP_ESPA;
    private javax.swing.JTabbedPane jTP_Transient_Methods;
    private javax.swing.JLabel jL_Status_Bar_Dir;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTP_EV_ECR;
    private javax.swing.JTabbedPane jTP_PP;
    private javax.swing.JTabbedPane jTP_Stationary_or_Transient;
    private javax.swing.JTabbedPane jTP_Dist;
    private javax.swing.JButton jB_Close;
    // End of variables declaration//GEN-END:variables
  public  T2modelenv modelenv;

  private T2literal    literal;

  //Stationary Methods
  private T2Analytical_Stationary_Iterative jP_Iterative;
  private T2Analytical_Stationary_Exact jP_Exact;
  private T2Analytical_Stationary_Non_markovian jP_Non_markovian;

  //Transient Methods
  private T2Analytical_Transient_PP_Uniformization jP_PP_Uniformization;
  private T2Analytical_Transient_Dist_Cumulative_Reward jP_Dist_CR;
  private T2Analytical_Transient_Dist_Operational_Time jP_Dist_OT;
  private T2Analytical_Transient_EV_ExpCumRew jP_EV_Exp_CR;
  private T2Analytical_Transient_EV_ExpCumImpRew jP_EV_Exp_Imp_CR;
  private T2Analytical_Transient_EV_FracTime_CR_AbLev jP_EV_Fraction;
  private T2Analytical_Transient_PP_ESPA_Direct jP_ESPA_Direct;
  private T2Analytical_Transient_PP_ESPA_Iterative jP_ESPA_Iterative;
  private T2Analytical_Transient_EV_ECR_ESRA_Direct jP_ESRA_Direct;
  private T2Analytical_Transient_EV_ECR_ESRA_Iterative jP_ESRA_Iterative;

// End of variables declaration
}

