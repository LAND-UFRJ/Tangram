/*
 * To change this template, choose Tools | Templates
 * and open the template hmmAMatrixBufferedReader the editor.
 */

/*
 * T2InitialForm.java
 *
 * Created on 13/03/2009, 19:17:14
 */

/**
 *
 * @author Bruno
 */

package Tangram2;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.ScrollPane;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.*;

public class T2MTKHmmReadForm extends javax.swing.JFrame {

    /** Creates new form T2InitialForm */
    public T2MTKHmmReadForm() {
        initComponents();
        jPanel3.setVisible(false);
        jPanel4.setVisible(false);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tangram II");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters Extracted from Tangram-II Model"));
        jPanel1.setMaximumSize(new java.awt.Dimension(499, 274));
        jPanel1.setMinimumSize(new java.awt.Dimension(499, 274));

        jLabel3.setText("Hidden States Transition Probability Matrix");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(395, 395, 395))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTextField1.setEditable(false);

        jLabel1.setText("Number of Hidden States:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(433, 433, 433)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Additional Parameters"));
        jPanel2.setEnabled(false);
        jPanel2.setMaximumSize(new java.awt.Dimension(499, 374));
        jPanel2.setPreferredSize(new java.awt.Dimension(499, 374));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTable2MouseMoved(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel4.setText("Initial Probability of Hidden States");

        jToggleButton3.setText("Equiprobable");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Random");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jToggleButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 448, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jToggleButton2, jToggleButton3});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jToggleButton2, jToggleButton3});

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel2.setText("Number of Symbols:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel6.setText("Symbol Emission Probability Distribution in Hidden State");

        jComboBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Edit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Equiprobable");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton4.setText("Random");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jToggleButton1, jToggleButton4});

        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_hmmgen.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jButton2.setText("Create");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setText(T2MTKCommon.statusBarUpdate());
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                        .addGap(24, 24, 24))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(625, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel1, jPanel2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged

      //Updating number of symbols, when selected by user
      if(jToggleButton1.isSelected()) jToggleButton1.setSelected(false);
      if(jToggleButton4.isSelected()) jToggleButton4.setSelected(false);
      int symbNumber = Integer.parseInt(jSpinner1.getValue().toString());
      int hStates = Integer.parseInt(jTextField1.getText());
      if(symbNumber>0){
          
          symGenTables = new double[hStates][symbNumber];
          for(int i=0;i<hStates;i++){
              for(int j=0;j<symbNumber;j++){
                  symGenTables[i][j]=-1;
              }
          }

      }else{
          T2MTKCommon.errorMessage("", "The number of symbols should be greater than 0.");
      }
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        //Creating HMM Parameters file when user click on Create Button

        int i,j;
        int status = 0;
        int hstates = Integer.parseInt(jTextField1.getText());
        int symbols = Integer.parseInt(jSpinner1.getValue().toString());

        //Creating HMM object        
        hmm = new T2MTKHmm(hstates, symbols);

        //Checking and seeding initial hidden state distribution
        for(i=0;i<hstates;i++){
            try {
                Double.parseDouble( pi[i]+"" );
            } catch (NumberFormatException e){
                status=1;
                T2MTKCommon.errorMessage("", "Null or incompatible values specified for the initial hidden state probability distribution.");
                break;
            } catch(NullPointerException e){
                T2MTKCommon.errorMessage("", "Please specify the initial hidden state probability distribution.");
                status = 1;
                break;
            }
            if(pi[i]>=0.0){
                hmm.setInitStatesProb(i, pi[i] );
            }else{
                T2MTKCommon.errorMessage("", "Please specify a valid initial probability for hidden state "+i+".");
                status = 1;
                break;
            }
            
        }

        // Checking and seeding hidden states transition matrix
        int breakLoop = 0;
        for(i=0;i<hstates;i++){
            if(breakLoop==1) break;
            for(j=0;j<hstates;j++){
                try{
                    Double.parseDouble(hStatesTransMatrix[i][j]+"");
                }catch(NullPointerException e){
                     T2MTKCommon.errorMessage("", "Please specify the hidden state transition probability distribution matrix.");
                     status = 1;
                     breakLoop=1;
                     break;

                }catch(NumberFormatException ex){
                     T2MTKCommon.errorMessage("", "Null or incompatible values specified for the hidden state transition probability distribution matrix.");
                     status = 1;
                     breakLoop=1;
                     break;
                }
                if(hStatesTransMatrix[i][j]>=0.0){
                    hmm.setHiddenStatesTransProb(i, j, hStatesTransMatrix[i][j]);
                }else{
                     T2MTKCommon.errorMessage("", "Please specify a valid probability for the transition between hidden states "+i+" and "+j+".");
                     status = 1;
                     breakLoop=1;
                     break;
                }
            }
        }

        // Checking and seeding symbol emission probability distribution
        for(i=0;(i<hstates) && (status==0);i++){

            for(j=0;j<symbols;j++){
                
                try {
                    Double.parseDouble( symGenTables[i][j]+"" );
                } catch (NumberFormatException e){
                    status=1;
                    T2MTKCommon.errorMessage("", "Null or incompatible values specified for the symbol emission probability distribution in hidden state "+i+".");
                    break;
                } catch(NullPointerException e){
                    T2MTKCommon.errorMessage("", "Please specify the symbol emission probability distribution in hidden state "+i+".");
                    status = 1;
                    break;
                }
                if(symGenTables[i][j]>=0.0){
                    hmm.setSymbolGenProb(i, j, symGenTables[i][j]);
                }else{
                    T2MTKCommon.errorMessage("", "Please specify a valid probability for the emission of symbol "+j+" inside hidden state "+i+".");
                    status = 1;
                    break;
                }
                
            }
        }

        // Checking probability constrains on hmmAMatrixFile
        if(status == 0){
            String hmmFile = currdir+"/"+currmodel+".HMM.parameters";
            T2MTKHmmIO.hmmSave(hmm, hmmFile);

            // Loading Hmm to check parameters
            T2MTKCommon.createCmds();
            T2MTKCommon.addCmd("h = new hmm()");
            T2MTKCommon.addCmd("h.load(\""+hmmFile+"\")");
            T2MTKMessages out = T2MTKCommon.exec();
            
            if(out.getError().equals("")){
                new T2MTKHmmMethods().setVisible(true);
                this.dispose();
            }else{
               
                if(out.getError().contains("normalize")){
                    int resp = JOptionPane.showConfirmDialog(null, out.getError()+"\n\n Do you want normalize it now?", "Tangram II", JOptionPane.YES_NO_OPTION);
                    if(resp==0){
                        //YES
                        T2MTKCommon.createCmds();
                        T2MTKCommon.addCmd("h = new hmm()");
                        T2MTKCommon.addCmd("h.load(\""+hmmFile+"\")");
                        T2MTKCommon.addCmd("h.normalize()");
                        T2MTKCommon.addCmd("h.save(\""+hmmFile+"\")");

                        out = T2MTKCommon.exec();

                        if(!out.getOut().equals("")){
                            T2MTKCommon.infoMessage("", out.getOut());
                        }

                        // realoading HMM for check normalize successful
                        T2MTKCommon.createCmds();
                        T2MTKCommon.addCmd("h = new hmm()");
                        T2MTKCommon.addCmd("h.load(\""+hmmFile+"\")");


                        out = T2MTKCommon.exec();
                        
                        if(out.getError().equals("")){
                            T2MTKCommon.infoMessage("", "Model parameters were successfully normalized.");
                            
                            // Reloading parameters
                            hmm = T2MTKHmmIO.hmmRead(currdir+currmodel+".HMM.parameters");

                            new T2MTKHmmMethods().setVisible(true);
                            this.dispose();
                        }else{
                            T2MTKCommon.errorMessage("Hmm Create", out.getError());
                        }
                    }else{
                        //NO
                        // TODO: what do hmmAMatrixBufferedReader this case?
                    }
                }
            }

            // Building view matrix files
            File hiddenStFile = new File(currdir + currmodel + ".HMM.hidden_st.st_trans_prob_mtx");
            File symbolsFile  = new File(currdir + currmodel + ".HMM.symbols.st_trans_prob_mtx");
            File symbolsVstatFile  = new File(currdir + currmodel + ".HMM.symbols.vstat");
            File symbolsStatesFile = new File(currdir + currmodel + ".HMM.symbols.states");

            if(hiddenStFile.exists()) hiddenStFile.delete();
            if(symbolsFile.exists()) symbolsFile.delete();
            if(symbolsVstatFile.exists()) symbolsVstatFile.delete();
            if(symbolsStatesFile.exists()) symbolsStatesFile.delete();

            PrintWriter hiddenStWriter = null;
            try {
                hiddenStWriter = new PrintWriter(new FileWriter(hiddenStFile), true);
            } catch (IOException ex) {
                T2MTKCommon.errorMessage("", "Cannot create file: "+currmodel+".HMM.hidden_st.st_trans_prob_mtx. "+ex.getMessage());
            }
            PrintWriter symbolsWriter = null;
            try {
                symbolsWriter = new PrintWriter(new FileWriter(symbolsFile), true);
            } catch (IOException ex) {
                T2MTKCommon.errorMessage("", "Cannot create file: "+currmodel+".HMM.symbols.st_trans_prob_mtx. "+ex.getMessage());
            }
            PrintWriter symbolsVstatWriter = null;
            try {
                symbolsVstatWriter = new PrintWriter(new FileWriter(symbolsVstatFile), true );
            } catch (IOException ex) {
                T2MTKCommon.errorMessage("", "Cannot create file: "+currmodel+".HMM.symbols.vstat"+ex.getMessage());
            }
            PrintWriter symbolsStatesWriter = null;
            try {
                symbolsStatesWriter = new PrintWriter(new FileWriter(symbolsStatesFile), true );
            } catch (IOException ex) {
                T2MTKCommon.errorMessage("", "Cannot create file: "+currmodel+".HMM.symbols.states"+ex.getMessage());
            }

            double value;

            // Writing *.HMM.hidden_st.st_trans_prob_mtx file
            for(i=0;i<hmm.getHstates();i++){
                for(j=0;j<hmm.getHstates();j++){
                    value = hmm.getHiddenStatesTransProb(i, j);
                    if(value > 0){
                        hiddenStWriter.println((i+1)+" "+(j+1)+" "+value);
                    }
                }
            }

            // Writing *.HMM.symbols.st_trans_prob_mtx file
            for(i=0;i<hmm.getHstates();i++){
                for(j=0;j<hmm.getSymbols();j++){
                    value = hmm.getSymbolGenProb(i, j);
                    if(value > 0){
                        symbolsWriter.println((i+1)+" "+(j+1)+" "+value);
                    }
                }
            }

            // Writing *.HMM.symbols.vstat file
            symbolsVstatWriter.println("Symbols.genProbabilities");

            // Writing *.HMM.symbols.states file
            if(hmm.getHstates()>hmm.getSymbols()){
                for(i=0;i<hmm.getHstates();i++){
                    symbolsStatesWriter.println((i+1)+" ("+i+")");
                }
            }else{
                for(i=0;i<hmm.getSymbols();i++){
                    symbolsStatesWriter.println((i+1)+" ("+i+")");
                }
            }

            hiddenStWriter.close();
            symbolsWriter.close();
            symbolsVstatWriter.close(); 
            symbolsStatesWriter.close();            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        
    }//GEN-LAST:event_formFocusGained

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed

        if(jToggleButton3.isSelected()){
            //Turn On Equiprobable initial probabilities for Hidden States
            for(int i=0;i<Integer.parseInt(jTextField1.getText());i++){
                double value = (double)1/(double)Integer.parseInt(jTextField1.getText());
                jTable2.setValueAt(T2MTKCommon.parseCientificNot(value), 0, i);
                pi[i]=value;
            }
            jToggleButton2.setSelected(false);
        }else{
            //Turn Of Equiprobable initial probabilities for Hidden States
            for(int i=0;i<Integer.parseInt(jTextField1.getText());i++){
                jTable2.setValueAt("", 0, i);
                pi[i] = -1;
            }
        }

    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        T2MTKHmmReadFormSymbol symbolForm = new T2MTKHmmReadFormSymbol();
        symbolForm.setVisible(true);
        symbolForm.hState = Integer.parseInt(jComboBox1.getSelectedItem().toString());

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

        int hstates = Integer.parseInt(jTextField1.getText());
        int symbols = Integer.parseInt(jSpinner1.getValue().toString());
        if(jToggleButton1.isSelected()){
            //Turn On Equiprobable probabilities for all symbols
            for(int i=0;i<hstates;i++){
                for(int j=0;j<symbols;j++){
                    symGenTables[i][j]=1.0/(double)symbols;
                }
            }
            jToggleButton4.setSelected(false);
        }else{
            //Turn Off Equiprobable probabilities for all symbols
            for(int i=0;i<hstates;i++){
                for(int j=0;j<symbols;j++){
                    symGenTables[i][j] = -1;
                }
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        SpinnerModel sModel = new SpinnerNumberModel(2,1,999999,1);
        jSpinner1.setModel(sModel);
        
    }//GEN-LAST:event_formComponentShown

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed

        int hstates = Integer.parseInt(jTextField1.getText());
        if(jToggleButton2.isSelected()){
            //Turn On Random initial probabilities for Hidden States
            double[] random =  T2MTKCommon.randomProbGen(hstates);
            for(int i=0;i<hstates;i++){
                jTable2.setValueAt(T2MTKCommon.parseCientificNot(random[i]), 0, i);
            }
            pi = random;
            jToggleButton3.setSelected(false);
        }else{
            //Turn Off Random initial probabilities for Hidden States
            for(int i=0;i<hstates;i++){
                jTable2.setValueAt("", 0, i);
                pi[i] = -1;
            }
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        int hstates = Integer.parseInt(jTextField1.getText());
        int symbols = Integer.parseInt(jSpinner1.getValue().toString());

        if(jToggleButton4.isSelected()){
        //Turn On Random probabilities for all Symbols
            for(int i=0;i<hstates;i++){
                double[] random = T2MTKCommon.randomProbGen(symbols);
                for(int j=0;j<symbols;j++){
                    symGenTables[i][j]=random[j];
                }
            }
            jToggleButton1.setSelected(false);
        }else{
        //Turn Off Random probabilities for all Symbols
            for(int i=0;i<hstates;i++){
                for(int j=0;j<symbols;j++){
                    symGenTables[i][j] =-1;
                }
            }
        }

    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jTable2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseMoved
        
    }//GEN-LAST:event_jTable2MouseMoved

    public void import_from_tangram(){

        int status = 0;
        int hStates = 0;

        String hmmAMatrixFilePath = new String(currdir+"/"+currmodel+".HMM.A");
        File hmmAMatrixFile = new File(hmmAMatrixFilePath);
        BufferedReader hmmAMatrixBufferedReader = null;

        //Reading A matrix from temporary file
        try {
            hmmAMatrixBufferedReader = new BufferedReader(new FileReader(hmmAMatrixFilePath));
            hStates = Integer.parseInt(hmmAMatrixBufferedReader.readLine());  //Reading Number of Hidden States

            //Setting Hidden States Transition Matrix

            hStatesTransMatrix= new double[hStates][hStates];
            int i;
            for(i = 0;i<hStates;i++){
                int j = 0;
                StringTokenizer st = new StringTokenizer(hmmAMatrixBufferedReader.readLine());
                while(st.hasMoreTokens()){
                    hStatesTransMatrix[i][j] = Double.parseDouble(st.nextToken());
                    j++;
                }

            }

            hmmAMatrixBufferedReader.close();

        } catch (IOException ex) {

            T2MTKCommon.errorMessage("","Cannot read Hidden States Transition Probability Matrix from file: "+hmmAMatrixFilePath+". "+ex.getMessage());
            status = 1;

        } catch (NumberFormatException e) {

            T2MTKCommon.errorMessage("","Cannot read values of file "+hmmAMatrixFilePath+". Format not supported.");
            status = 1;

        }

        if(status == 0){

            // Creating design of jTable1 (Hidden States Transition Matrix)
            String[][] header = new String[hStates][];
            String[]  col = new String[hStates];
            for (int i = 0; i < header.length; i++) {
                header[i] = new String[] { Integer.toString(i) };
                col[i] = new String(""+i);
            }

            JTable rowHeader = new JTable(header, new String[] {"A"});
            rowHeader.setBackground(jLabel1.getBackground());
            rowHeader.setCellSelectionEnabled(false);
            rowHeader.setColumnSelectionAllowed(false);
            rowHeader.setFocusable(false);
            JViewport viewport = new JViewport();
            viewport.setView(rowHeader);
            viewport.setPreferredSize(new Dimension(30, 0));
            jScrollPane1.setRowHeader(viewport);

            DefaultTableModel modelA = new DefaultTableModel(col,hStates);
            jTextField1.setText(""+hStates);
            jTable1.setModel(modelA);
            if(hStates<9){
                jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
            }

            //Creating design of jTable2 (Initial probabilities of Hidden States)
            DefaultTableModel modelPi = new DefaultTableModel(col,1);
            pi = new double[col.length];
            for(int i=0;i<pi.length;i++){
                pi[i]=-1;
            }
                //Creating Listener for update pi vector on cell update
            modelPi.addTableModelListener( new TableModelListener(){
                 public void tableChanged(TableModelEvent e){

                     int col = e.getColumn();
                     int row = e.getLastRow();

                     DefaultTableModel md = (DefaultTableModel)e.getSource();
                     if( col < 0 ){
                     }else{
                         if(md.getValueAt(row, col).toString().equals("")){
                             pi[col] = -1;
                         }else pi[col]=Double.parseDouble(md.getValueAt(row, col).toString());

                     }
                 }
            });
                //Override renderer for show hint with cell value on mouse move
            jTable2 = new JTable(modelPi){
                @Override
                public Component prepareRenderer(TableCellRenderer renderer,
                                                 int rowIndex, int vColIndex) {
                    Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
                    if (c instanceof JComponent) {
                        JComponent jc = (JComponent)c;
                        if(pi[vColIndex]>=0){
                            jc.setToolTipText(""+pi[vColIndex]);
                        }else{
                            jc.setToolTipText(null);
                        }
                    }
                    return c;
                }
            };
            jScrollPane2.setViewportView(jTable2);
            if(hStates<9){
                jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
            }else{
                jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            }

            //Seeding jTable1 with values of hStatesTransMatrix
            int i,j;
            for(i=0;i<hStates;i++){
                for(j=0;j<hStates;j++){
                    String buf = T2MTKCommon.parseCientificNot(hStatesTransMatrix[i][j]);
                    jTable1.setValueAt(buf, i, j);
                }
            }

            //Ajusting componemts related at symbols generating probabilities
            jSpinner1.setValue(2);
            String itens[] = new String[hStates];
            for(i=0;i<hStates;i++){
                itens[i]=i+"";
            }
            DefaultComboBoxModel model = new DefaultComboBoxModel(itens);
            jComboBox1.setModel(model);
            jPanel3.setVisible(true);
            jPanel4.setVisible(true);

            //Removing temporary file
            hmmAMatrixFile.delete();

        }

    }

    /**
    * @param args the command line arguments
    */
    public void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new T2MTKHmmReadForm().setVisible(true);
            }

        });
    }

    private double hStatesTransMatrix[][]=null;
    public static double[][] symGenTables;
    private double[] pi;  // hidden states initial probabilities
    private String currdir = T2MTKCommon.currdir;
    private String currmodel = T2MTKCommon.currmodel;
    public T2MTKHmm hmm;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration//GEN-END:variables

}
