/*
 * Copyright (C) 1999-2009, Edmundo Albuquerque de Souza e Silva.
 *
 * This file may be distributed under the terms of the Q Public License
 * as defined by Trolltech AS of Norway and appearing in the file
 * LICENSE.QPL included in the packaging of this file.
 *
 * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING
 * THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

/******************************************************************************
 *
 *      Change Log:
 *
 *	Last Modifications:
 *           Hugo Sato 05 Jul 2003 - This code was a mess....
 *           Hugo Sato 11 Jul 2003 - RTT traffic generation mode was implemented
 *           Hugo Sato 28 Aug 2003 - RTT Packet Pair is being implemented
 *           Hugo Sato 26 Sep 2003 - Set1, Set2, Set3 are implemented.
 *           Hugo Sato 17 Oct 2003 - Few bugs fixed.
 *           Hugo Sato 20 Nov 2003 - Receiver Daemon copy to remote host 
 *           Hugo Sato 21 Jan 2004 - Generating compressed trace
 *
 *           ~~~~~~~~~~~~ DONT FORGET THE PROGRAMMING RULES ~~~~~~~~~~~~
 *
 *
 *	Tool: Traffic Generator Interface
 *	LAND - UFRJ/COPPE/COS      
 *
 ******************************************************************************/
package Tangram2;

import javax.swing.JComponent;
import java.io.RandomAccessFile;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import java.lang.Integer;

public class T2traffic extends javax.swing.JFrame {
    
    /** Initializes the Form */
    public T2traffic() {
        initComponents();
        initComponentsManual();
        holder = null;
        pack();
        
    }
    public T2traffic(java.lang.String s) {
        
        initComponents();
        initComponentsManual();
        
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseAndExitActionPerformed(evt);
            }
        }
        );
        
        holder = s;
        
        pack();
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jB_Run = new javax.swing.JButton();
        jB_Close = new javax.swing.JButton();
        jL_Tangram_Picture = new javax.swing.JLabel();
        jP_Traffic_Generator_Main = new javax.swing.JPanel();
        jP_Line1 = new javax.swing.JPanel();
        jTP_Traffic_Protocol = new javax.swing.JTabbedPane();
        jP_IP = new javax.swing.JPanel();
        jP_receiver = new javax.swing.JPanel();
        jCB_receiver = new javax.swing.JCheckBox();
        jL_login = new javax.swing.JLabel();
        jTF_login = new javax.swing.JTextField();
        jTB_ssh = new javax.swing.JToggleButton();
        jTB_rsh = new javax.swing.JToggleButton();
        jL_shell = new javax.swing.JLabel();
        jTF_ssh_port = new javax.swing.JTextField();
        jL_ssh_port = new javax.swing.JLabel();
        jP_trace_file = new javax.swing.JPanel();
        jCB_ReceiverPath = new javax.swing.JCheckBox();
        jCB_ReceiverCopy = new javax.swing.JCheckBox();
        jTF_trace_name = new javax.swing.JTextField();
        jL_trace = new javax.swing.JLabel();
        jL_ReceiverPath = new javax.swing.JLabel();
        jTF_ReceiverPath = new javax.swing.JTextField();
        jCB_compact = new javax.swing.JCheckBox();
        jP_IP_Destination = new javax.swing.JPanel();
        jL_IP_Destination_Host = new javax.swing.JLabel();
        jL_IP_Destination_Port = new javax.swing.JLabel();
        jTF_IP_Destination_Host = new javax.swing.JTextField();
        jTF_IP_Destination_Port = new javax.swing.JTextField();
        jTB_IP_Connection_Type_Unicast = new javax.swing.JToggleButton();
        jTB_IP_Connection_Type_Multicast = new javax.swing.JToggleButton();
        jP_ATM = new javax.swing.JPanel();
        jP_ATM_Destination = new javax.swing.JPanel();
        jL_ATM_Destination_VPi = new javax.swing.JLabel();
        jL_ATM_Destination_VCi = new javax.swing.JLabel();
        jTF_ATM_Destination_VPi = new javax.swing.JTextField();
        jTF_ATM_Destination_VCi = new javax.swing.JTextField();
        jP_ATM_Traffic_Class = new javax.swing.JPanel();
        jL_ATM_Traffic_Class_Peak_Rate = new javax.swing.JLabel();
        jTF_ATM_Traffic_Class_Peak_Rate = new javax.swing.JTextField();
        jTB_ATM_Traffic_Class_UBR = new javax.swing.JToggleButton();
        jTB_ATM_Traffic_Class_CBR = new javax.swing.JToggleButton();
        jP_Line2 = new javax.swing.JPanel();
        jP_Packet = new javax.swing.JPanel();
        jL_Packet_Size = new javax.swing.JLabel();
        jTF_Packet_Size = new javax.swing.JTextField();
        jP_Interval_Between_Packets = new javax.swing.JPanel();
        jP_Interval_Between_Packets_Buttons = new javax.swing.JPanel();
        jTB_Interval_Between_Packets_Min = new javax.swing.JToggleButton();
        jTB_Interval_Between_Packets_Max = new javax.swing.JToggleButton();
        jL_Interval_Between_Packets = new javax.swing.JLabel();
        jP_Tot_Gen_Time = new javax.swing.JPanel();
        jL_Tot_Gen_Time = new javax.swing.JLabel();
        jTF_Tot_Gen_Time = new javax.swing.JTextField();
        jTP_Traffic_Types_Top = new javax.swing.JTabbedPane();
        jP_OneWay_Mode = new javax.swing.JPanel();
        jTP_OneWay_Mode = new javax.swing.JTabbedPane();
        jP_OneWay_CBR = new javax.swing.JPanel();
        jP_OneWay_CBR_1 = new javax.swing.JPanel();
        jL_CBR_Frame_Size = new javax.swing.JLabel();
        jTF_CBR_Frame_Size = new javax.swing.JTextField();
        jL_CBR_Frame_Time = new javax.swing.JLabel();
        jTF_CBR_Frame_Time = new javax.swing.JTextField();
        jP_OneWay_Markov_Modulated = new javax.swing.JPanel();
        jP_OneWay_Markov_Modulated_Model = new javax.swing.JPanel();
        jL_OneWay_Markov_Modulated_Model_Name = new javax.swing.JLabel();
        jTF_OneWay_Markov_Modulated_Model_Name = new javax.swing.JTextField();
        jB_OneWay_Markov_Modulated_Model_Name_File_Chooser = new javax.swing.JButton();
        jL_OneWay_Markov_Modulated_Rewards_Name = new javax.swing.JLabel();
        jTF_OneWay_Markov_Modulated_Rewards_Name = new javax.swing.JTextField();
        jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser = new javax.swing.JButton();
        jP_OneWay_Markov_Modulated_Frame_Size = new javax.swing.JPanel();
        jL_OneWay_Markov_Modulated_Frame_Size = new javax.swing.JLabel();
        jTF_OneWay_Markov_Modulated_Frame_Size = new javax.swing.JTextField();
        jP_OneWay_Trace = new javax.swing.JPanel();
        jP_OneWay_Trace_Description_File = new javax.swing.JPanel();
        jL_OneWay_Trace_Description_File_Name = new javax.swing.JLabel();
        jTF_OneWay_Trace_Description_File_Name = new javax.swing.JTextField();
        jB_OneWay_Trace_Description_File_Name_File_Chosser = new javax.swing.JButton();
        jL_OneWay_Trace_Description_File_Multiplier = new javax.swing.JLabel();
        jTF_OneWay_Trace_Description_File_Multiplier = new javax.swing.JTextField();
        jP_TwoWays_Mode = new javax.swing.JPanel();
        jTP_TwoWays_Mode = new javax.swing.JTabbedPane();
        jP_TwoWay_CBR = new javax.swing.JPanel();
        jP_TwoWay_CBR_1 = new javax.swing.JPanel();
        jL_TwoWay_CBR_Frame_Time = new javax.swing.JLabel();
        jTF_TwoWay_CBR_Frame_Time = new javax.swing.JTextField();
        jL_TwoWay_CBR_Number_of_Packets = new javax.swing.JLabel();
        jTF_TwoWay_CBR_Number_of_Packets = new javax.swing.JTextField();
        jP_TwoWay_PacketPair = new javax.swing.JPanel();
        jP_TwoWay_PacketPair_1 = new javax.swing.JPanel();
        jL_TwoWay_PacketPair_Number_of_Packets = new javax.swing.JLabel();
        jTF_TwoWay_PacketPair_Number_of_Packets = new javax.swing.JTextField();
        jL_TwoWay_PacketPair_Frame_Time = new javax.swing.JLabel();
        jTF_TwoWay_PacketPair_Frame_Time = new javax.swing.JTextField();
        jP_TwoWay_aTrace = new javax.swing.JPanel();
        jP_TwoWay_aTrace1 = new javax.swing.JPanel();
        jL_TwoWay_aTrace_Description_File_Tracefile = new javax.swing.JLabel();
        jTF_TwoWay_aTrace_Description_File_Tracefile = new javax.swing.JTextField();
        jB_TwoWay_aTrace_Description_File_Name_TraceFile_Chooser = new javax.swing.JButton();
        jL_TwoWay_aTrace_Description_File_InputFile = new javax.swing.JLabel();
        jB_TwoWay_aTrace_Description_File_Name_InputFile_Chooser = new javax.swing.JButton();
        jTF_TwoWay_aTrace_Description_File_InputFile = new javax.swing.JTextField();
        jTF_TwoWay_aTrace_Description_File_Skew = new javax.swing.JTextField();
        jTF_TwoWay_aTrace_Description_File_Offset = new javax.swing.JTextField();
        jTF_TwoWay_aTrace_Description_File_Startx = new javax.swing.JTextField();
        jL_TwoWay_aTrace_Description_File_Startx = new javax.swing.JLabel();
        jL_TwoWay_aTrace_Description_File_Skew = new javax.swing.JLabel();
        jL_TwoWay_aTrace_Description_File_Offset = new javax.swing.JLabel();
        jP_RTT_Mode = new javax.swing.JPanel();
        jTP_RTT_Mode = new javax.swing.JTabbedPane();
        jP_RTT_CBR = new javax.swing.JPanel();
        jP_RTT_CBR1 = new javax.swing.JPanel();
        jL_Set3_CBR_Frame_Time = new javax.swing.JLabel();
        jTF_Set3_CBR_Frame_Time = new javax.swing.JTextField();
        jP_RTT_Markov_Modulated = new javax.swing.JPanel();
        jP_RTT_Markov_Modulated_Model = new javax.swing.JPanel();
        jL_RTT_Markov_Modulated_Model_Name = new javax.swing.JLabel();
        jTF_RTT_Markov_Modulated_Model_Name = new javax.swing.JTextField();
        jB_RTT_Markov_Modulated_Model_Name_File_Chooser = new javax.swing.JButton();
        jL_RTT_Markov_Modulated_Rewards_Name = new javax.swing.JLabel();
        jTF_RTT_Markov_Modulated_Rewards_Name = new javax.swing.JTextField();
        jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser = new javax.swing.JButton();
        jP_RTT_Markov_Modulated_Frame_Size = new javax.swing.JPanel();
        jL_RTT_Markov_Modulated_Frame_Size = new javax.swing.JLabel();
        jTF_RTT_Markov_Modulated_Frame_Size = new javax.swing.JTextField();
        jP_RTT_Trace = new javax.swing.JPanel();
        jP_RTT_Trace_Description_File = new javax.swing.JPanel();
        jL_RTT_Trace_Description_File_Name = new javax.swing.JLabel();
        jTF_RTT_Trace_Description_File_Name = new javax.swing.JTextField();
        jB_RTT_Trace_Description_File_Name_File_Chosser = new javax.swing.JButton();
        jL_RTT_Trace_Description_File_Multiplier = new javax.swing.JLabel();
        jTF_RTT_Trace_Description_File_Multiplier = new javax.swing.JTextField();
        jP_RTT_PacketPair = new javax.swing.JPanel();
        jP_RTT_PacketPair1 = new javax.swing.JPanel();
        jL_RTT_PacketPair_Frame_Time = new javax.swing.JLabel();
        jTF_RTT_PacketPair_Frame_Time = new javax.swing.JTextField();
        jL_RTT_PacketPair_Number_of_Packets = new javax.swing.JLabel();
        jTF_RTT_PacketPair_Number_of_Packets = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jB_measures = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Tangram II [Traffic Generator]");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jB_Run.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Run.setToolTipText("Run traffic generator");
        jB_Run.setLabel("Run");
        jB_Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_RunActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Run, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 110, 30));

        jB_Close.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_Close.setText("Close");
        jB_Close.setToolTipText("Close this window");
        jB_Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_CloseActionPerformed(evt);
            }
        });

        getContentPane().add(jB_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, 110, 30));

        jL_Tangram_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Tangram2/imgs/tang_traffic.gif")));
        getContentPane().add(jL_Tangram_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 460, 120, 30));

        jP_Traffic_Generator_Main.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Traffic_Generator_Main.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Line1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Line1.setForeground(java.awt.Color.gray);
        jP_Traffic_Generator_Main.add(jP_Line1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 175, 620, 1));

        jTP_Traffic_Protocol.setToolTipText("Traffic Protocol");
        jTP_Traffic_Protocol.setFont(new java.awt.Font("Dialog", 1, 9));
        jP_IP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_IP.setToolTipText("IP");
        jP_receiver.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_receiver.setBorder(new javax.swing.border.TitledBorder(null, " Remote Host Options ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jCB_receiver.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_receiver.setSelected(true);
        jCB_receiver.setToolTipText("Collects the packets at remote host");
        jCB_receiver.setLabel("Run receiver at remote host");
        jCB_receiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_receiverActionPerformed(evt);
            }
        });
        jCB_receiver.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCB_receiverStateChanged(evt);
            }
        });

        jP_receiver.add(jCB_receiver, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        jL_login.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_login.setText("Remote Login:");
        jP_receiver.add(jL_login, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 45, -1, 20));

        jTF_login.setToolTipText("Login at Remote Host");
        jP_receiver.add(jTF_login, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 120, 20));

        jTB_ssh.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_ssh.setSelected(true);
        jTB_ssh.setText("SSH");
        jTB_ssh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_sshActionPerformed(evt);
            }
        });

        jP_receiver.add(jTB_ssh, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 60, 20));

        jTB_rsh.setText("RSH");
        jTB_rsh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_rshActionPerformed(evt);
            }
        });

        jP_receiver.add(jTB_rsh, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 60, 20));

        jL_shell.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_shell.setText("Shell Command:");
        jP_receiver.add(jL_shell, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        jTF_ssh_port.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_ssh_port.setText("22");
        jTF_ssh_port.setToolTipText("Login at Remote Host");
        jP_receiver.add(jTF_ssh_port, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 120, 20));

        jL_ssh_port.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_ssh_port.setText("SSH Port:");
        jP_receiver.add(jL_ssh_port, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, 20));

        jP_trace_file.setLayout(null);

        jP_trace_file.setBorder(new javax.swing.border.TitledBorder(null, "Trace File Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11)));
        jCB_ReceiverPath.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_ReceiverPath.setText("Set Path");
        jCB_ReceiverPath.setToolTipText("Set Receiver Directory at Local Host(Leave it not checked if receiver Directory is in System Path).");
        jCB_ReceiverPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_ReceiverPathActionPerformed(evt);
            }
        });
        jCB_ReceiverPath.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCB_ReceiverPathStateChanged(evt);
            }
        });

        jP_trace_file.add(jCB_ReceiverPath);
        jCB_ReceiverPath.setBounds(10, 15, 70, 23);

        jCB_ReceiverCopy.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_ReceiverCopy.setText("Copy Receiver");
        jCB_ReceiverCopy.setToolTipText("Copy Receiver to Remote Host (Do it once for each Remote Host).");
        jCB_ReceiverCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_ReceiverCopyActionPerformed(evt);
            }
        });
        jCB_ReceiverCopy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCB_ReceiverCopyStateChanged(evt);
            }
        });

        jP_trace_file.add(jCB_ReceiverCopy);
        jCB_ReceiverCopy.setBounds(140, 15, 100, 23);

        jTF_trace_name.setToolTipText("Trace File Generated by Receiver");
        jP_trace_file.add(jTF_trace_name);
        jTF_trace_name.setBounds(115, 63, 160, 20);

        jL_trace.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_trace.setText("Trace File Name:");
        jP_trace_file.add(jL_trace);
        jL_trace.setBounds(10, 65, 85, 15);

        jL_ReceiverPath.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_ReceiverPath.setText("Receiver Directory:");
        jL_ReceiverPath.setToolTipText("Receiver Directory at Remote Host.");
        jP_trace_file.add(jL_ReceiverPath);
        jL_ReceiverPath.setBounds(10, 40, 97, 15);

        jTF_ReceiverPath.setToolTipText("Receiver Path at Remote Host.");
        jTF_ReceiverPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_ReceiverPathFocusLost(evt);
            }
        });

        jP_trace_file.add(jTF_ReceiverPath);
        jTF_ReceiverPath.setBounds(115, 40, 160, 20);

        jCB_compact.setFont(new java.awt.Font("Dialog", 1, 10));
        jCB_compact.setText("Generate compressed trace");
        jP_trace_file.add(jCB_compact);
        jCB_compact.setBounds(10, 90, 168, 23);

        jP_receiver.add(jP_trace_file, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 285, 117));

        jP_IP.add(jP_receiver, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 530, 130));

        jP_IP_Destination.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_IP_Destination.setBorder(new javax.swing.border.TitledBorder(null, " Destination ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_IP_Destination_Host.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_IP_Destination_Host.setText("Host: ");
        jP_IP_Destination.add(jL_IP_Destination_Host, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        jL_IP_Destination_Port.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_IP_Destination_Port.setText("Port: ");
        jP_IP_Destination.add(jL_IP_Destination_Port, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, -1, 20));

        jTF_IP_Destination_Host.setToolTipText("Host Name or IP address");
        jP_IP_Destination.add(jTF_IP_Destination_Host, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 155, 20));

        jTF_IP_Destination_Port.setToolTipText("Port number");
        jP_IP_Destination.add(jTF_IP_Destination_Port, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 80, 20));

        jTB_IP_Connection_Type_Unicast.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_IP_Connection_Type_Unicast.setSelected(true);
        jTB_IP_Connection_Type_Unicast.setText("Unicast");
        jTB_IP_Connection_Type_Unicast.setToolTipText("Unicast Generation");
        jP_IP_Destination.add(jTB_IP_Connection_Type_Unicast, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 80, 20));

        jTB_IP_Connection_Type_Multicast.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_IP_Connection_Type_Multicast.setText("Multicast");
        jTB_IP_Connection_Type_Multicast.setToolTipText("Multicast Generation");
        jP_IP_Destination.add(jTB_IP_Connection_Type_Multicast, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 90, 20));

        jP_IP.add(jP_IP_Destination, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 50));

        jTP_Traffic_Protocol.addTab("IP", null, jP_IP, "");

        jP_ATM.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_ATM.setToolTipText("ATM");
        jP_ATM_Destination.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_ATM_Destination.setBorder(new javax.swing.border.TitledBorder(null, " Destination ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_ATM_Destination_VPi.setText("VPi: ");
        jL_ATM_Destination_VPi.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_ATM_Destination.add(jL_ATM_Destination_VPi, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, 20));

        jL_ATM_Destination_VCi.setText("VCi: ");
        jL_ATM_Destination_VCi.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_ATM_Destination.add(jL_ATM_Destination_VCi, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        jTF_ATM_Destination_VPi.setToolTipText("Virtual Path identifier");
        jTF_ATM_Destination_VPi.setText("0");
        jP_ATM_Destination.add(jTF_ATM_Destination_VPi, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 210, 20));

        jTF_ATM_Destination_VCi.setToolTipText("Virtual Circuit identifier");
        jTF_ATM_Destination_VCi.setText("100");
        jP_ATM_Destination.add(jTF_ATM_Destination_VCi, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 210, 20));

        jP_ATM.add(jP_ATM_Destination, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 280, 190));

        jP_ATM_Traffic_Class.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_ATM_Traffic_Class.setBorder(new javax.swing.border.TitledBorder(null, " Traffic Class ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_ATM_Traffic_Class_Peak_Rate.setText("Peak rate (bytes): ");
        jL_ATM_Traffic_Class_Peak_Rate.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_ATM_Traffic_Class_Peak_Rate.setEnabled(false);
        jP_ATM_Traffic_Class.add(jL_ATM_Traffic_Class_Peak_Rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, 20));

        jTF_ATM_Traffic_Class_Peak_Rate.setEnabled(false);
        jP_ATM_Traffic_Class.add(jTF_ATM_Traffic_Class_Peak_Rate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 69, 20));

        jTB_ATM_Traffic_Class_UBR.setToolTipText("Unespecified Bit Rate");
        jTB_ATM_Traffic_Class_UBR.setSelected(true);
        jTB_ATM_Traffic_Class_UBR.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_ATM_Traffic_Class_UBR.setText("UBR");
        jP_ATM_Traffic_Class.add(jTB_ATM_Traffic_Class_UBR, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 95, 20));

        jTB_ATM_Traffic_Class_CBR.setToolTipText("Constant Bit Rate");
        jTB_ATM_Traffic_Class_CBR.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_ATM_Traffic_Class_CBR.setText("CBR");
        jTB_ATM_Traffic_Class_CBR.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTB_ATM_Traffic_Class_CBRStateChanged(evt);
            }
        });

        jP_ATM_Traffic_Class.add(jTB_ATM_Traffic_Class_CBR, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 95, 20));

        jP_ATM.add(jP_ATM_Traffic_Class, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 5, 235, 190));

        jTP_Traffic_Protocol.addTab("ATM", null, jP_ATM, "");

        jP_Traffic_Generator_Main.add(jTP_Traffic_Protocol, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 175, 535, -1));

        jP_Line2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.gray));
        jP_Line2.setForeground(java.awt.Color.gray);
        jP_Traffic_Generator_Main.add(jP_Line2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 400, 700, 1));

        jP_Packet.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Packet.setBorder(new javax.swing.border.TitledBorder(null, " Packet ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jP_Packet.setToolTipText("Packet Size");
        jL_Packet_Size.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Packet_Size.setText("Size (bytes): ");
        jP_Packet.add(jL_Packet_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jTF_Packet_Size.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_Packet_Size.setToolTipText("Frame will be fragmented into packets.");
        jP_Packet.add(jTF_Packet_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 95, 20));

        jP_Interval_Between_Packets.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Packet.add(jP_Interval_Between_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 45, 180, -1));

        jP_Interval_Between_Packets_Buttons.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTB_Interval_Between_Packets_Min.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Interval_Between_Packets_Min.setSelected(true);
        jTB_Interval_Between_Packets_Min.setText("Min");
        jTB_Interval_Between_Packets_Min.setToolTipText("Packets will be sent at board nominal rate");
        jP_Interval_Between_Packets_Buttons.add(jTB_Interval_Between_Packets_Min, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 60, 20));

        jTB_Interval_Between_Packets_Max.setFont(new java.awt.Font("Dialog", 1, 10));
        jTB_Interval_Between_Packets_Max.setText("Max");
        jTB_Interval_Between_Packets_Max.setToolTipText("Packets will be spread over interval between frames");
        jP_Interval_Between_Packets_Buttons.add(jTB_Interval_Between_Packets_Max, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 60, 20));

        jP_Packet.add(jP_Interval_Between_Packets_Buttons, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, -1, -1));

        jL_Interval_Between_Packets.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Interval_Between_Packets.setText("Interval between packets: ");
        jP_Packet.add(jL_Interval_Between_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, -1, 20));

        jP_Traffic_Generator_Main.add(jP_Packet, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 405, 287, 70));

        jP_Tot_Gen_Time.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_Tot_Gen_Time.setBorder(new javax.swing.border.TitledBorder(null, " Total Generation Time ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_Tot_Gen_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Tot_Gen_Time.setText("Time (secs): ");
        jP_Tot_Gen_Time.add(jL_Tot_Gen_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jTF_Tot_Gen_Time.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_Tot_Gen_Time.setToolTipText("Total time of packet generation");
        jP_Tot_Gen_Time.add(jTF_Tot_Gen_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 28, 95, 20));

        jP_Traffic_Generator_Main.add(jP_Tot_Gen_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 405, 244, 70));

        jTP_Traffic_Types_Top.setToolTipText("Traffic Generation Modes");
        jTP_Traffic_Types_Top.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_Traffic_Types_Top.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTP_Traffic_Types_TopMouseClicked(evt);
            }
        });

        jP_OneWay_Mode.setToolTipText("One Way");
        jTP_OneWay_Mode.setToolTipText("Generation Models for OneWay");
        jTP_OneWay_Mode.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_OneWay_Mode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTP_OneWay_ModeMouseClicked(evt);
            }
        });

        jP_OneWay_CBR.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_OneWay_CBR_1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_OneWay_CBR_1.setBorder(new javax.swing.border.TitledBorder(null, " Segment ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jP_OneWay_CBR_1.setToolTipText("Deterministic");
        jL_CBR_Frame_Size.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_CBR_Frame_Size.setText("Size (bytes): ");
        jP_OneWay_CBR_1.add(jL_CBR_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, 20));

        jTF_CBR_Frame_Size.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_CBR_Frame_Size.setToolTipText("Frame Size");
        jP_OneWay_CBR_1.add(jTF_CBR_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 95, 20));

        jL_CBR_Frame_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_CBR_Frame_Time.setText("Time (secs):");
        jP_OneWay_CBR_1.add(jL_CBR_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, 20));

        jTF_CBR_Frame_Time.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_CBR_Frame_Time.setToolTipText("Interval between packets");
        jP_OneWay_CBR_1.add(jTF_CBR_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 95, 20));

        jP_OneWay_CBR.add(jP_OneWay_CBR_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_OneWay_Mode.addTab("CBR", null, jP_OneWay_CBR, "");

        jP_OneWay_Markov_Modulated.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_OneWay_Markov_Modulated.setToolTipText("Morkovian Models Based Generation");
        jP_OneWay_Markov_Modulated_Model.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_OneWay_Markov_Modulated_Model.setBorder(new javax.swing.border.TitledBorder(null, " Model ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_OneWay_Markov_Modulated_Model_Name.setText("Name: ");
        jL_OneWay_Markov_Modulated_Model_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_OneWay_Markov_Modulated_Model.add(jL_OneWay_Markov_Modulated_Model_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, 20));

        jTF_OneWay_Markov_Modulated_Model_Name.setToolTipText("Model Name");
        jTF_OneWay_Markov_Modulated_Model_Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_OneWay_Markov_Modulated_Model_NameFocusLost(evt);
            }
        });
        jTF_OneWay_Markov_Modulated_Model_Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTF_OneWay_Markov_Modulated_Model_NameKeyReleased(evt);
            }
        });

        jP_OneWay_Markov_Modulated_Model.add(jTF_OneWay_Markov_Modulated_Model_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 25, 200, 20));

        jB_OneWay_Markov_Modulated_Model_Name_File_Chooser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_OneWay_Markov_Modulated_Model_Name_File_Chooser.setText("...");
        jB_OneWay_Markov_Modulated_Model_Name_File_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_OneWay_Markov_Modulated_Model_Name_File_ChooserActionPerformed(evt);
            }
        });

        jP_OneWay_Markov_Modulated_Model.add(jB_OneWay_Markov_Modulated_Model_Name_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 25, 22, 20));

        jL_OneWay_Markov_Modulated_Rewards_Name.setText("Reward: ");
        jL_OneWay_Markov_Modulated_Rewards_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
        jP_OneWay_Markov_Modulated_Model.add(jL_OneWay_Markov_Modulated_Rewards_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 55, -1, 20));

        jTF_OneWay_Markov_Modulated_Rewards_Name.setEditable(false);
        jTF_OneWay_Markov_Modulated_Rewards_Name.setToolTipText("Reward Model File");
        jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
        jP_OneWay_Markov_Modulated_Model.add(jTF_OneWay_Markov_Modulated_Rewards_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 55, 200, 20));

        jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setText("...");
        jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
        jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_OneWay_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed(evt);
            }
        });

        jP_OneWay_Markov_Modulated_Model.add(jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 55, 22, 20));

        jP_OneWay_Markov_Modulated.add(jP_OneWay_Markov_Modulated_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 325, 90));

        jP_OneWay_Markov_Modulated_Frame_Size.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_OneWay_Markov_Modulated_Frame_Size.setBorder(new javax.swing.border.TitledBorder(null, " Frame ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_OneWay_Markov_Modulated_Frame_Size.setText("Size (bytes):");
        jL_OneWay_Markov_Modulated_Frame_Size.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_OneWay_Markov_Modulated_Frame_Size.add(jL_OneWay_Markov_Modulated_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, -1));

        jTF_OneWay_Markov_Modulated_Frame_Size.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_OneWay_Markov_Modulated_Frame_Size.setToolTipText("Frame Size");
        jP_OneWay_Markov_Modulated_Frame_Size.add(jTF_OneWay_Markov_Modulated_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 20, 75, 20));

        jP_OneWay_Markov_Modulated.add(jP_OneWay_Markov_Modulated_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 5, 190, 90));

        jTP_OneWay_Mode.addTab("Markov Modulated", null, jP_OneWay_Markov_Modulated, "");

        jP_OneWay_Trace.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_OneWay_Trace_Description_File.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_OneWay_Trace_Description_File.setBorder(new javax.swing.border.TitledBorder(null, " Description File ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jP_OneWay_Trace_Description_File.setToolTipText("Trace File Model");
        jL_OneWay_Trace_Description_File_Name.setText("Name: ");
        jL_OneWay_Trace_Description_File_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_OneWay_Trace_Description_File.add(jL_OneWay_Trace_Description_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, 20));

        jTF_OneWay_Trace_Description_File_Name.setToolTipText("Trace File Name");
        jTF_OneWay_Trace_Description_File_Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_OneWay_Trace_Description_File_NameFocusLost(evt);
            }
        });

        jP_OneWay_Trace_Description_File.add(jTF_OneWay_Trace_Description_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 25, 385, 20));

        jB_OneWay_Trace_Description_File_Name_File_Chosser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_OneWay_Trace_Description_File_Name_File_Chosser.setText("...");
        jB_OneWay_Trace_Description_File_Name_File_Chosser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_OneWay_Trace_Description_File_Name_File_ChosserActionPerformed(evt);
            }
        });

        jP_OneWay_Trace_Description_File.add(jB_OneWay_Trace_Description_File_Name_File_Chosser, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 25, 22, 20));

        jL_OneWay_Trace_Description_File_Multiplier.setText("Multiplier: ");
        jL_OneWay_Trace_Description_File_Multiplier.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_OneWay_Trace_Description_File.add(jL_OneWay_Trace_Description_File_Multiplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 55, -1, 20));

        jTF_OneWay_Trace_Description_File_Multiplier.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_OneWay_Trace_Description_File_Multiplier.setToolTipText("Number of bytes in trace file will be multiplier by this number");
        jP_OneWay_Trace_Description_File.add(jTF_OneWay_Trace_Description_File_Multiplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 55, 95, 20));

        jP_OneWay_Trace.add(jP_OneWay_Trace_Description_File, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_OneWay_Mode.addTab("Trace", null, jP_OneWay_Trace, "");

        jP_OneWay_Mode.add(jTP_OneWay_Mode);

        jTP_Traffic_Types_Top.addTab("Set 1", jP_OneWay_Mode);

        jP_TwoWays_Mode.setToolTipText("Two Way");
        jTP_TwoWays_Mode.setToolTipText("Generation Models");
        jTP_TwoWays_Mode.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_TwoWays_Mode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTP_TwoWays_ModeMouseClicked(evt);
            }
        });

        jP_TwoWay_CBR.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_TwoWay_CBR.setToolTipText("Deterministic");
        jP_TwoWay_CBR.setEnabled(false);
        jP_TwoWay_CBR_1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_TwoWay_CBR_1.setBorder(new javax.swing.border.TitledBorder(null, " Between Packets ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_TwoWay_CBR_Frame_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_TwoWay_CBR_Frame_Time.setText("Interval (secs):");
        jL_TwoWay_CBR_Frame_Time.setEnabled(false);
        jP_TwoWay_CBR_1.add(jL_TwoWay_CBR_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 20));

        jTF_TwoWay_CBR_Frame_Time.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_TwoWay_CBR_Frame_Time.setText("0.1");
        jTF_TwoWay_CBR_Frame_Time.setToolTipText("Interval between packets");
        jTF_TwoWay_CBR_Frame_Time.setEnabled(false);
        jP_TwoWay_CBR_1.add(jTF_TwoWay_CBR_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 95, 20));

        jL_TwoWay_CBR_Number_of_Packets.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_TwoWay_CBR_Number_of_Packets.setText("Number of Packets:");
        jL_TwoWay_CBR_Number_of_Packets.setToolTipText("Number of Packets of each class (32, 50, 200 and 500 bytes)");
        jP_TwoWay_CBR_1.add(jL_TwoWay_CBR_Number_of_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, 20));

        jTF_TwoWay_CBR_Number_of_Packets.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_TwoWay_CBR_Number_of_Packets.setToolTipText("Number of Packets of each class (32, 50, 200 and 500 bytes)");
        jP_TwoWay_CBR_1.add(jTF_TwoWay_CBR_Number_of_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 95, 20));

        jP_TwoWay_CBR.add(jP_TwoWay_CBR_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_TwoWays_Mode.addTab("CBR", null, jP_TwoWay_CBR, "");

        jP_TwoWay_PacketPair.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_TwoWay_PacketPair.setToolTipText("Packet Pair Generation");
        jP_TwoWay_PacketPair_1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_TwoWay_PacketPair_1.setBorder(new javax.swing.border.TitledBorder(null, " Between Pairs", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_TwoWay_PacketPair_Number_of_Packets.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_TwoWay_PacketPair_Number_of_Packets.setText("Number of Packets:");
        jL_TwoWay_PacketPair_Number_of_Packets.setToolTipText("Number of Packets of each class (32, 50, 200 and 500 bytes)");
        jP_TwoWay_PacketPair_1.add(jL_TwoWay_PacketPair_Number_of_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, 20));

        jTF_TwoWay_PacketPair_Number_of_Packets.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_TwoWay_PacketPair_Number_of_Packets.setToolTipText("Number of Packets of each class (32, 50, 200 and 500 bytes)");
        jP_TwoWay_PacketPair_1.add(jTF_TwoWay_PacketPair_Number_of_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 95, 20));

        jL_TwoWay_PacketPair_Frame_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_TwoWay_PacketPair_Frame_Time.setText("Interval (secs):");
        jL_TwoWay_PacketPair_Frame_Time.setToolTipText("Interval between packets");
        jP_TwoWay_PacketPair_1.add(jL_TwoWay_PacketPair_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 20));

        jTF_TwoWay_PacketPair_Frame_Time.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_TwoWay_PacketPair_Frame_Time.setToolTipText("Interval between packets");
        jP_TwoWay_PacketPair_1.add(jTF_TwoWay_PacketPair_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 95, 20));

        jP_TwoWay_PacketPair.add(jP_TwoWay_PacketPair_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_TwoWays_Mode.addTab("Packet Pair", jP_TwoWay_PacketPair);

        jP_TwoWay_aTrace.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_TwoWay_aTrace.setToolTipText("Adjust Trace Model");
        jP_TwoWay_aTrace1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_TwoWay_aTrace1.setBorder(new javax.swing.border.TitledBorder(null, " Description File ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_TwoWay_aTrace_Description_File_Tracefile.setText("Trace file:");
        jL_TwoWay_aTrace_Description_File_Tracefile.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_TwoWay_aTrace1.add(jL_TwoWay_aTrace_Description_File_Tracefile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 20));

        jP_TwoWay_aTrace1.add(jTF_TwoWay_aTrace_Description_File_Tracefile, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 120, 20));

        jB_TwoWay_aTrace_Description_File_Name_TraceFile_Chooser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_TwoWay_aTrace_Description_File_Name_TraceFile_Chooser.setText("...");
        jB_TwoWay_aTrace_Description_File_Name_TraceFile_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_TwoWay_aTrace_Description_File_Name_TraceFile_ChooserActionPerformed(evt);
            }
        });

        jP_TwoWay_aTrace1.add(jB_TwoWay_aTrace_Description_File_Name_TraceFile_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 22, 20));

        jL_TwoWay_aTrace_Description_File_InputFile.setText("Input file:");
        jL_TwoWay_aTrace_Description_File_InputFile.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_TwoWay_aTrace1.add(jL_TwoWay_aTrace_Description_File_InputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 20));

        jB_TwoWay_aTrace_Description_File_Name_InputFile_Chooser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_TwoWay_aTrace_Description_File_Name_InputFile_Chooser.setText("...");
        jB_TwoWay_aTrace_Description_File_Name_InputFile_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_TwoWay_aTrace_Description_File_Name_InputFile_ChooserActionPerformed(evt);
            }
        });

        jP_TwoWay_aTrace1.add(jB_TwoWay_aTrace_Description_File_Name_InputFile_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 22, 20));

        jP_TwoWay_aTrace1.add(jTF_TwoWay_aTrace_Description_File_InputFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 120, 20));

        jTF_TwoWay_aTrace_Description_File_Skew.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jP_TwoWay_aTrace1.add(jTF_TwoWay_aTrace_Description_File_Skew, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 80, -1));

        jTF_TwoWay_aTrace_Description_File_Offset.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jP_TwoWay_aTrace1.add(jTF_TwoWay_aTrace_Description_File_Offset, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 80, -1));

        jTF_TwoWay_aTrace_Description_File_Startx.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jP_TwoWay_aTrace1.add(jTF_TwoWay_aTrace_Description_File_Startx, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 80, -1));

        jL_TwoWay_aTrace_Description_File_Startx.setText("Start X");
        jL_TwoWay_aTrace_Description_File_Startx.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_TwoWay_aTrace1.add(jL_TwoWay_aTrace_Description_File_Startx, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 13, -1, -1));

        jL_TwoWay_aTrace_Description_File_Skew.setText("Skew");
        jL_TwoWay_aTrace_Description_File_Skew.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_TwoWay_aTrace1.add(jL_TwoWay_aTrace_Description_File_Skew, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 13, -1, -1));

        jL_TwoWay_aTrace_Description_File_Offset.setText("Offset");
        jL_TwoWay_aTrace_Description_File_Offset.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_TwoWay_aTrace1.add(jL_TwoWay_aTrace_Description_File_Offset, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 13, -1, -1));

        jP_TwoWay_aTrace.add(jP_TwoWay_aTrace1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_TwoWays_Mode.addTab("Adjust Trace", null, jP_TwoWay_aTrace, "");

        jP_TwoWays_Mode.add(jTP_TwoWays_Mode);

        jTP_Traffic_Types_Top.addTab("Set 2", jP_TwoWays_Mode);

        jP_RTT_Mode.setToolTipText("Round Trip Traffic RTT");
        jP_RTT_Mode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jP_RTT_ModeMouseClicked(evt);
            }
        });

        jTP_RTT_Mode.setToolTipText("Generation Models");
        jTP_RTT_Mode.setFont(new java.awt.Font("Dialog", 1, 9));
        jTP_RTT_Mode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTP_RTT_ModeMouseClicked(evt);
            }
        });

        jP_RTT_CBR.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_CBR.setToolTipText("Deterministic Generation");
        jP_RTT_CBR.setEnabled(false);
        jP_RTT_CBR1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_CBR1.setBorder(new javax.swing.border.TitledBorder(null, " Segment ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_Set3_CBR_Frame_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_Set3_CBR_Frame_Time.setText("Interval (secs):");
        jP_RTT_CBR1.add(jL_Set3_CBR_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, 20));

        jTF_Set3_CBR_Frame_Time.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_Set3_CBR_Frame_Time.setToolTipText("Interval between packets");
        jP_RTT_CBR1.add(jTF_Set3_CBR_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 95, 20));

        jP_RTT_CBR.add(jP_RTT_CBR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_RTT_Mode.addTab("CBR", null, jP_RTT_CBR, "");

        jP_RTT_Markov_Modulated.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_Markov_Modulated.setToolTipText("Markovian Models based Generation");
        jP_RTT_Markov_Modulated_Model.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_Markov_Modulated_Model.setBorder(new javax.swing.border.TitledBorder(null, " Model ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_RTT_Markov_Modulated_Model_Name.setText("Name: ");
        jL_RTT_Markov_Modulated_Model_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_RTT_Markov_Modulated_Model.add(jL_RTT_Markov_Modulated_Model_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, 20));

        jTF_RTT_Markov_Modulated_Model_Name.setToolTipText("Model Name");
        jTF_RTT_Markov_Modulated_Model_Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_RTT_Markov_Modulated_Model_NameFocusLost(evt);
            }
        });

        jP_RTT_Markov_Modulated_Model.add(jTF_RTT_Markov_Modulated_Model_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 25, 200, 20));

        jB_RTT_Markov_Modulated_Model_Name_File_Chooser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_RTT_Markov_Modulated_Model_Name_File_Chooser.setText("...");
        jB_RTT_Markov_Modulated_Model_Name_File_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_RTT_Markov_Modulated_Model_Name_File_ChooserActionPerformed(evt);
            }
        });

        jP_RTT_Markov_Modulated_Model.add(jB_RTT_Markov_Modulated_Model_Name_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 25, 22, 20));

        jL_RTT_Markov_Modulated_Rewards_Name.setText("Reward: ");
        jL_RTT_Markov_Modulated_Rewards_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
        jP_RTT_Markov_Modulated_Model.add(jL_RTT_Markov_Modulated_Rewards_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 55, -1, 20));

        jTF_RTT_Markov_Modulated_Rewards_Name.setEditable(false);
        jTF_RTT_Markov_Modulated_Rewards_Name.setToolTipText("Reward File");
        jTF_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
        jP_RTT_Markov_Modulated_Model.add(jTF_RTT_Markov_Modulated_Rewards_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 55, 200, 20));

        jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setText("...");
        jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
        jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_RTT_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed(evt);
            }
        });

        jP_RTT_Markov_Modulated_Model.add(jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 55, 22, 20));

        jP_RTT_Markov_Modulated.add(jP_RTT_Markov_Modulated_Model, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 325, 90));

        jP_RTT_Markov_Modulated_Frame_Size.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_Markov_Modulated_Frame_Size.setBorder(new javax.swing.border.TitledBorder(null, " Frame ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_RTT_Markov_Modulated_Frame_Size.setText("Size (bytes):");
        jL_RTT_Markov_Modulated_Frame_Size.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_RTT_Markov_Modulated_Frame_Size.add(jL_RTT_Markov_Modulated_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, -1));

        jTF_RTT_Markov_Modulated_Frame_Size.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_RTT_Markov_Modulated_Frame_Size.setToolTipText("Frame Size");
        jP_RTT_Markov_Modulated_Frame_Size.add(jTF_RTT_Markov_Modulated_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 20, 75, 20));

        jP_RTT_Markov_Modulated.add(jP_RTT_Markov_Modulated_Frame_Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 5, 190, 90));

        jTP_RTT_Mode.addTab("Markov Modulated", null, jP_RTT_Markov_Modulated, "");

        jP_RTT_Trace.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_Trace.setToolTipText("Trace File Generation");
        jP_RTT_Trace_Description_File.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_Trace_Description_File.setBorder(new javax.swing.border.TitledBorder(null, " Description File ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_RTT_Trace_Description_File_Name.setText("Name: ");
        jL_RTT_Trace_Description_File_Name.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_RTT_Trace_Description_File.add(jL_RTT_Trace_Description_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 25, -1, 20));

        jTF_RTT_Trace_Description_File_Name.setToolTipText("Trace File");
        jTF_RTT_Trace_Description_File_Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTF_RTT_Trace_Description_File_NameFocusLost(evt);
            }
        });

        jP_RTT_Trace_Description_File.add(jTF_RTT_Trace_Description_File_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 25, 385, 20));

        jB_RTT_Trace_Description_File_Name_File_Chosser.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_RTT_Trace_Description_File_Name_File_Chosser.setText("...");
        jB_RTT_Trace_Description_File_Name_File_Chosser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_RTT_Trace_Description_File_Name_File_ChosserActionPerformed(evt);
            }
        });

        jP_RTT_Trace_Description_File.add(jB_RTT_Trace_Description_File_Name_File_Chosser, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 25, 22, 20));

        jL_RTT_Trace_Description_File_Multiplier.setText("Multiplier: ");
        jL_RTT_Trace_Description_File_Multiplier.setFont(new java.awt.Font("Dialog", 1, 10));
        jP_RTT_Trace_Description_File.add(jL_RTT_Trace_Description_File_Multiplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 55, -1, 20));

        jTF_RTT_Trace_Description_File_Multiplier.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_RTT_Trace_Description_File_Multiplier.setToolTipText("Number of bytes in trace file will be multiplier by this number");
        jP_RTT_Trace_Description_File.add(jTF_RTT_Trace_Description_File_Multiplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 55, 95, 20));

        jP_RTT_Trace.add(jP_RTT_Trace_Description_File, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_RTT_Mode.addTab("Trace", null, jP_RTT_Trace, "");

        jP_RTT_PacketPair.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_PacketPair.setToolTipText("Packet Pair Generation");
        jP_RTT_PacketPair1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jP_RTT_PacketPair1.setBorder(new javax.swing.border.TitledBorder(null, " Between Pairs", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 10)));
        jL_RTT_PacketPair_Frame_Time.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_RTT_PacketPair_Frame_Time.setText("Interval (secs):");
        jL_RTT_PacketPair_Frame_Time.setToolTipText("Interval Between Packets");
        jP_RTT_PacketPair1.add(jL_RTT_PacketPair_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 20));

        jTF_RTT_PacketPair_Frame_Time.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_RTT_PacketPair_Frame_Time.setToolTipText("Interval Between Packets");
        jP_RTT_PacketPair1.add(jTF_RTT_PacketPair_Frame_Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 95, 20));

        jL_RTT_PacketPair_Number_of_Packets.setFont(new java.awt.Font("Dialog", 1, 10));
        jL_RTT_PacketPair_Number_of_Packets.setText("Number of Packets:");
        jL_RTT_PacketPair_Number_of_Packets.setToolTipText("Number of Packets (500 bytes)");
        jP_RTT_PacketPair1.add(jL_RTT_PacketPair_Number_of_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, 20));

        jTF_RTT_PacketPair_Number_of_Packets.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTF_RTT_PacketPair_Number_of_Packets.setToolTipText("Number of Packets (500 bytes)");
        jP_RTT_PacketPair1.add(jTF_RTT_PacketPair_Number_of_Packets, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 95, 20));

        jP_RTT_PacketPair.add(jP_RTT_PacketPair1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, 520, 90));

        jTP_RTT_Mode.addTab("Packet Pair", jP_RTT_PacketPair);

        jP_RTT_Mode.add(jTP_RTT_Mode);

        jTP_Traffic_Types_Top.addTab("Set 3", jP_RTT_Mode);

        jP_Traffic_Generator_Main.add(jTP_Traffic_Types_Top, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, 535, 160));

        getContentPane().add(jP_Traffic_Generator_Main, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 555, 480));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(685, 460, 1, 1));

        jB_measures.setFont(new java.awt.Font("Dialog", 1, 10));
        jB_measures.setText("Measures");
        jB_measures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_measuresActionPerformed(evt);
            }
        });

        getContentPane().add(jB_measures, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 45, 110, 30));

    }//GEN-END:initComponents

    private void jTB_sshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_sshActionPerformed
        jL_ssh_port.setEnabled(true);
        jTF_ssh_port.setEnabled(true);
    }//GEN-LAST:event_jTB_sshActionPerformed

    private void jTB_rshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_rshActionPerformed
        jL_ssh_port.setEnabled(false);
        jTF_ssh_port.setEnabled(false);
    }//GEN-LAST:event_jTB_rshActionPerformed

    private void jP_RTT_ModeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jP_RTT_ModeMouseClicked



    }//GEN-LAST:event_jP_RTT_ModeMouseClicked


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void jTP_OneWay_ModeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTP_OneWay_ModeMouseClicked
        
        if ( this.jTP_OneWay_Mode.getSelectedIndex() == jTP_OneWay_Mode.indexOfTab("Trace") ) 
        {
            setState( jP_Packet , false );            
        }
        else 
        {
            setState( jP_Packet , true );         
        }
        
    }//GEN-LAST:event_jTP_OneWay_ModeMouseClicked

    private void jTF_ReceiverPathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_ReceiverPathFocusLost
        if( jTF_ReceiverPath.getText().length() > 0 ) 
            if( jTF_ReceiverPath.getText().lastIndexOf("/") != jTF_ReceiverPath.getText().length() - 1 ) jTF_ReceiverPath.setText( jTF_ReceiverPath.getText() + "/" );
    }//GEN-LAST:event_jTF_ReceiverPathFocusLost

    private void jCB_ReceiverCopyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCB_ReceiverCopyStateChanged

        boolean state = jCB_ReceiverCopy.isSelected();
        
        if ( jCB_ReceiverPath.isSelected() == false && state == false )
        {       
            jTF_ReceiverPath.setEnabled( false );
            jL_ReceiverPath.setEnabled( false );
        }
        else
        {       
            jTF_ReceiverPath.setEnabled( true );
            jL_ReceiverPath.setEnabled( true );
        }
             
    }//GEN-LAST:event_jCB_ReceiverCopyStateChanged

    private void jCB_ReceiverCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_ReceiverCopyActionPerformed
        
        boolean state = jCB_ReceiverCopy.isSelected();
        
        if ( jCB_ReceiverPath.isSelected() == false && state == false )
        {      
            jTF_ReceiverPath.setEnabled( false );
            jL_ReceiverPath.setEnabled( false );
        }
        else
        {      
            jTF_ReceiverPath.setEnabled( true );
            jL_ReceiverPath.setEnabled( true );
        }
        
    }//GEN-LAST:event_jCB_ReceiverCopyActionPerformed

    private void jCB_ReceiverPathStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCB_ReceiverPathStateChanged
                
        boolean state = jCB_ReceiverPath.isSelected();
        
        if ( jCB_ReceiverCopy.isSelected() == false && state == false  )
        {
            jTF_ReceiverPath.setEnabled( false );
            jL_ReceiverPath.setEnabled( false );
        }
        else
        {
            jTF_ReceiverPath.setEnabled( true );
            jL_ReceiverPath.setEnabled( true );
        }
            
        
    }//GEN-LAST:event_jCB_ReceiverPathStateChanged

    private void jCB_ReceiverPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_ReceiverPathActionPerformed
        
        boolean state = jCB_ReceiverPath.isSelected();
        
        if ( jCB_ReceiverCopy.isSelected() == false  )
        {
            jTF_ReceiverPath.setEnabled( state );
            jL_ReceiverPath.setEnabled( state );
        }
        
    }//GEN-LAST:event_jCB_ReceiverPathActionPerformed
    
    
    //================== Test trace file name when entered by keyboard ===================
    private void jTF_RTT_Trace_Description_File_NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_RTT_Trace_Description_File_NameFocusLost
        if (!is_in_trace) {
            is_in_trace = true;
            if (jTF_RTT_Trace_Description_File_Name.getText().trim().compareTo("")!= 0) {
                java.io.File file = new java.io.File(jTF_RTT_Trace_Description_File_Name.getText());
                if (!(file.exists())) {
                    javax.swing.JOptionPane.showMessageDialog(this,"The specified trace doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                    is_in_trace = false;
                    return;
                }
            }
            is_in_trace = false;
        }
    }//GEN-LAST:event_jTF_RTT_Trace_Description_File_NameFocusLost
    
    
    //=================== Test Markov Model Name when entered by keyboard ===================
    private void jTF_RTT_Markov_Modulated_Model_NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_RTT_Markov_Modulated_Model_NameFocusLost
        if ( !is_in ) {
            is_in = true;
            if ( jTF_RTT_Markov_Modulated_Model_Name.getText().trim().compareTo("") != 0 )
                test_model_name();
            is_in = false;
        }
    }//GEN-LAST:event_jTF_RTT_Markov_Modulated_Model_NameFocusLost
    
    
    //=================== File Chooser for RTT Trace FIle ===================
    private void jB_RTT_Trace_Description_File_Name_File_ChosserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_RTT_Trace_Description_File_Name_File_ChosserActionPerformed
        if (fchooser_trace.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (fchooser_trace.getSelectedFile().exists()) {
                jTF_RTT_Trace_Description_File_Name.setText(fchooser_trace.getSelectedFile().getAbsolutePath());
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(this,"The specified trace doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jB_RTT_Trace_Description_File_Name_File_ChosserActionPerformed
    
    
    //==================  Reward Name File Chooser for RTT Markovian =================
    private void jB_RTT_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_RTT_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed
        if (fchooser_reward.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (!fchooser_reward.getSelectedFile().exists()) {
                javax.swing.JOptionPane.showMessageDialog(this,"The specified reward doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            jTF_RTT_Markov_Modulated_Rewards_Name.setText(fchooser_reward.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jB_RTT_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed
    
    
    //=================== Model name File Chooser for RTT Markovian =========================
    private void jB_RTT_Markov_Modulated_Model_Name_File_ChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_RTT_Markov_Modulated_Model_Name_File_ChooserActionPerformed
        
        jTF_RTT_Markov_Modulated_Rewards_Name.setText("");
        jTF_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
        jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
        jL_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
        
        if ( fchooser_model.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION ) {
            if ( fchooser_model.getSelectedFile().exists() ) {
                jTF_RTT_Markov_Modulated_Model_Name.setText(fchooser_model.getSelectedFile().getAbsolutePath());
                test_model_name_RTT();
                fchooser_reward.setCurrentDirectory(new java.io.File(directory));
            }
        }
        
    }//GEN-LAST:event_jB_RTT_Markov_Modulated_Model_Name_File_ChooserActionPerformed
    
    
    //=================== Run Receiver at remote host Combo Box =========================
    private void jCB_receiverStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCB_receiverStateChanged
        
        boolean state = jCB_receiver.isSelected();        
 
        jL_login.setEnabled( state );
        jTF_login.setEnabled( state );
        jL_trace.setEnabled( state );
        jTF_trace_name.setEnabled( state );
        jCB_compact.setEnabled( state );
        jL_shell.setEnabled( state );
        jTB_ssh.setEnabled( state );
        jTB_rsh.setEnabled( state );
        jCB_ReceiverPath.setEnabled( state );
        jCB_ReceiverCopy.setEnabled( state );
        
    }//GEN-LAST:event_jCB_receiverStateChanged
    
    
    //--- This function is simple: it just enables and disables components according each tab specification ----
    private void jTP_RTT_ModeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTP_RTT_ModeMouseClicked

        if ( jTP_RTT_Mode.getSelectedIndex() == jTP_RTT_Mode.indexOfTab("Packet Pair") )
        {
            setState( jP_Tot_Gen_Time , false );
            setState( jP_Packet , false );            
        }
        else if ( jTP_RTT_Mode.getSelectedIndex() == jTP_RTT_Mode.indexOfTab("Trace") ) 
        {
            setState( jP_Tot_Gen_Time , true );
            setState( jP_Packet , false );            
        }
        else 
        {
            setState( jP_Tot_Gen_Time , true );
            setState( jP_Packet , true );         
        }
        setState( jP_Interval_Between_Packets, false );
        
    }//GEN-LAST:event_jTP_RTT_ModeMouseClicked
    
    
    //--- This function is simple: it just enables and disables components according each tab specification ----
    private void jTP_TwoWays_ModeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTP_TwoWays_ModeMouseClicked
                  
        setState( jP_Tot_Gen_Time , false );
    
        if ( jTP_TwoWays_Mode.getSelectedIndex() == jTP_TwoWays_Mode.indexOfTab("Packet Pair") ) {
            setState( jP_Packet , false );            
        }
        else 
        {
            setState( jP_Packet , true ); 
            setState( jP_Interval_Between_Packets, false ); 
        }

        if ( jTP_TwoWays_Mode.getSelectedIndex() == jTP_TwoWays_Mode.indexOfTab("CBR") )
            setState( jP_Packet , false ); 
        
        
        if ( jTP_TwoWays_Mode.getSelectedIndex() == jTP_TwoWays_Mode.indexOfTab("Adjust Trace") ) {
            setState( jP_IP , false );            
            setState( jP_ATM , false );
            setState( jP_Packet , false );             
            jTP_Traffic_Protocol.setEnabledAt(jTP_Traffic_Protocol.indexOfTab("IP") , false );
            jTP_Traffic_Protocol.setEnabledAt(jTP_Traffic_Protocol.indexOfTab("ATM") , false );            
        }
        else {
            setState( jP_IP , true );
            if( System.getProperty( "HAVE_ATM" ) != null )
                setState( jP_ATM , true );
            jTP_Traffic_Protocol.setEnabledAt( jTP_Traffic_Protocol.indexOfTab("IP") , true );
            jTP_Traffic_Protocol.setSelectedIndex( jTP_Traffic_Protocol.indexOfTab("IP") );
            jTP_Traffic_Protocol.setEnabledAt( jTP_Traffic_Protocol.indexOfTab("ATM") , false );            
        }

        if ( jCB_ReceiverPath.isSelected() == false && jCB_ReceiverCopy.isSelected() == false )
        {       
            jTF_ReceiverPath.setEnabled( false );
            jL_ReceiverPath.setEnabled( false );
        }
        else
        {       
            jTF_ReceiverPath.setEnabled( true );
            jL_ReceiverPath.setEnabled( true );
        }
        
        jTB_IP_Connection_Type_Unicast.setEnabled( false );
        jTB_IP_Connection_Type_Multicast.setEnabled( false ); 
        
        jCB_receiver.setSelected( true );
        jCB_receiver.setEnabled( false );
    }//GEN-LAST:event_jTP_TwoWays_ModeMouseClicked
    
    
    //==================  Trace File Chooser for Two Way Adjust Trace =================
    private void jB_TwoWay_aTrace_Description_File_Name_TraceFile_ChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_TwoWay_aTrace_Description_File_Name_TraceFile_ChooserActionPerformed
        if (fchooser_aTrace.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (fchooser_aTrace.getSelectedFile().exists()) {
                this.jTF_TwoWay_aTrace_Description_File_Tracefile.setText(fchooser_aTrace.getSelectedFile().getAbsolutePath());
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(this,"The specified trace doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jB_TwoWay_aTrace_Description_File_Name_TraceFile_ChooserActionPerformed
    
    
    //==================  Input File Chooser for Two Way Adjust Trace =================
    private void jB_TwoWay_aTrace_Description_File_Name_InputFile_ChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_TwoWay_aTrace_Description_File_Name_InputFile_ChooserActionPerformed
        if (fchooser_aTrace.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION) {
            if (fchooser_aTrace.getSelectedFile().exists()) {
                this.jTF_TwoWay_aTrace_Description_File_InputFile.setText(fchooser_aTrace.getSelectedFile().getAbsolutePath());
                aTrace_loadValues( jTF_TwoWay_aTrace_Description_File_InputFile.getText() );
            }
            else {
                javax.swing.JOptionPane.showMessageDialog(this,"The specified file doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jB_TwoWay_aTrace_Description_File_Name_InputFile_ChooserActionPerformed
    
    
    //=== This function is simple: it just enables and disables components according each tab specification ===
    private void jTP_Traffic_Types_TopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTP_Traffic_Types_TopMouseClicked

        setState( jP_IP , true );
        setState( jP_Packet , true );
        setState( jP_Tot_Gen_Time , true );             
        
        if ( jCB_ReceiverPath.isSelected() == false && jCB_ReceiverCopy.isSelected() == false )
        {       
            jTF_ReceiverPath.setEnabled( false );
            jL_ReceiverPath.setEnabled( false );
        }
        else
        {       
            jTF_ReceiverPath.setEnabled( true );
            jL_ReceiverPath.setEnabled( true );
        }
        
        if ( jTP_Traffic_Types_Top.getSelectedIndex() == jTP_Traffic_Types_Top.indexOfTab("Set 1") ) 
        {
            setState( jP_Packet , true );
            setState( jP_Tot_Gen_Time , true );
            jTP_Traffic_Protocol.setEnabledAt(jTP_Traffic_Protocol.indexOfTab("IP") , true );
            if( System.getProperty( "HAVE_ATM" ) != null )
            {
                jTP_Traffic_Protocol.setEnabledAt(jTP_Traffic_Protocol.indexOfTab("ATM") , true );
                setState( jP_ATM , true );
            }
            else
                jTP_Traffic_Protocol.setEnabledAt(jTP_Traffic_Protocol.indexOfTab("ATM") , false );
            jTP_OneWay_Mode.setSelectedIndex( jTP_OneWay_Mode.indexOfTab( "CBR" ) );
            jCB_receiver.setSelected( false );
        }
        else {
            if ( jTP_Traffic_Types_Top.getSelectedIndex() == jTP_Traffic_Types_Top.indexOfTab("Set 2") ) {
                setState( jP_Packet , false ); 
                setState( jP_Tot_Gen_Time , false );
                setState( jP_ATM , false );
                jTP_Traffic_Protocol.setEnabledAt( jTP_Traffic_Protocol.indexOfTab("IP") , true );
                jTP_Traffic_Protocol.setSelectedIndex( jTP_Traffic_Protocol.indexOfTab("IP") );
                jTP_Traffic_Protocol.setEnabledAt( jTP_Traffic_Protocol.indexOfTab("ATM") , false );  //ATM ISNT AVALIABLE FOR THIS TRAFFIC MODE
                jTP_TwoWays_Mode.setEnabledAt( jTP_TwoWays_Mode.indexOfTab("CBR") , true );
                jTP_TwoWays_Mode.setSelectedIndex( jTP_TwoWays_Mode.indexOfTab("CBR") );
                jTP_TwoWays_Mode.setEnabledAt( jTP_TwoWays_Mode.indexOfTab("Adjust Trace") , true );
                jTB_IP_Connection_Type_Unicast.setEnabled( false );
                jTB_IP_Connection_Type_Multicast.setEnabled( false );    
                jCB_receiver.setSelected( true );
                jCB_receiver.setEnabled( false );
                // jCB_compact.setSelected( false );
                jCB_compact.setEnabled( true );
            }
            else {
                setState( jP_Packet , true );
                setState( jP_Tot_Gen_Time , true );
                setState( jP_Interval_Between_Packets, false );
                setState( jP_ATM , false );
                jTP_Traffic_Protocol.setEnabledAt( jTP_Traffic_Protocol.indexOfTab("IP") , true );
                jTP_Traffic_Protocol.setSelectedIndex( jTP_Traffic_Protocol.indexOfTab("IP") );
                jTP_Traffic_Protocol.setEnabledAt( jTP_Traffic_Protocol.indexOfTab("ATM") , false );
                jTP_RTT_Mode.setSelectedIndex( jTP_RTT_Mode.indexOfTab("CBR") );
                jTB_IP_Connection_Type_Unicast.setEnabled( false );
                jTB_IP_Connection_Type_Multicast.setEnabled( false );                
                jCB_receiver.setSelected( true );
                jCB_receiver.setEnabled( false );
                jCB_compact.setSelected( false );
                jCB_compact.setEnabled( false );
            }
        }
    }//GEN-LAST:event_jTP_Traffic_Types_TopMouseClicked
    
    
  //==================== Measures Button ====================
  private void jB_measuresActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_measuresActionPerformed
      (new T2traffic_measures( this )).show();
  }//GEN-LAST:event_jB_measuresActionPerformed
  
  //===================  Receiver at remote host Combo Box =========================
  private void jCB_receiverActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_receiverActionPerformed
      
      boolean state = jCB_receiver.isSelected();
      
      jL_login.setEnabled( state );
      jTF_login.setEnabled( state );
      jL_trace.setEnabled( state );
      jTF_trace_name.setEnabled( state );
      jCB_compact.setEnabled( state );
      jL_shell.setEnabled( state );
      jTB_ssh.setEnabled( state );
      jTB_rsh.setEnabled( state );
      jCB_ReceiverPath.setEnabled( state );
      jCB_ReceiverCopy.setEnabled( state );
      
  }//GEN-LAST:event_jCB_receiverActionPerformed
  
  
  //================== Test trace file name when entered by keyboard ===================
  private void jTF_OneWay_Trace_Description_File_NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_OneWay_Trace_Description_File_NameFocusLost
      
      if (!is_in_trace) 
      {
          is_in_trace = true;
          if (jTF_OneWay_Trace_Description_File_Name.getText().trim().compareTo("")!= 0)  {
              java.io.File file = new java.io.File(jTF_OneWay_Trace_Description_File_Name.getText());
              if (!(file.exists())) {
                  javax.swing.JOptionPane.showMessageDialog(this,"The specified trace doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                  is_in_trace = false;
                  return;
              }
          }
          is_in_trace = false;
      }
      
  }//GEN-LAST:event_jTF_OneWay_Trace_Description_File_NameFocusLost
  
  
  //==================== Trace File Chooser for Oneway ==================================
  private void jB_OneWay_Trace_Description_File_Name_File_ChosserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_OneWay_Trace_Description_File_Name_File_ChosserActionPerformed
      
      if ( fchooser_trace.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION ) 
      {
          if ( fchooser_trace.getSelectedFile().exists() ) 
          {
              jTF_OneWay_Trace_Description_File_Name.setText( fchooser_trace.getSelectedFile().getAbsolutePath() );
          }
          else 
          {
              javax.swing.JOptionPane.showMessageDialog(this,"The specified trace doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
          }
      }
  }//GEN-LAST:event_jB_OneWay_Trace_Description_File_Name_File_ChosserActionPerformed
  
  
  //==================== Reward name FileChooser for OneWay Markovian ========================
  private void jB_OneWay_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_OneWay_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed
      
      if ( fchooser_reward.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION ) 
      {
          if ( !fchooser_reward.getSelectedFile().exists() ) 
          {
              javax.swing.JOptionPane.showMessageDialog(this,"The specified reward doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
              return;
          }
          jTF_OneWay_Markov_Modulated_Rewards_Name.setText( fchooser_reward.getSelectedFile().getAbsolutePath() );
      }
      
  }//GEN-LAST:event_jB_OneWay_Markov_Modulated_Rewards_Name_File_ChooserActionPerformed
  
  
  //========================= Keypressed at Model Name box ===========================
  private void jTF_OneWay_Markov_Modulated_Model_NameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTF_OneWay_Markov_Modulated_Model_NameKeyReleased
      
      switch ( model_exists( jTF_OneWay_Markov_Modulated_Model_Name.getText() ) ) 
      {
          case 0:   jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(true);
                    jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(true);
                    jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(true);
                    break;
          default: jTF_OneWay_Markov_Modulated_Rewards_Name.setText("");
                   jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
                   jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
                   jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
      }
      
  }//GEN-LAST:event_jTF_OneWay_Markov_Modulated_Model_NameKeyReleased
  
  
  private void jTB_ATM_Traffic_Class_CBRStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTB_ATM_Traffic_Class_CBRStateChanged
      
      jL_ATM_Traffic_Class_Peak_Rate.setEnabled(jTB_ATM_Traffic_Class_CBR.isSelected());
      jTF_ATM_Traffic_Class_Peak_Rate.setEnabled(jTB_ATM_Traffic_Class_CBR.isSelected());
      
  }//GEN-LAST:event_jTB_ATM_Traffic_Class_CBRStateChanged
  
  
  //================== Test Markov Model Name when entered by keyboard ===================
  private void jTF_OneWay_Markov_Modulated_Model_NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTF_OneWay_Markov_Modulated_Model_NameFocusLost
      if ( !is_in ) {
          is_in = true;
          if ( jTF_OneWay_Markov_Modulated_Model_Name.getText().trim().compareTo("") != 0 )
              test_model_name();
          is_in = false;
      }
  }//GEN-LAST:event_jTF_OneWay_Markov_Modulated_Model_NameFocusLost
  
  
  //=================== Model name FileChooser for OneWay Markovian =========================
  private void jB_OneWay_Markov_Modulated_Model_Name_File_ChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_OneWay_Markov_Modulated_Model_Name_File_ChooserActionPerformed
      jTF_OneWay_Markov_Modulated_Rewards_Name.setText("");
      jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
      jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
      jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
      if (fchooser_model.showDialog(this,"Select") == javax.swing.JFileChooser.APPROVE_OPTION)
      {
          if (fchooser_model.getSelectedFile().exists()) {
              jTF_OneWay_Markov_Modulated_Model_Name.setText(fchooser_model.getSelectedFile().getAbsolutePath());
              test_model_name();
              fchooser_reward.setCurrentDirectory(new java.io.File(directory));
          }
      }
  }//GEN-LAST:event_jB_OneWay_Markov_Modulated_Model_Name_File_ChooserActionPerformed
  

  
  
  //============================= Run Button =====================================
  private void jB_RunActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_RunActionPerformed
     
      String command_ip = "traffgen_ip ",
             command_atm = "traffgen_atm ",
             rtt_command = "rtt_traffgen ",
             twoway_command = "",
             twoway_command_buffer = "",                          
             hostname = "",
             mode = "",
             Packet_Interval = "",
             IP_Connection_Type = "",
             ATM_Traffic_Class  = "",
             output_file = "",
             outputFileRemote = "",
             outputFileLocal = "",        
             NumberOfPackets = "",
             remote_directory = ".",
             ipaddress = "";
      java.io.FileWriter cmd_file = null;
             
      boolean debug = true;
      
      // ---------- Getting Environment Variable TANGRAM2_HOME -------------
      
      String local_directory;
      local_directory = (String) System.getProperty( "TANGRAM2_HOME","." );
      
      if( local_directory.length() > 1 )
      {
          if( local_directory.lastIndexOf("/") != local_directory.length() - 1 ) 
            local_directory += "/";
          local_directory += "bin/";
      }
      else
          local_directory = "./";
      
      if( debug )
          System.err.println( "\nUsing environment variable TANGRAM2_HOME=" + local_directory );
      
      // ------------------------- Local HostName-----------------------------
      try 
      {
           InetAddress addr = InetAddress.getLocalHost();
           // Get IP Address
           ipaddress =  addr.getHostAddress();
           
           // Get host by name
           hostname = addr.getHostName();

      } 
      catch (UnknownHostException e) 
      {
          System.err.println( "Unable to resolve local hostname." );
          return;
      }
      
      // ------------------------- Setting Directories -------------------------
      if( jCB_ReceiverPath.isSelected() || jCB_ReceiverCopy.isSelected() ) 
        remote_directory = jTF_ReceiverPath.getText();
      else
        remote_directory = local_directory;
      
      if( debug )
        System.err.println( "\nUsing Remote Directory = " + remote_directory );      
      
      // ------------------------------ Packet ---------------------------------      
      if ( jTF_Packet_Size.isEnabled() )
      {          
         if ( !T2functions.Is_some_field_missing(jP_Packet) ) 
         {
            if ( T2functions.Is_not_number(jTF_Packet_Size.getText(), 0, this, "Packet size" ) != 0 ) return;
            if ( Integer.parseInt( jTF_Packet_Size.getText() ) >= 64000 ) 
            {
                javax.swing.JOptionPane.showMessageDialog( this,"Packet size must be less than 64.000 bytes.","Error",javax.swing.JOptionPane.ERROR_MESSAGE );
                return;
            }
          
            if ( jTB_Interval_Between_Packets_Min.isSelected() )
                  Packet_Interval = "-c ";
            else
                  Packet_Interval = "-s ";
         }
         else return;         
      }      
      
      //-------------------- One Way : It is big, dont get lost !  -------------
      if( jTP_Traffic_Types_Top.getSelectedIndex() == 
          jTP_Traffic_Types_Top.indexOfTab( "Set 1" ) ) 
      {
          
          switch( jTP_OneWay_Mode.getSelectedIndex() ) 
          {              
              //--------------------------------- CBR --------------------------
              case 0: if ( !T2functions.Is_some_field_missing( jP_OneWay_CBR ) ) 
                     {
                        if (T2functions.Is_not_number(jTF_CBR_Frame_Size.getText(), 0, this, "Frame size") != 0) return;
                        if (T2functions.Is_not_number(jTF_CBR_Frame_Time.getText(), 1, this, "Frame time") != 0) return;
                  
                        if ((new java.lang.Integer(jTF_Packet_Size.getText())).intValue() <= 28) 
                        {
                            javax.swing.JOptionPane.showMessageDialog(this,"The packet size must be greater than 28 bytes.","Error",javax.swing.JOptionPane.ERROR_MESSAGE); return;
                        }
                  
                        if ((new java.lang.Integer(jTF_Packet_Size.getText())).intValue() > (new java.lang.Integer(jTF_CBR_Frame_Size.getText())).intValue()) {
                            javax.swing.JOptionPane.showMessageDialog(this,"The packet size must be smaller than frame size","Error",javax.swing.JOptionPane.ERROR_MESSAGE); return;
                        }
                  
                        mode += "-d " + jTF_CBR_Frame_Size.getText() + " " + jTF_CBR_Frame_Time.getText() + " ";
                        output_file = jTF_trace_name.getText() + "." + jTF_IP_Destination_Host.getText() + ".OneWay.CBR.trafftrace";
                    }
                    else return;
                    break;
              
              //------------------------------- Markov Modulated -----------------------------
              case 1: if ( !T2functions.Is_some_field_missing( jP_OneWay_Markov_Modulated ) ) 
                      {
                         if (T2functions.Is_not_number(jTF_OneWay_Markov_Modulated_Frame_Size.getText(), 0, this, "Frame size") != 0) return;
                         if (test_model_name()) 
                         {
                            mode += "-m " + jTF_OneWay_Markov_Modulated_Frame_Size.getText() + " " + directory + "/" + modelname
                            + ".generator_mtx"  + " " + jTF_OneWay_Markov_Modulated_Rewards_Name.getText() + " ";
                         }
                         output_file = jTF_trace_name.getText() + "." + jTF_IP_Destination_Host.getText() + "OneWay.MARKOV.trafftrace";
                     }
                     else return;
                     break;
              
              //----------------------------------- Trace ------------------------------------
              case 2: if (!T2functions.Is_some_field_missing(jP_OneWay_Trace)) 
                      {
                         if (T2functions.Is_not_number(jTF_OneWay_Trace_Description_File_Multiplier.getText(), 1, this, "Description file multiplier") != 0) return;
                         java.io.File file = new java.io.File(jTF_OneWay_Trace_Description_File_Name.getText());
                         if (!(file.exists())) 
                         {
                            javax.swing.JOptionPane.showMessageDialog(this,"The specified trace doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                            return;
                         }
                         mode += "-t " + jTF_OneWay_Trace_Description_File_Name.getText() + " " + jTF_OneWay_Trace_Description_File_Multiplier.getText() + " ";
                         output_file = jTF_trace_name.getText() + "." + jTF_IP_Destination_Host.getText() + "OneWay.TRACE.trafftrace";
                     }
                     else return;
                     break;
          }
          
          //----------------------------- Total Generator Time & Traffic Protocol ----------------------------
          if (!T2functions.Is_some_field_missing(jP_Tot_Gen_Time)) 
          {
              if (T2functions.Is_not_number(jTF_Tot_Gen_Time.getText(), 1, this, "Total generation time") != 0) return;
              
              switch (jTP_Traffic_Protocol.getSelectedIndex()) 
              {                  
                  //------------------------------------ IP --------------------------------------
                  case 0: if (!T2functions.Is_some_field_missing(jP_IP)) 
                          {
                            if (T2functions.Is_not_number(jTF_IP_Destination_Port.getText(), 0, this, "Destination port") != 0)
                                return;
                      
                            if (Integer.parseInt(jTF_IP_Destination_Port.getText()) < 1024) 
                            {
                                javax.swing.JOptionPane.showMessageDialog(this, "Port number must be above 1024.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                      
                            if (jTB_IP_Connection_Type_Unicast.isSelected())
                                IP_Connection_Type = "UNI ";
                            else
                                IP_Connection_Type = "MULTI ";
                      
                            command_ip += IP_Connection_Type + Packet_Interval + jTF_IP_Destination_Host.getText() + " " + jTF_IP_Destination_Port.getText() + " " + jTF_Packet_Size.getText() + " " + mode + jTF_Tot_Gen_Time.getText();
                          }
                          else return;
                          break;
                  //----------------------------------- ATM --------------------------------------
                  case 1: if (!T2functions.Is_some_field_missing(jP_ATM)) 
                          {
                            if (T2functions.Is_not_number(jTF_ATM_Destination_VPi.getText(), 0, this, "Destination VPi") != 0) return;
                            if (T2functions.Is_not_number(jTF_ATM_Destination_VCi.getText(), 0, this, "Destination VCi") != 0) return;
                      
                            if (jTB_ATM_Traffic_Class_UBR.isSelected())
                                ATM_Traffic_Class += "UBR " + jTF_ATM_Destination_VPi.getText() + " " + jTF_ATM_Destination_VCi.getText() + " ";
                            else 
                            {
                                if (T2functions.Is_not_number(jTF_ATM_Traffic_Class_Peak_Rate.getText(), 1, this, "Peak rate") != 0) return;
                                ATM_Traffic_Class += "CBR " + jTF_ATM_Destination_VPi.getText() + " " + jTF_ATM_Destination_VCi.getText() + " " + jTF_ATM_Traffic_Class_Peak_Rate.getText() + " ";
                            }
                            command_atm += Packet_Interval + ATM_Traffic_Class + jTF_Packet_Size.getText() + " " + mode + jTF_Tot_Gen_Time.getText();
                         }
                         else return;
                         break;
              }
          }
          else return;
          
          // <--- The parameters verification ends here. And Traffgen aplication calling begins here
          
          Process recvproc = null;
          
          if ( command_ip.compareTo("traffgen_ip ") != 0 ) 
          {              
              //call the T2status class that will execute the traffgen              
              // activate the receiver if needed
              
              if( jCB_receiver.isSelected() ) 
              {
                  if( !T2functions.Is_some_field_missing( jP_receiver ) ) 
                  {                 
                                                               
                      if( jCB_ReceiverCopy.isSelected() )
                          doSCP( "traffgen_recv_ip" , local_directory , jTF_IP_Destination_Host.getText(), jTF_ssh_port.getText(),
                                 "traffgen_recv_ip" , remote_directory , jTF_login.getText() , 'U' , 
                                 "Receiver will be copied to remote host now." );                      
                      
                      String command = "traffgen_recv_ip " + jTF_IP_Destination_Port.getText() 
                                     + " " + remote_directory + output_file; 
                      
                      if( jCB_compact.isSelected() ) 
                          command += "; gzip " + remote_directory + output_file;
        
                      recvproc =  runRemoteCommand( command , remote_directory , jTF_login.getText() , 
                                                    jTF_IP_Destination_Host.getText(), jTF_ssh_port.getText(), jTB_rsh.isSelected() );
                  }
              }
              
              java.util.Vector commands_vector = new java.util.Vector( );
              //String killRemoteTaskCmd = null;
              
              // Now, we will mount and run the local command vector.              
              // Obs.: Note that if we can not get the property stdout, from the system,              
              // via getProperty() method, we manually set this atribute.
              command_ip = local_directory + command_ip;
              //killRemoteTaskCmd = local_directory + "finalizer " + IP_Connection_Type + " " + jTF_IP_Destination_Host.getText() + " " + jTF_IP_Destination_Port.getText();
              
              if( debug )
              {
                  System.err.println( "\nLocal Command " + command_ip ); 
                  //System.err.println( "\nKill Remote Task Command " + killRemoteTaskCmd ); 
              }
                  
              commands_vector.add( new T2command( command_ip , (System.getProperty("STDOUT")!=null?System.getProperty("STDOUT"):"STDOUT") , (System.getProperty("STDOUT")!=null?System.getProperty("STDOUT"):"STDOUT") ) );             
              
              T2progressDialog.showDialog( this, "Traffic Generation Status", "IP Traffic is being generated.",
                                           commands_vector, true, true, 100);              
              
              //T2progressDialog.showDialog( this, "Traffic Generation Status", "IP Traffic is being generated.",
              //                             commands_vector, true, true, 100, killRemoteTaskCmd);              
                            
              // waits termination of receiver
              if( jCB_receiver.isSelected() ) 
              {
                  try 
                  {
                      if (recvproc!=null) 
                      {
                            recvproc.waitFor();
                      }                      
                  }
                  catch (java.lang.Exception e) 
                  {
                      System.err.println( "Error running receiver" );
                      return;
                  }                  
              }
              
              if( jCB_compact.isSelected() )
                  output_file += ".gz";
              if( ( jTP_Traffic_Protocol.getSelectedIndex() == 0 )  && ( jCB_receiver.isSelected() ) )
                  doSCP( "" , "."/*local_directory*/ , jTF_IP_Destination_Host.getText() , jTF_ssh_port.getText(), output_file ,
                         remote_directory , jTF_login.getText() , 'D' , "Trace File will be copied to local host now." ); 
              
              try
              {
                  String remove_dup_cmd[] = new String[3];
                  
                  remove_dup_cmd[0] = "bash";
                  remove_dup_cmd[1] = "-c";
                  
                  if( jCB_compact.isSelected() )
                  {
                    remove_dup_cmd[2]  = "gunzip " + output_file + ";";
                    remove_dup_cmd[2] += local_directory + "check_dup " + output_file.substring(0, output_file.length() - 3);
                  }
                  else
                    remove_dup_cmd[2]  = local_directory + "check_dup " + output_file;                  
                  
                  if(debug)
                      System.err.println(remove_dup_cmd[2]);
                                    
                  Runtime.getRuntime().exec(remove_dup_cmd);              
              }
              catch(java.lang.Exception e)
              {
                    e.printStackTrace();
                    System.err.println("Error removing trace duplicates.");                   
              };
          }
          /* ATM */
          else 
          {                 
              java.util.Vector commands_vector = new java.util.Vector( );
              command_atm = local_directory + command_atm;
              commands_vector.add( new T2command( command_atm, (System.getProperty("STDOUT")!=null?System.getProperty("STDOUT"):"STDOUT"), (System.getProperty("STDOUT")!=null?System.getProperty("STDOUT"):"STDOUT") ) );
              T2progressDialog.showDialog( this, "Traffic Generation Status", "ATM Traffic is being generated.",
                                           commands_vector, true, true );
          }          
   
      
      /*
       *  When trace file is generated, we need to append some 
       *  information at its header
       *  Updated on 01/21/2004 by Hugo Sato
      */
      
      
      if( ( jTP_Traffic_Protocol.getSelectedIndex() == 0 ) && 
          ( jTB_Interval_Between_Packets_Max.isSelected() )  &&
          ( jTP_OneWay_Mode.getSelectedIndex() == 0 ) &&
          ( jCB_receiver.isSelected() ) ) 
      {     
          java.lang.String directory = ""; /*local_directory;*/
          java.lang.Integer fr_size = new java.lang.Integer((jTF_CBR_Frame_Size.getText()));
          java.lang.Float fr_time = new java.lang.Float((jTF_CBR_Frame_Time.getText()));
          java.lang.Integer pack_size = new java.lang.Integer((jTF_Packet_Size.getText()));
                  
          java.lang.String pars_array2[] = new java.lang.String[3];
                  
          String temp_filename;
          try 
          {
              temp_filename = java.io.File.createTempFile("traffgen", "trace").getAbsolutePath();
          } 
          catch( java.io.IOException e ) 
          {
              temp_filename = directory + "temp_traffgen_xyz1157";
              System.err.println( "Cannot create temporary file. Using " + temp_filename + "for output generation." );
          }
          
          java.lang.String command_line = new java.lang.String( "echo \"#Expected Interpacket Generation Time: "  
                               + ( fr_time.floatValue() / ( (float)fr_size.intValue() / (float)pack_size.intValue() ) ) /* * 1000000 nao precisa converter para segundos...*/
                               + "\" > " + temp_filename );
          
          
          pars_array2[0] = "bash" ;
          pars_array2[1] = "-c" ;                  
                  
          if(jCB_compact.isSelected()) 
          {
              command_line += " ; zcat " + directory + output_file + " >> " + temp_filename;
              command_line += " ; cat " + temp_filename 
                                + " | gzip > " + directory + output_file;
              command_line += " ; rm -f " + temp_filename; 
          }
          else 
          {
              command_line += " ; cat " + directory + output_file + " >> " + temp_filename;
              command_line += " ; mv -f " + temp_filename + " " + directory + output_file;
          }          
          
          if( debug )
            System.err.println( command_line );
          
          pars_array2[2] =  command_line;                  
                  
          try
          {
               Runtime.getRuntime().exec(pars_array2);
          }
          catch(java.lang.Exception e)
          {
               System.err.println( "Error writing trace local file * current directory: "+System.getProperty("user.dir"));
               return;
          };
      }
                 
     }
      
      // ---------- One Way traffic generation finishes here -------------      
      
      //----------------------------- Two Ways ---------------------------------
      else if( jTP_Traffic_Types_Top.getSelectedIndex() == jTP_Traffic_Types_Top.indexOfTab( "Set 2" ) ) 
      {
          
          switch( jTP_TwoWays_Mode.getSelectedIndex() ) 
          {
              //----------------------------- CBR ----------------------------
              case 0: if ( !T2functions.Is_some_field_missing( jP_TwoWay_CBR ) ) 
                      {
                          if (T2functions.Is_not_number(jTF_TwoWay_CBR_Frame_Time.getText(), 1, this, "Frame time") != 0) return;
                          /*
                          if ((new java.lang.Integer(jTF_Packet_Size.getText())).intValue() <= 28) 
                          {
                            javax.swing.JOptionPane.showMessageDialog(this,"The packet size must be greater than 28 bytes.","Error",javax.swing.JOptionPane.ERROR_MESSAGE); return;
                          }
                          */
                          twoway_command = local_directory +  "calc_loc " + jTF_IP_Destination_Host.getText() + " " + jTF_IP_Destination_Port.getText()                           
                                         + " " + jTF_TwoWay_CBR_Number_of_Packets.getText();
                          
                          twoway_command_buffer = "calc_rem";
                          
                          outputFileRemote = jTF_trace_name.getText() + "." + jTF_IP_Destination_Host.getText() + ".TwoWay.CBR.trafftrace" ;
                          outputFileLocal = jTF_trace_name.getText() + "." + hostname + ".TwoWay.CBR.trafftrace";
                          
                          twoway_command +=  " " + outputFileLocal;
                      }
                      else return;
                      break;
                      
              
              //----------------------------------- Packet Pair ------------------------------------
              case 1: if ( !T2functions.Is_some_field_missing( jP_TwoWay_PacketPair ) ) 
                      {                         

                          twoway_command = local_directory + "packloss_loc " 
                                          + jTF_IP_Destination_Host.getText() + " " 
                                          + jTF_IP_Destination_Port.getText() + " " 
                                          + jTF_TwoWay_PacketPair_Number_of_Packets.getText() + " " 
                                          + jTF_TwoWay_PacketPair_Frame_Time.getText();                         
                          twoway_command_buffer = "packloss_rem";
                         
                          outputFileRemote = jTF_trace_name.getText() + "." + jTF_IP_Destination_Host.getText() + ".TwoWay.PacketPair.trafftrace";
                          outputFileLocal = jTF_trace_name.getText() + "." + hostname + ".TwoWay.PacketPair.trafftrace";
                         
                          twoway_command +=  " " + outputFileLocal;
                      }
                      else return;
                      break;
              
              //----------------------------------- Ajust Trace ------------------------------------
              case 2: if ( !T2functions.Is_some_field_missing( jP_TwoWay_aTrace ) ) 
                      {
                          //debug: Decidir esta TAB com o Guto
                      }
                      else return;
                      break;
          }
          
          //----------------------------- Total Generator Time & Traffic Protocol ----------------------------

          if ( !T2functions.Is_some_field_missing( jP_IP ) ) 
          {
              if (T2functions.Is_not_number(jTF_IP_Destination_Port.getText(), 0, this, "Destination port") != 0)
                   return;                   
              if (Integer.parseInt(jTF_IP_Destination_Port.getText()) < 1024) 
              {
                   javax.swing.JOptionPane.showMessageDialog(this, "Port number must be above 1024.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                   return;
              }              
          }
          else return;
          
          // <--- The parameters verification ends here. And TwoWay aplication calling begins here          
    
          Process recvproc = null;
            
          if( jCB_receiver.isSelected() ) 
          {             
                  if( !T2functions.Is_some_field_missing( jP_receiver ) ) 
                  {                 
                                                               
                      if( jCB_ReceiverCopy.isSelected() )                          
                          doSCP( twoway_command_buffer , local_directory , jTF_IP_Destination_Host.getText() , jTF_ssh_port.getText(), twoway_command_buffer ,
                                 remote_directory , jTF_login.getText() , 'U' , "Receiver will be copied to remote host now." );                      
                 
                      String command = "";
                      if( jTP_TwoWays_Mode.getSelectedIndex() == jTP_TwoWays_Mode.indexOfTab( "CBR" ) ) 
                         command = "calc_rem " + ipaddress + " " + jTF_IP_Destination_Port.getText() 
                                   + " " + jTF_TwoWay_CBR_Number_of_Packets.getText() + " " 
                                   + remote_directory + outputFileRemote;
                      else if( jTP_TwoWays_Mode.getSelectedIndex() == jTP_TwoWays_Mode.indexOfTab( "Packet Pair" ) ) 
                         command = "packloss_rem " + ipaddress + " " + jTF_IP_Destination_Port.getText() 
                                   + " " + jTF_TwoWay_PacketPair_Number_of_Packets.getText() + " " 
                                   + jTF_TwoWay_PacketPair_Frame_Time.getText() 
                                   + " " + remote_directory + outputFileRemote;
                      
                     if( jCB_compact.isSelected() ) 
                         command += ";gzip " + remote_directory + outputFileRemote + ";sleep 1";                     
                   
                      recvproc =  runRemoteCommand( command , remote_directory , jTF_login.getText() , 
                                                    jTF_IP_Destination_Host.getText(), jTF_ssh_port.getText(), jTB_rsh.isSelected() ); 
                            
                  }
                            
          }          
          java.util.Vector commands_vector = new java.util.Vector( );              
          //String killRemoteTaskCmd = null;          
          
          // Now, we will mount and run the local command vector.              
          // Obs.: Note that if we can not get the property stdout, from the system,              
          // via getProperty() method, we manually set this atribute.

          //killRemoteTaskCmd = local_directory + "finalizer UNI " + jTF_IP_Destination_Host.getText() + " " + jTF_IP_Destination_Port.getText();
          if( debug )
          {
            System.err.println( "\nLocal Command " + twoway_command ); 
            //System.err.println( "\nKill Remote Task Command" + killRemoteTaskCmd ); 
          }

          commands_vector.add( new T2command( twoway_command , (  System.getProperty( "STDOUT" ) != null?System.getProperty("STDOUT"):"STDOUT") , (System.getProperty("STDOUT")!=null?System.getProperty("STDOUT"):"STDOUT") ) );             
          
          T2progressDialog.showDialog( this, "Traffic Generation Status", "IP Traffic is being generated.",
                                             commands_vector, true, true, 100);             
      
          //T2progressDialog.showDialog( this, "Traffic Generation Status", "IP Traffic is being generated.",
          //                                   commands_vector, true, true, 100, killRemoteTaskCmd );             

          // waits termination of receiver
          if( jCB_receiver.isSelected() ) 
          {
              try 
              {                
                  if (recvproc!=null) 
                  {
                      recvproc.waitFor();  
                  }
              }
              catch (java.lang.Exception e) 
              {
                  System.err.println( "Error running receiver." );
                  return;
              }                  
          }         

          if( jCB_compact.isSelected() ) outputFileRemote += ".gz";
          if( ( jTP_Traffic_Protocol.getSelectedIndex() == 0 )  && ( jCB_receiver.isSelected() ) )
                doSCP( "" , "."/*local_directory*/ , jTF_IP_Destination_Host.getText() , jTF_ssh_port.getText(), outputFileRemote ,
                       remote_directory , jTF_login.getText() , 'D' , "Trace File will be copied to local host now." ); 
          
          try
          {
              String remove_dup_cmd[] = new String[3];

              remove_dup_cmd[0] = "bash";
              remove_dup_cmd[1] = "-c";              
              remove_dup_cmd[2] = local_directory + "check_dup " + outputFileLocal;                  

              if(debug)
                  System.err.println(remove_dup_cmd[2]);

              java.lang.Process remove_dup = Runtime.getRuntime().exec(remove_dup_cmd);              
              
              remove_dup.waitFor();
              
              if( jCB_compact.isSelected() )
              {
                remove_dup_cmd[2]  = "gunzip " + outputFileRemote + ";";
                remove_dup_cmd[2] += local_directory + "check_dup " + outputFileRemote.substring(0, outputFileRemote.length() - 3);
              }
              else
                remove_dup_cmd[2]  = local_directory + "check_dup " + outputFileRemote;                  

              if(debug)
                  System.err.println(remove_dup_cmd[2]);

              Runtime.getRuntime().exec(remove_dup_cmd);                            
          }
          catch(java.lang.Exception e)
          {
                e.printStackTrace();
                System.err.println("Error removing trace duplicates.");                   
          };          
      
      /*
       *  When trace file is generated, we need to append some 
       *  information at its header
       *  Updated on 01/21/2004 by Hugo Sato
      */
          
      
      if( ( jTP_Traffic_Protocol.getSelectedIndex() == 0 ) && 
          ( jTP_TwoWays_Mode.getSelectedIndex() == 0 ) ) 
      {     
          java.lang.String directory = ""; /*local_directory;*/
          java.lang.Float fr_time = new java.lang.Float((jTF_TwoWay_CBR_Frame_Time.getText()));
                  
          java.lang.String pars_array2[] = new java.lang.String[3];
                  
          String temp_filename1, 
                 temp_filename2;
                 
          try 
          {
              temp_filename1 = java.io.File.createTempFile("traffgen", "trace").getAbsolutePath();
              temp_filename2 = java.io.File.createTempFile("traffgen", "trace").getAbsolutePath();
          } 
          catch( java.io.IOException e ) 
          {
              temp_filename1 = directory + "temp_traffgen_xyz1157";
              temp_filename2 = directory + "temp_traffgen_xyz1158";
          System.err.println( "Cannot create temporary file. Using " + temp_filename1 + " and " + temp_filename2 + "for output generation." );
          }
          
          java.lang.String command_line = new java.lang.String( "echo \"#Expected Interpacket Generation Time: "  
                               + fr_time.floatValue() + "\" > " + temp_filename1 + ";" );
          command_line += "echo \"#Expected Interpacket Generation Time: "  
                               + fr_time.floatValue() + "\" > " + temp_filename2 ;
                                
          pars_array2[0] = "bash" ;
          pars_array2[1] = "-c" ;                  
          
          command_line += " ; cat " + directory + outputFileLocal + " >> " + temp_filename1;        
          command_line += " ; mv -f " + temp_filename1 + " " + directory + outputFileLocal;
          
          if(jCB_compact.isSelected()) 
          {
              
              command_line += " ; zcat " + directory + outputFileRemote + " >> " + temp_filename2;
              command_line += " ; cat " + temp_filename2 + " | gzip > " + directory + outputFileRemote;
              command_line += " ; rm -f " + temp_filename2; 
          }
          else 
          {
              
              command_line += " ; cat " + directory + outputFileRemote + " >> " + temp_filename2;              
              command_line += " ; mv -f " + temp_filename2 + " " + directory + outputFileRemote;
          }          
          
          //System.err.println( command_line );
          
          pars_array2[2] =  command_line;                  
                  
          try
          {
               Runtime.getRuntime().exec(pars_array2);
          }
          catch(java.lang.Exception e)
          {
               System.err.println( "Error writing trace local file * current directory: "+System.getProperty("user.dir"));
               return;
          };  
      }
      }
      
      // ---------- Two Way traffic generation finishes here -------------
      
      //------------------------------------- RTT --------------------------------------
      else if( jTP_Traffic_Types_Top.getSelectedIndex() == jTP_Traffic_Types_Top.indexOfTab( "Set 3" ) ) 
      {
          switch( jTP_RTT_Mode.getSelectedIndex() ) 
          {
              //------------------------------------ CBR --------------------------------------
              case 0: if ( !T2functions.Is_some_field_missing( jP_RTT_CBR )
                           && !T2functions.Is_some_field_missing(jP_Tot_Gen_Time) 
                           && T2functions.Is_not_number(jTF_Tot_Gen_Time.getText(), 1, this, "Total generation time") == 0 )

                      { 
                  
                          if (T2functions.Is_not_number(jTF_Set3_CBR_Frame_Time.getText(), 1, this, "Frame time") != 0)
                          {                     
                              return;
                          }
                  
                          if ((new java.lang.Integer(jTF_Packet_Size.getText())).intValue() <= 28) 
                          {
                            javax.swing.JOptionPane.showMessageDialog(this,"The packet size must be greater than 28 bytes.","Error",javax.swing.JOptionPane.ERROR_MESSAGE); return;
                          }
                          mode += "-d " + jTF_Set3_CBR_Frame_Time.getText() + " ";
                          
                          output_file = jTF_trace_name.getText() + "." + hostname + ".to."+ jTF_IP_Destination_Host.getText() + ".RTT.CBR.trafftrace";
                          
                          rtt_command += jTF_IP_Destination_Host.getText() + " " 
                                      + jTF_IP_Destination_Port.getText() + " "   
                                      + output_file + " " 
                                      +  mode + " " 
                                      + jTF_Packet_Size.getText() + " " 
                                      + jTF_Tot_Gen_Time.getText();
                      }
                      else
                      {                          
                          return;
                      }
                      break;
              
              //------------------------------ Markov Modulated -------------------------------------
              case 1: if ( !T2functions.Is_some_field_missing( jP_RTT_Markov_Modulated )
                           && !T2functions.Is_some_field_missing(jP_Tot_Gen_Time) 
                           && T2functions.Is_not_number(jTF_Tot_Gen_Time.getText(), 1, this, "Total generation time") != 0 )
              
                      {
                          if (T2functions.Is_not_number(jTF_RTT_Markov_Modulated_Frame_Size.getText(), 0, this, "Frame size") != 0) return;
                          if (test_model_name_RTT()) 
                          {
                              mode += "-m " + jTF_RTT_Markov_Modulated_Frame_Size.getText() + " " + directory + "/" + modelname +
                              ".generator_mtx" + " " + jTF_RTT_Markov_Modulated_Rewards_Name.getText() + " ";
                              output_file = jTF_trace_name.getText() + "." + hostname + ".to."+ jTF_IP_Destination_Host.getText() + ".RTT.Markov.trafftrace";

                             rtt_command += jTF_IP_Destination_Host.getText() + " " 
                                         + jTF_IP_Destination_Port.getText() + " "   
                                         + output_file + " " 
                                         +  mode + " " 
                                         + jTF_Packet_Size.getText() + " " 
                                         + jTF_Tot_Gen_Time.getText();
                          }
                      }
                      else return;
                      break;
              //------------------------------  TRACE  -------------------------------------
              case 2: if ( !T2functions.Is_some_field_missing( jP_RTT_Trace ) 
                           && !T2functions.Is_some_field_missing(jP_Tot_Gen_Time) 
                           && T2functions.Is_not_number(jTF_Tot_Gen_Time.getText(), 1, this, "Total generation time") != 0 )
                      {                  
                         if (T2functions.Is_not_number(jTF_RTT_Trace_Description_File_Multiplier.getText(), 1, this, "Description file multiplier") != 0) return;
                         java.io.File file = new java.io.File(jTF_RTT_Trace_Description_File_Name.getText());
                         if (!(file.exists())) 
                         {
                            javax.swing.JOptionPane.showMessageDialog(this,"The specified trace doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                            return;
                         }
                         mode += "-t " + jTF_RTT_Trace_Description_File_Name.getText() + " ";
                         output_file = jTF_trace_name.getText() + "." + hostname + ".to."+ jTF_IP_Destination_Host.getText() + ".RTT.TRACE.trafftrace";

                         rtt_command += jTF_IP_Destination_Host.getText() + " " 
                                     + jTF_IP_Destination_Port.getText() + " "   
                                     + output_file + " " 
                                     +  mode + " " 
                                     + jTF_Packet_Size.getText() + " " 
                                     + jTF_Tot_Gen_Time.getText();  
                     }
                     else return;
                     break;
              //---------------------------  PACKET PAIR  ------------------------------------
              case 3: if ( !T2functions.Is_some_field_missing( jP_RTT_PacketPair ) ) 
                      {                         
                       
                         output_file = jTF_trace_name.getText() + "." + hostname 
                                     + ".to."+ jTF_IP_Destination_Host.getText() 
                                     + ".RTT.PacketPair.trafftrace";

                         rtt_command = "packloss_loc "
                                     + jTF_IP_Destination_Host.getText() + " " 
                                     + jTF_IP_Destination_Port.getText() + " " 
                                     + jTF_RTT_PacketPair_Number_of_Packets.getText() + " " 
                                     + jTF_RTT_PacketPair_Frame_Time.getText() + " " 
                                     + output_file + " -s";
                                     
                      }
                      else return;
                      break;                     
          }         
          
  
          //----------------------------- Total Generator Time & Traffic Protocol ----------------------------
          if ( !T2functions.Is_some_field_missing( jP_IP ) ) 
          {
              if (T2functions.Is_not_number(jTF_IP_Destination_Port.getText(), 0, this, "Destination port") != 0)
                   return;                   
              if (Integer.parseInt(jTF_IP_Destination_Port.getText()) < 1024) 
              {
                   javax.swing.JOptionPane.showMessageDialog(this, "Port number must be above 1024.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                   return;
              }              
          }
          else return;               
          
          // <--- The parameters verification ends here. And RTT_Traffgen aplication calling begins here          
          
          Process recvproc = null;          
            
          if( jCB_receiver.isSelected() ) 
          {            
                  if( !T2functions.Is_some_field_missing( jP_receiver ) ) 
                  {                 
                                                               
                      if( jCB_ReceiverCopy.isSelected() )                          
                          doSCP( "rtt_traffrec" , local_directory , jTF_IP_Destination_Host.getText() , jTF_ssh_port.getText(),
                                 "rtt_traffrec" , remote_directory , jTF_login.getText() , 'U' ,
                                 "Receiver will be copied to remote host now." );
          
                      String command = "";
                      command = "rtt_traffrec " + ipaddress + " " + jTF_IP_Destination_Port.getText();
                      if( jTP_RTT_Mode.getSelectedIndex() == jTP_RTT_Mode.indexOfTab( "Packet Pair" ) ) 
                          command +=  " -s";

                      recvproc =  runRemoteCommand( command , remote_directory , jTF_login.getText() , 
                                                    jTF_IP_Destination_Host.getText(), jTF_ssh_port.getText(), jTB_rsh.isSelected() ); 
                            
                  }                            
          }
          java.util.Vector commands_vector = new java.util.Vector( );              
          //String killRemoteTaskCmd = null;
          
          // Now, we will mount and run the local command vector.              
          // Obs.: Note that if we can not get the property stdout, from the system,              
          // via getProperty() method, we manually set this atribute.          
      
          rtt_command = local_directory + rtt_command;
          //killRemoteTaskCmd = local_directory + "finalizer UNI " + jTF_IP_Destination_Host.getText() + " " + jTF_IP_Destination_Port.getText();
          
          if( debug )
          {
            System.err.println( "\nLocal Command " + rtt_command ); 
            //System.err.println( "\nKill Remote Task Command " + killRemoteTaskCmd ); 
          }
          
          commands_vector.add( new T2command( rtt_command , (  System.getProperty( "STDOUT" ) != null?System.getProperty("STDOUT"):"STDOUT") , (System.getProperty("STDOUT")!=null?System.getProperty("STDOUT"):"STDOUT") ) );             

          T2progressDialog.showDialog( this, "Traffic Generation Status", "IP Traffic is being generated.",
                                       commands_vector, true, true , 100);                        
          
          //T2progressDialog.showDialog( this, "Traffic Generation Status", "IP Traffic is being generated.",
          //                             commands_vector, true, true , 100, killRemoteTaskCmd);              
              
          // waits termination of receiver
          if( jCB_receiver.isSelected() ) 
          {
              try 
              {
                  if (recvproc!=null) 
                  {
                      recvproc.waitFor();  
                  }
              }
              catch (java.lang.Exception e) 
              {
                  System.err.println( "Error running receiver." );
                  return;
              }                  
          }
          
          try
          {
              String remove_dup_cmd[] = new String[3];

              remove_dup_cmd[0] = "bash";
              remove_dup_cmd[1] = "-c";
              remove_dup_cmd[2]  = local_directory + "check_dup " + output_file;                  

              if(debug)
                  System.err.println(remove_dup_cmd[2]);

              Runtime.getRuntime().exec(remove_dup_cmd);              
          }
          catch(java.lang.Exception e)
          {
                e.printStackTrace();
                System.err.println("Error removing trace duplicates.");                   
          };                      
                                
      /*
       *  When trace file is generated, we need to append some 
       *  information at its header
       *  Updated on 01/21/2004 by Hugo Sato
      */
      
      
      if( ( jTP_Traffic_Protocol.getSelectedIndex() == 0 ) &&       
          ( jTP_RTT_Mode.getSelectedIndex() == 0 ) ) 
      {     
          java.lang.String directory = ""; /*local_directory;          */
          java.lang.Float fr_time = new java.lang.Float(jTF_Set3_CBR_Frame_Time.getText());
                  
          java.lang.String pars_array2[] = new java.lang.String[3];
                  
          String temp_filename;
          try 
          {
              temp_filename = java.io.File.createTempFile("traffgen", "trace").getAbsolutePath();
          } 
          catch( java.io.IOException e ) 
          {
              temp_filename = directory + "temp_traffgen_xyz1157";
              System.err.println( "Cannot create temporary file. Using " + temp_filename + "for output generation." );
          }
          
          java.lang.String command_line = new java.lang.String(
                              "echo \"#Expected Interpacket Generation Time: "  
                               +  fr_time.floatValue()
                               + "\" > " + temp_filename );
          
          
          pars_array2[0] = "bash" ;
          pars_array2[1] = "-c" ;                  

          command_line += " ; cat " + directory + output_file + " >> " + temp_filename;
          command_line += " ; mv -f " + temp_filename + " " + directory + output_file + ";sleep 5";
               
          
          pars_array2[2] =  command_line;                  
                  
          try
          {
               Runtime.getRuntime().exec(pars_array2);
          }
          catch(java.lang.Exception e)
          {
               System.err.println( "Error writing trace local file * current directory: "+System.getProperty("user.dir"));
               return;
          };
          
      }
      }
     // ---------- RTT traffic generation finishes here -------------

    // Warning message
    javax.swing.JOptionPane.showMessageDialog(this, "Make sure the remote receiver has been finalized.", "Warning", javax.swing.JOptionPane.ERROR_MESSAGE );                                 
      
  // ----------------------------- END OF RUNNING ------------------------------------
  }//GEN-LAST:event_jB_RunActionPerformed
  
  
  private void jB_CloseActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_CloseActionPerformed
      dispose();
  }//GEN-LAST:event_jB_CloseActionPerformed
  
  
  //  Exit the Application
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      jB_CloseActionPerformed(null);
      if ( holder !=null ) System.exit(0);
  }//GEN-LAST:event_exitForm
  
  
  private void jB_CloseAndExitActionPerformed(java.awt.event.ActionEvent evt)
  {
      dispose();
      System.exit(0);
  }
  
  
  // =========================   OTHER FUNCTIONS  ==============================
  
  private void aTrace_loadValues( String input ) {
      try {
          RandomAccessFile inputObj = new RandomAccessFile( input , "r" );
          int count = 0;
          String buffer;
          while( ( buffer = inputObj.readLine() ) != null ) {
              String field = new String( buffer.substring( buffer.indexOf(':') + 2 ) );
              switch( count ) {
                  case 0:
                      this.jTF_TwoWay_aTrace_Description_File_Startx.setText( field );
                      break;
                  case 1:
                      jTF_TwoWay_aTrace_Description_File_Skew.setText( field );
                      break;
                  case 2:
                      jTF_TwoWay_aTrace_Description_File_Offset.setText( field );
                      break;
              }
              count++;
          }
          
          inputObj.close();
      }
      catch (IOException e) {
          javax.swing.JOptionPane.showMessageDialog(this,"You can't open the specified file!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
      }
      
  }
  
  
  private void setState(JComponent cmp , boolean state)
  // This function sets the setState of a Component Set recursively
  {
      int count = cmp.getComponentCount();
      for( int i = 0 ; i < count ; i++ ) {
          JComponent cur = (JComponent) cmp.getComponent( i );
          setState( (JComponent)cur , state );
          cur.setEnabled( state );
      }
  }
  
  
  private void initComponentsManual(){
      // initComponents Manual.
      
      // This components are used for file choosing in markov, trace_file and adjust trace traffic generation.
      fchooser_reward = new javax.swing.JFileChooser();
      fchooser_reward.setCurrentDirectory( new java.io.File(System.getProperty("user.dir")));
      
      fchooser_model = new javax.swing.JFileChooser();
      ExampleFileFilter objFilter_model  = new ExampleFileFilter("obj", "OBJ Model Files");
      fchooser_model.addChoosableFileFilter(objFilter_model);
      fchooser_model.setFileFilter(objFilter_model);
      fchooser_model.setCurrentDirectory( new java.io.File(System.getProperty("user.dir")));
      
      fchooser_trace = new javax.swing.JFileChooser();
      fchooser_trace.setCurrentDirectory( new java.io.File(System.getProperty("user.dir")));
      
      fchooser_aTrace = new javax.swing.JFileChooser();
      fchooser_aTrace.setCurrentDirectory( new java.io.File(System.getProperty("user.dir")));
      
      javax.swing.ButtonGroup group1 = new javax.swing.ButtonGroup();
      group1.add(jTB_ATM_Traffic_Class_CBR);
      group1.add(jTB_ATM_Traffic_Class_UBR);
      
      javax.swing.ButtonGroup group2 = new javax.swing.ButtonGroup();
      group2.add(jTB_IP_Connection_Type_Multicast);
      group2.add(jTB_IP_Connection_Type_Unicast);
      
      javax.swing.ButtonGroup group3 = new javax.swing.ButtonGroup();
      group3.add(jTB_Interval_Between_Packets_Min);
      group3.add(jTB_Interval_Between_Packets_Max);
      
      javax.swing.ButtonGroup group4 = new javax.swing.ButtonGroup();
      group4.add(jTB_rsh);
      group4.add(jTB_ssh);
      
      // Warning message
      javax.swing.JOptionPane.showMessageDialog(this, "Make sure the firewalls of the sender and\nreceiver machines are open for the chosen UDP port\nbefore generating traffic.", "Warning", javax.swing.JOptionPane.ERROR_MESSAGE );
      
      /* Checking if ATM is enabled */
      if( System.getProperty( "HAVE_ATM" ) == null )
      {
        setState( jP_ATM , false );
        jTP_Traffic_Protocol.setEnabledAt( jTP_Traffic_Protocol.indexOfTab("ATM") , false );
      }
  
    }
  
  
  private int model_exists(String selectedfile) {
      // ---- model exists function ----
      // This function receives the name entered on the input box and verifies
      // if the file .obj exist, if the answer is positive it verifies if the file .generator_mtx exists
      // It returns:
      // 3 if the input file isn't .obj or its length is less than 4 chars
      // 2 if the .generator_mtx doesn't exist
      // 1 if the .obj doesn't exist
      // 0 if the files exist
      
      
      
      java.io.File selected_file_obj = new java.io.File(selectedfile);
      
      if ( ! ( (selected_file_obj.getName().length() > 4) &&
      (selected_file_obj.getName().substring(selected_file_obj.getName().length() - 4).trim().compareTo(".obj") == 0) ) ) {
          return 3;
      }
      
      directory = selected_file_obj.getAbsolutePath().substring( 0 ,
                  selected_file_obj.getAbsolutePath().length() -
                  selected_file_obj.getName().length() - 1 );
      modelname = selected_file_obj.getName().substring( 0 ,
                  selected_file_obj.getName().length() - 4 );
      
      if ( !( selected_file_obj.exists() ) ) {
          return 1;
      }
      
      java.io.File selected_file_generator = new java.io.File(directory + "/" + modelname + ".generator_mtx");
      if ( !( selected_file_generator.exists() ) ) {
          return 2;
      }
      
      //sets the reward filter
      fchooser_reward.resetChoosableFileFilters();
      ExampleFileFilterEx objFilter_reward =
      new ExampleFileFilterEx( 0 ,modelname , new String[] {".rate_reward."} , ".expr", "Rate reward files" );
      fchooser_reward.addChoosableFileFilter( objFilter_reward );
      fchooser_reward.setFileFilter( objFilter_reward );
      fchooser_reward.setDialogTitle( "Choose Reward File" );
      fchooser_reward.setCurrentDirectory( new java.io.File( directory ) );
      return 0;
  }
  
  
  private boolean test_model_name() {
      // test_model_name
      switch ( model_exists( jTF_OneWay_Markov_Modulated_Model_Name.getText() ) ) {
          case 0: jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(true);
                  jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(true);
                  jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(true);
                  return true;
          case 1: javax.swing.JOptionPane.showMessageDialog(this,
                  "Model " + directory + "/" + modelname +".obj doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                  jTF_OneWay_Markov_Modulated_Rewards_Name.setText("");
                  jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
                  jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
                  jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
                  return false;
          case 2: javax.swing.JOptionPane.showMessageDialog(this,
                  "File " + directory + "/" + modelname + ".generator_mtx doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                  jTF_OneWay_Markov_Modulated_Rewards_Name.setText("");
                  jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
                  jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
                  jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
                  return false;
          case 3: javax.swing.JOptionPane.showMessageDialog(this,
                  "You must specify a file with obj extension!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                  jTF_OneWay_Markov_Modulated_Rewards_Name.setText("");
                  jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
                  jL_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
                  jTF_OneWay_Markov_Modulated_Rewards_Name.setEnabled(false);
                  return false;
          default:
                  return false;
      }
  }
  
  
  private boolean test_model_name_RTT() {
      // test_model_name in RTT
      switch (model_exists(jTF_RTT_Markov_Modulated_Model_Name.getText())) {
          case 0: jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(true);
                  jL_RTT_Markov_Modulated_Rewards_Name.setEnabled(true);
                  jTF_RTT_Markov_Modulated_Rewards_Name.setEnabled(true);
                  return true;
          case 1: javax.swing.JOptionPane.showMessageDialog(this,
                  "Model " + directory + "/" + modelname +".obj doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                  jTF_RTT_Markov_Modulated_Rewards_Name.setText("");
                  jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
                  jL_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
                  jTF_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
                  return false;
          case 2: javax.swing.JOptionPane.showMessageDialog(this,
                  "File " + directory + "/" + modelname + ".generator_mtx doesn't exist!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                  jTF_RTT_Markov_Modulated_Rewards_Name.setText("");
                  jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
                  jL_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
                  jTF_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
                  return false;
          case 3: javax.swing.JOptionPane.showMessageDialog(this,
                            "You must specify a file with obj extension!","Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                  jTF_RTT_Markov_Modulated_Rewards_Name.setText("");
                  jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser.setEnabled(false);
                  jL_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
                  jTF_RTT_Markov_Modulated_Rewards_Name.setEnabled(false);
                  return false;
          default: return false;
      }
  }
  
  private Process runRemoteCommand( String command , String remote_directory ,
                                    String login , String host, String ssh_port, boolean rsh ){
      
      java.util.Vector temp_pars = new java.util.Vector();
      Process recvproc = null;
      
      boolean debug = true;
      
      if( command.length() == 0 ){     
          System.err.println( "Unable to execute remote command - no command specified" );
          return null;
      }
      else if( host.length() == 0 ){     
          System.err.println( "Unable to execute remote command - no host specified" );
          return null;
      }
      else if( login.length() == 0 )
      {     
          System.err.println( "Unable to execute remote command - no login specified" );
          return null;
      }
      else if( !rsh && ssh_port.length()==0 )
      {     
          System.err.println( "Unable to execute remote command - no ssh port specified" );
          return null;
      }      
          
      if ( remote_directory.length() == 0 ) remote_directory = "./";
      else if( !remote_directory.endsWith( "/" ) ) remote_directory += "/";
      
      String temp_str = "";                      
      if( rsh )
        temp_str = "rsh ";
      else
        temp_str = "ssh -p " + ssh_port + " -x ";                                    
      temp_str += "-l "+ login + " " + host + " " +
                  "\"" + remote_directory + command + "\"";

      if( debug )
          System.err.println( "\nRemote Command " + temp_str );                       

      temp_pars.add( "xterm" );
      temp_pars.add( "-e" );
      temp_pars.add( "bash");
      temp_pars.add( "-c" );
      temp_pars.add( temp_str );                      
                      
      String [ ] pars_array = new String[temp_pars.size()];
                      
      for( int i =  0 ; i < pars_array.length ; i++ ) 
      {
           pars_array[i] = (String)temp_pars.get( i );
      }                      
      try 
      {
           recvproc = Runtime.getRuntime().exec( pars_array );                         
      } 
      catch( java.io.IOException e ) 
      {
           System.err.println( "Error running remote command" );
           return null;
      }      
      return recvproc;
  }
  
  private boolean doSCP( String local_file , String local_directory , String remote_host, String ssh_port, String remote_file ,
                         String remote_directory , String login , char direction , String message )
  {
      String temp_str;
      java.util.Vector temp_pars_scp = new java.util.Vector();
      Process scp_proc = null;
      
      if( remote_host.length() == 0 ){     
          System.err.println( "Unable to copy - no host specified" );
          return false;
      }
      
      // Copying Receiver Warning Message
      
      // Warning message
      javax.swing.JOptionPane.showMessageDialog(this, message, "Warning", javax.swing.JOptionPane.ERROR_MESSAGE );
      
      if ( remote_directory.length() == 0 ) remote_directory = "./";
      else if( !remote_directory.endsWith( "/" ) ) remote_directory += "/";
      if ( local_directory.length() == 0 ) local_directory = "./";
      else if( !local_directory.endsWith( "/" ) ) local_directory += "/";     
      
      if ( direction == 'U' || direction == 'u' )      //UPLOAD
      {                  
          if( local_file.length() == 0 ) {
              System.err.println( "Unable to upload - no file target" );
              return false;
          }
          temp_str = "scp " + local_directory + local_file + " " + login + "@" + 
                     remote_host + ":" + remote_directory;
      }
      else if ( direction == 'D' || direction == 'd' ) // DOWNLOAD
      {
          if( remote_file.length() == 0 ) {
              System.err.println( "Unable to download - no file target" );
              return false;
          }
          temp_str = "scp -P " + ssh_port + " " + login + "@" + remote_host + ":" + remote_directory + remote_file
                     + " " + local_directory + local_file;  
      }
      else
          return false;
      
      temp_pars_scp.add( "xterm" );
      temp_pars_scp.add( "-e" );
      temp_pars_scp.add( "bash");
      temp_pars_scp.add( "-c" );
      temp_pars_scp.add( temp_str );
                          
      String [ ] pars_array = new String[temp_pars_scp.size()];
                     
      for( int i =  0 ; i < pars_array.length ; i++ ) 
            pars_array[i] = (String)temp_pars_scp.get( i );                    
                      
      try 
      {
          scp_proc = Runtime.getRuntime().exec( pars_array );                         
      } 
      catch( java.io.IOException e ) 
      {
           System.err.println( "Error executing SCP" );
           return false;
      }
      try 
      {
           if ( scp_proc != null ) 
              scp_proc.waitFor(); 
      }
      catch (java.lang.InterruptedException e) 
     {
           System.err.println( "Error while copying" );
           return false;
     } 
      
     return true;     
  }
  
  
  //======================= END OF OTHER FUNCTIONS========================
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_Close;
    private javax.swing.JButton jB_OneWay_Markov_Modulated_Model_Name_File_Chooser;
    private javax.swing.JButton jB_OneWay_Markov_Modulated_Rewards_Name_File_Chooser;
    private javax.swing.JButton jB_OneWay_Trace_Description_File_Name_File_Chosser;
    private javax.swing.JButton jB_RTT_Markov_Modulated_Model_Name_File_Chooser;
    private javax.swing.JButton jB_RTT_Markov_Modulated_Rewards_Name_File_Chooser;
    private javax.swing.JButton jB_RTT_Trace_Description_File_Name_File_Chosser;
    private javax.swing.JButton jB_Run;
    private javax.swing.JButton jB_TwoWay_aTrace_Description_File_Name_InputFile_Chooser;
    private javax.swing.JButton jB_TwoWay_aTrace_Description_File_Name_TraceFile_Chooser;
    private javax.swing.JButton jB_measures;
    private javax.swing.JCheckBox jCB_ReceiverCopy;
    private javax.swing.JCheckBox jCB_ReceiverPath;
    private javax.swing.JCheckBox jCB_compact;
    private javax.swing.JCheckBox jCB_receiver;
    private javax.swing.JLabel jL_ATM_Destination_VCi;
    private javax.swing.JLabel jL_ATM_Destination_VPi;
    private javax.swing.JLabel jL_ATM_Traffic_Class_Peak_Rate;
    private javax.swing.JLabel jL_CBR_Frame_Size;
    private javax.swing.JLabel jL_CBR_Frame_Time;
    private javax.swing.JLabel jL_IP_Destination_Host;
    private javax.swing.JLabel jL_IP_Destination_Port;
    private javax.swing.JLabel jL_Interval_Between_Packets;
    private javax.swing.JLabel jL_OneWay_Markov_Modulated_Frame_Size;
    private javax.swing.JLabel jL_OneWay_Markov_Modulated_Model_Name;
    private javax.swing.JLabel jL_OneWay_Markov_Modulated_Rewards_Name;
    private javax.swing.JLabel jL_OneWay_Trace_Description_File_Multiplier;
    private javax.swing.JLabel jL_OneWay_Trace_Description_File_Name;
    private javax.swing.JLabel jL_Packet_Size;
    private javax.swing.JLabel jL_RTT_Markov_Modulated_Frame_Size;
    private javax.swing.JLabel jL_RTT_Markov_Modulated_Model_Name;
    private javax.swing.JLabel jL_RTT_Markov_Modulated_Rewards_Name;
    private javax.swing.JLabel jL_RTT_PacketPair_Frame_Time;
    private javax.swing.JLabel jL_RTT_PacketPair_Number_of_Packets;
    private javax.swing.JLabel jL_RTT_Trace_Description_File_Multiplier;
    private javax.swing.JLabel jL_RTT_Trace_Description_File_Name;
    private javax.swing.JLabel jL_ReceiverPath;
    private javax.swing.JLabel jL_Set3_CBR_Frame_Time;
    private javax.swing.JLabel jL_Tangram_Picture;
    private javax.swing.JLabel jL_Tot_Gen_Time;
    private javax.swing.JLabel jL_TwoWay_CBR_Frame_Time;
    private javax.swing.JLabel jL_TwoWay_CBR_Number_of_Packets;
    private javax.swing.JLabel jL_TwoWay_PacketPair_Frame_Time;
    private javax.swing.JLabel jL_TwoWay_PacketPair_Number_of_Packets;
    private javax.swing.JLabel jL_TwoWay_aTrace_Description_File_InputFile;
    private javax.swing.JLabel jL_TwoWay_aTrace_Description_File_Offset;
    private javax.swing.JLabel jL_TwoWay_aTrace_Description_File_Skew;
    private javax.swing.JLabel jL_TwoWay_aTrace_Description_File_Startx;
    private javax.swing.JLabel jL_TwoWay_aTrace_Description_File_Tracefile;
    private javax.swing.JLabel jL_login;
    private javax.swing.JLabel jL_shell;
    private javax.swing.JLabel jL_ssh_port;
    private javax.swing.JLabel jL_trace;
    private javax.swing.JPanel jP_ATM;
    private javax.swing.JPanel jP_ATM_Destination;
    private javax.swing.JPanel jP_ATM_Traffic_Class;
    private javax.swing.JPanel jP_IP;
    private javax.swing.JPanel jP_IP_Destination;
    private javax.swing.JPanel jP_Interval_Between_Packets;
    private javax.swing.JPanel jP_Interval_Between_Packets_Buttons;
    private javax.swing.JPanel jP_Line1;
    private javax.swing.JPanel jP_Line2;
    private javax.swing.JPanel jP_OneWay_CBR;
    private javax.swing.JPanel jP_OneWay_CBR_1;
    private javax.swing.JPanel jP_OneWay_Markov_Modulated;
    private javax.swing.JPanel jP_OneWay_Markov_Modulated_Frame_Size;
    private javax.swing.JPanel jP_OneWay_Markov_Modulated_Model;
    private javax.swing.JPanel jP_OneWay_Mode;
    private javax.swing.JPanel jP_OneWay_Trace;
    private javax.swing.JPanel jP_OneWay_Trace_Description_File;
    private javax.swing.JPanel jP_Packet;
    private javax.swing.JPanel jP_RTT_CBR;
    private javax.swing.JPanel jP_RTT_CBR1;
    private javax.swing.JPanel jP_RTT_Markov_Modulated;
    private javax.swing.JPanel jP_RTT_Markov_Modulated_Frame_Size;
    private javax.swing.JPanel jP_RTT_Markov_Modulated_Model;
    private javax.swing.JPanel jP_RTT_Mode;
    private javax.swing.JPanel jP_RTT_PacketPair;
    private javax.swing.JPanel jP_RTT_PacketPair1;
    private javax.swing.JPanel jP_RTT_Trace;
    private javax.swing.JPanel jP_RTT_Trace_Description_File;
    private javax.swing.JPanel jP_Tot_Gen_Time;
    private javax.swing.JPanel jP_Traffic_Generator_Main;
    private javax.swing.JPanel jP_TwoWay_CBR;
    private javax.swing.JPanel jP_TwoWay_CBR_1;
    private javax.swing.JPanel jP_TwoWay_PacketPair;
    private javax.swing.JPanel jP_TwoWay_PacketPair_1;
    private javax.swing.JPanel jP_TwoWay_aTrace;
    private javax.swing.JPanel jP_TwoWay_aTrace1;
    private javax.swing.JPanel jP_TwoWays_Mode;
    private javax.swing.JPanel jP_receiver;
    private javax.swing.JPanel jP_trace_file;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jTB_ATM_Traffic_Class_CBR;
    private javax.swing.JToggleButton jTB_ATM_Traffic_Class_UBR;
    private javax.swing.JToggleButton jTB_IP_Connection_Type_Multicast;
    private javax.swing.JToggleButton jTB_IP_Connection_Type_Unicast;
    private javax.swing.JToggleButton jTB_Interval_Between_Packets_Max;
    private javax.swing.JToggleButton jTB_Interval_Between_Packets_Min;
    private javax.swing.JToggleButton jTB_rsh;
    private javax.swing.JToggleButton jTB_ssh;
    private javax.swing.JTextField jTF_ATM_Destination_VCi;
    private javax.swing.JTextField jTF_ATM_Destination_VPi;
    private javax.swing.JTextField jTF_ATM_Traffic_Class_Peak_Rate;
    private javax.swing.JTextField jTF_CBR_Frame_Size;
    private javax.swing.JTextField jTF_CBR_Frame_Time;
    private javax.swing.JTextField jTF_IP_Destination_Host;
    private javax.swing.JTextField jTF_IP_Destination_Port;
    private javax.swing.JTextField jTF_OneWay_Markov_Modulated_Frame_Size;
    private javax.swing.JTextField jTF_OneWay_Markov_Modulated_Model_Name;
    private javax.swing.JTextField jTF_OneWay_Markov_Modulated_Rewards_Name;
    private javax.swing.JTextField jTF_OneWay_Trace_Description_File_Multiplier;
    private javax.swing.JTextField jTF_OneWay_Trace_Description_File_Name;
    private javax.swing.JTextField jTF_Packet_Size;
    private javax.swing.JTextField jTF_RTT_Markov_Modulated_Frame_Size;
    private javax.swing.JTextField jTF_RTT_Markov_Modulated_Model_Name;
    private javax.swing.JTextField jTF_RTT_Markov_Modulated_Rewards_Name;
    private javax.swing.JTextField jTF_RTT_PacketPair_Frame_Time;
    private javax.swing.JTextField jTF_RTT_PacketPair_Number_of_Packets;
    private javax.swing.JTextField jTF_RTT_Trace_Description_File_Multiplier;
    private javax.swing.JTextField jTF_RTT_Trace_Description_File_Name;
    private javax.swing.JTextField jTF_ReceiverPath;
    private javax.swing.JTextField jTF_Set3_CBR_Frame_Time;
    private javax.swing.JTextField jTF_Tot_Gen_Time;
    private javax.swing.JTextField jTF_TwoWay_CBR_Frame_Time;
    private javax.swing.JTextField jTF_TwoWay_CBR_Number_of_Packets;
    private javax.swing.JTextField jTF_TwoWay_PacketPair_Frame_Time;
    private javax.swing.JTextField jTF_TwoWay_PacketPair_Number_of_Packets;
    private javax.swing.JTextField jTF_TwoWay_aTrace_Description_File_InputFile;
    private javax.swing.JTextField jTF_TwoWay_aTrace_Description_File_Offset;
    private javax.swing.JTextField jTF_TwoWay_aTrace_Description_File_Skew;
    private javax.swing.JTextField jTF_TwoWay_aTrace_Description_File_Startx;
    private javax.swing.JTextField jTF_TwoWay_aTrace_Description_File_Tracefile;
    private javax.swing.JTextField jTF_login;
    private javax.swing.JTextField jTF_ssh_port;
    private javax.swing.JTextField jTF_trace_name;
    private javax.swing.JTabbedPane jTP_OneWay_Mode;
    private javax.swing.JTabbedPane jTP_RTT_Mode;
    private javax.swing.JTabbedPane jTP_Traffic_Protocol;
    private javax.swing.JTabbedPane jTP_Traffic_Types_Top;
    private javax.swing.JTabbedPane jTP_TwoWays_Mode;
    // End of variables declaration//GEN-END:variables
    
    //----- Global Variables
    private javax.swing.JFileChooser fchooser_reward;
    private javax.swing.JFileChooser fchooser_model;
    private javax.swing.JFileChooser fchooser_trace;
    private javax.swing.JFileChooser fchooser_aTrace;
    private String modelname = "",
                   directory = "";
    private boolean is_in = false,
                    is_in_trace = false;
    private String holder = "";
    //------ End of Globals variables
    
    
    public static void main(java.lang.String[] args) {
        new T2traffic("terminal").show();
    }
}

